
Bai4_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f98  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ec8  08008ec8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ec8  08008ec8  00018ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ed0  08008ed0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ed0  08008ed0  00018ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ed4  08008ed4  00018ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a0df  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000359e  00000000  00000000  0003a11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  0003d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b8  00000000  00000000  0003e910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a11  00000000  00000000  0003f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001891b  00000000  00000000  000633d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf935  00000000  00000000  0007bcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b629  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a9c  00000000  00000000  0014b67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f18 	.word	0x08005f18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005f18 	.word	0x08005f18

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2108      	movs	r1, #8
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <button_init+0x14>)
 80004ca:	f002 fd8f 	bl	8002fec <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <button_Scan>:

void button_Scan(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2108      	movs	r1, #8
 80004e2:	482f      	ldr	r0, [pc, #188]	; (80005a0 <button_Scan+0xc8>)
 80004e4:	f002 fd82 	bl	8002fec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2108      	movs	r1, #8
 80004ec:	482c      	ldr	r0, [pc, #176]	; (80005a0 <button_Scan+0xc8>)
 80004ee:	f002 fd7d 	bl	8002fec <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f2:	230a      	movs	r3, #10
 80004f4:	2202      	movs	r2, #2
 80004f6:	492b      	ldr	r1, [pc, #172]	; (80005a4 <button_Scan+0xcc>)
 80004f8:	482b      	ldr	r0, [pc, #172]	; (80005a8 <button_Scan+0xd0>)
 80004fa:	f004 fb68 	bl	8004bce <HAL_SPI_Receive>
	  int button_index = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000506:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	e03f      	b.n	800058e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db06      	blt.n	8000522 <button_Scan+0x4a>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dc03      	bgt.n	8000522 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e018      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b03      	cmp	r3, #3
 8000526:	dd07      	ble.n	8000538 <button_Scan+0x60>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b07      	cmp	r3, #7
 800052c:	dc04      	bgt.n	8000538 <button_Scan+0x60>
			  button_index = 7 - i;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f1c3 0307 	rsb	r3, r3, #7
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e00d      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dd06      	ble.n	800054c <button_Scan+0x74>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0b      	cmp	r3, #11
 8000542:	dc03      	bgt.n	800054c <button_Scan+0x74>
			  button_index = i + 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3304      	adds	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e003      	b.n	8000554 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f1c3 0317 	rsb	r3, r3, #23
 8000552:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <button_Scan+0xcc>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	897b      	ldrh	r3, [r7, #10]
 800055a:	4013      	ands	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <button_Scan+0x96>
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2100      	movs	r1, #0
 8000568:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800056c:	e009      	b.n	8000582 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <button_Scan+0xd4>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000576:	3301      	adds	r3, #1
 8000578:	b299      	uxth	r1, r3
 800057a:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <button_Scan+0xd4>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	085b      	lsrs	r3, r3, #1
 8000586:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	ddbc      	ble.n	800050e <button_Scan+0x36>
	  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	20000028 	.word	0x20000028
 80005a8:	2000015c 	.word	0x2000015c
 80005ac:	2000004c 	.word	0x2000004c

080005b0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005b4:	201e      	movs	r0, #30
 80005b6:	f002 f987 	bl	80028c8 <DEC2BCD>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <ds3231_init+0x80>)
 80005c0:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005c2:	2016      	movs	r0, #22
 80005c4:	f002 f980 	bl	80028c8 <DEC2BCD>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <ds3231_init+0x80>)
 80005ce:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005d0:	2015      	movs	r0, #21
 80005d2:	f002 f979 	bl	80028c8 <DEC2BCD>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <ds3231_init+0x80>)
 80005dc:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005de:	2006      	movs	r0, #6
 80005e0:	f002 f972 	bl	80028c8 <DEC2BCD>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <ds3231_init+0x80>)
 80005ea:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005ec:	200f      	movs	r0, #15
 80005ee:	f002 f96b 	bl	80028c8 <DEC2BCD>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <ds3231_init+0x80>)
 80005f8:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80005fa:	2009      	movs	r0, #9
 80005fc:	f002 f964 	bl	80028c8 <DEC2BCD>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <ds3231_init+0x80>)
 8000606:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000608:	2017      	movs	r0, #23
 800060a:	f002 f95d 	bl	80028c8 <DEC2BCD>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <ds3231_init+0x80>)
 8000614:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000616:	2332      	movs	r3, #50	; 0x32
 8000618:	2203      	movs	r2, #3
 800061a:	21d0      	movs	r1, #208	; 0xd0
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <ds3231_init+0x84>)
 800061e:	f003 f963 	bl	80038e8 <HAL_I2C_IsDeviceReady>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d000      	beq.n	800062a <ds3231_init+0x7a>
		while(1);
 8000628:	e7fe      	b.n	8000628 <ds3231_init+0x78>
	};
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000074 	.word	0x20000074
 8000634:	200000cc 	.word	0x200000cc

08000638 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af04      	add	r7, sp, #16
 800063e:	4603      	mov	r3, r0
 8000640:	460a      	mov	r2, r1
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	4613      	mov	r3, r2
 8000646:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f93c 	bl	80028c8 <DEC2BCD>
 8000650:	4603      	mov	r3, r0
 8000652:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	b29a      	uxth	r2, r3
 8000658:	230a      	movs	r3, #10
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	2301      	movs	r3, #1
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f107 030f 	add.w	r3, r7, #15
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	21d0      	movs	r1, #208	; 0xd0
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <ds3231_Write+0x40>)
 800066c:	f002 fe1c 	bl	80032a8 <HAL_I2C_Mem_Write>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000cc 	.word	0x200000cc

0800067c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000682:	230a      	movs	r3, #10
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2307      	movs	r3, #7
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <ds3231_ReadTime+0xa4>)
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2200      	movs	r2, #0
 8000692:	21d0      	movs	r1, #208	; 0xd0
 8000694:	4823      	ldr	r0, [pc, #140]	; (8000724 <ds3231_ReadTime+0xa8>)
 8000696:	f002 ff01 	bl	800349c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <ds3231_ReadTime+0xa4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 f8f8 	bl	8002894 <BCD2DEC>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <ds3231_ReadTime+0xac>)
 80006aa:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006ae:	785b      	ldrb	r3, [r3, #1]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f8ef 	bl	8002894 <BCD2DEC>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <ds3231_ReadTime+0xb0>)
 80006bc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 f8e6 	bl	8002894 <BCD2DEC>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <ds3231_ReadTime+0xb4>)
 80006ce:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006d2:	78db      	ldrb	r3, [r3, #3]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 f8dd 	bl	8002894 <BCD2DEC>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <ds3231_ReadTime+0xb8>)
 80006e0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 f8d4 	bl	8002894 <BCD2DEC>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <ds3231_ReadTime+0xbc>)
 80006f2:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006f6:	795b      	ldrb	r3, [r3, #5]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 f8cb 	bl	8002894 <BCD2DEC>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <ds3231_ReadTime+0xc0>)
 8000704:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <ds3231_ReadTime+0xa4>)
 8000708:	799b      	ldrb	r3, [r3, #6]
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f8c2 	bl	8002894 <BCD2DEC>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <ds3231_ReadTime+0xc4>)
 8000716:	701a      	strb	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000074 	.word	0x20000074
 8000724:	200000cc 	.word	0x200000cc
 8000728:	2000006c 	.word	0x2000006c
 800072c:	2000006e 	.word	0x2000006e
 8000730:	20000071 	.word	0x20000071
 8000734:	20000070 	.word	0x20000070
 8000738:	2000006f 	.word	0x2000006f
 800073c:	20000072 	.word	0x20000072
 8000740:	2000006d 	.word	0x2000006d

08000744 <displayTime>:
uint8_t timer_hours = 0;
uint8_t timer_min = 0;
uint8_t timer_sec = 0;
uint8_t timer_check = 0;

void displayTime(){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 800074a:	4b36      	ldr	r3, [pc, #216]	; (8000824 <displayTime+0xe0>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b29a      	uxth	r2, r3
 8000750:	2318      	movs	r3, #24
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2300      	movs	r3, #0
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2302      	movs	r3, #2
 8000760:	2164      	movs	r1, #100	; 0x64
 8000762:	2046      	movs	r0, #70	; 0x46
 8000764:	f001 fac2 	bl	8001cec <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8000768:	4b2f      	ldr	r3, [pc, #188]	; (8000828 <displayTime+0xe4>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b29a      	uxth	r2, r3
 800076e:	2318      	movs	r3, #24
 8000770:	9302      	str	r3, [sp, #8]
 8000772:	2300      	movs	r3, #0
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2302      	movs	r3, #2
 800077e:	2164      	movs	r1, #100	; 0x64
 8000780:	206e      	movs	r0, #110	; 0x6e
 8000782:	f001 fab3 	bl	8001cec <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <displayTime+0xe8>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b29a      	uxth	r2, r3
 800078c:	2318      	movs	r3, #24
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	2300      	movs	r3, #0
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2302      	movs	r3, #2
 800079c:	2164      	movs	r1, #100	; 0x64
 800079e:	2096      	movs	r0, #150	; 0x96
 80007a0:	f001 faa4 	bl	8001cec <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <displayTime+0xec>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	2318      	movs	r3, #24
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2300      	movs	r3, #0
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2302      	movs	r3, #2
 80007ba:	2182      	movs	r1, #130	; 0x82
 80007bc:	2014      	movs	r0, #20
 80007be:	f001 fa95 	bl	8001cec <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <displayTime+0xf0>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	2318      	movs	r3, #24
 80007ca:	9302      	str	r3, [sp, #8]
 80007cc:	2300      	movs	r3, #0
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2302      	movs	r3, #2
 80007d8:	2182      	movs	r1, #130	; 0x82
 80007da:	2046      	movs	r0, #70	; 0x46
 80007dc:	f001 fa86 	bl	8001cec <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <displayTime+0xf4>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	2318      	movs	r3, #24
 80007e8:	9302      	str	r3, [sp, #8]
 80007ea:	2300      	movs	r3, #0
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2302      	movs	r3, #2
 80007f6:	2182      	movs	r1, #130	; 0x82
 80007f8:	206e      	movs	r0, #110	; 0x6e
 80007fa:	f001 fa77 	bl	8001cec <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <displayTime+0xf8>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b29a      	uxth	r2, r3
 8000804:	2318      	movs	r3, #24
 8000806:	9302      	str	r3, [sp, #8]
 8000808:	2300      	movs	r3, #0
 800080a:	9301      	str	r3, [sp, #4]
 800080c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2302      	movs	r3, #2
 8000814:	2182      	movs	r1, #130	; 0x82
 8000816:	2096      	movs	r0, #150	; 0x96
 8000818:	f001 fa68 	bl	8001cec <lcd_ShowIntNum>
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000071 	.word	0x20000071
 8000828:	2000006e 	.word	0x2000006e
 800082c:	2000006c 	.word	0x2000006c
 8000830:	20000070 	.word	0x20000070
 8000834:	2000006f 	.word	0x2000006f
 8000838:	20000072 	.word	0x20000072
 800083c:	2000006d 	.word	0x2000006d

08000840 <displayTimer>:

void displayTimer(){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 8000846:	2000      	movs	r0, #0
 8000848:	f001 f912 	bl	8001a70 <lcd_Clear>
	lcd_ShowIntNum(70, 100, timer_hours, 2, MAGENTA, BLACK, 24);
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <displayTimer+0x6c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b29a      	uxth	r2, r3
 8000852:	2318      	movs	r3, #24
 8000854:	9302      	str	r3, [sp, #8]
 8000856:	2300      	movs	r3, #0
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2302      	movs	r3, #2
 8000862:	2164      	movs	r1, #100	; 0x64
 8000864:	2046      	movs	r0, #70	; 0x46
 8000866:	f001 fa41 	bl	8001cec <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, timer_min, 2, MAGENTA, BLACK, 24);
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <displayTimer+0x70>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b29a      	uxth	r2, r3
 8000870:	2318      	movs	r3, #24
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	2300      	movs	r3, #0
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2302      	movs	r3, #2
 8000880:	2164      	movs	r1, #100	; 0x64
 8000882:	206e      	movs	r0, #110	; 0x6e
 8000884:	f001 fa32 	bl	8001cec <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, timer_sec, 2, MAGENTA, BLACK, 24);
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <displayTimer+0x74>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b29a      	uxth	r2, r3
 800088e:	2318      	movs	r3, #24
 8000890:	9302      	str	r3, [sp, #8]
 8000892:	2300      	movs	r3, #0
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2302      	movs	r3, #2
 800089e:	2164      	movs	r1, #100	; 0x64
 80008a0:	2096      	movs	r0, #150	; 0x96
 80008a2:	f001 fa23 	bl	8001cec <lcd_ShowIntNum>
//	lcd_ShowIntNum(20, 100, timer_day, 2, MAGENTA, BLACK, 24);
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000002c 	.word	0x2000002c
 80008b0:	2000002d 	.word	0x2000002d
 80008b4:	2000002e 	.word	0x2000002e

080008b8 <timer_mode>:

void timer_mode(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af04      	add	r7, sp, #16
//	timer_date = ds3231_date;
//	ds3231_Write(ds3231_hours, 0);
//	ds3231_Write(ds3231_min, 0);
//	ds3231_Write(ds3231_sec, 0);
//	ds3231_Write(timer, value)
	count_led_flash = (count_led_flash + 1)%10;
 80008be:	4bac      	ldr	r3, [pc, #688]	; (8000b70 <timer_mode+0x2b8>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	4bab      	ldr	r3, [pc, #684]	; (8000b74 <timer_mode+0x2bc>)
 80008c6:	fb83 1302 	smull	r1, r3, r3, r2
 80008ca:	1099      	asrs	r1, r3, #2
 80008cc:	17d3      	asrs	r3, r2, #31
 80008ce:	1ac9      	subs	r1, r1, r3
 80008d0:	460b      	mov	r3, r1
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	440b      	add	r3, r1
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	1ad1      	subs	r1, r2, r3
 80008da:	b2ca      	uxtb	r2, r1
 80008dc:	4ba4      	ldr	r3, [pc, #656]	; (8000b70 <timer_mode+0x2b8>)
 80008de:	701a      	strb	r2, [r3, #0]
	if(button_count[3] == 40) flag = 1;
 80008e0:	4ba5      	ldr	r3, [pc, #660]	; (8000b78 <timer_mode+0x2c0>)
 80008e2:	88db      	ldrh	r3, [r3, #6]
 80008e4:	2b28      	cmp	r3, #40	; 0x28
 80008e6:	d103      	bne.n	80008f0 <timer_mode+0x38>
 80008e8:	4ba4      	ldr	r3, [pc, #656]	; (8000b7c <timer_mode+0x2c4>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e002      	b.n	80008f6 <timer_mode+0x3e>
	else flag = 0;
 80008f0:	4ba2      	ldr	r3, [pc, #648]	; (8000b7c <timer_mode+0x2c4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
	switch(TIMER){
 80008f6:	4ba2      	ldr	r3, [pc, #648]	; (8000b80 <timer_mode+0x2c8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	f200 81cc 	bhi.w	8000c9a <timer_mode+0x3e2>
 8000902:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <timer_mode+0x50>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000919 	.word	0x08000919
 800090c:	08000a05 	.word	0x08000a05
 8000910:	08000af1 	.word	0x08000af1
 8000914:	08000c09 	.word	0x08000c09
	case timerH:
		displayTimer();
 8000918:	f7ff ff92 	bl	8000840 <displayTimer>
		if(count_led_flash < 5){
 800091c:	4b94      	ldr	r3, [pc, #592]	; (8000b70 <timer_mode+0x2b8>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b04      	cmp	r3, #4
 8000922:	d80e      	bhi.n	8000942 <timer_mode+0x8a>
			lcd_ShowIntNum(70, 100, timer_hours, 2, BLACK, BLACK, 24);
 8000924:	4b97      	ldr	r3, [pc, #604]	; (8000b84 <timer_mode+0x2cc>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b29a      	uxth	r2, r3
 800092a:	2318      	movs	r3, #24
 800092c:	9302      	str	r3, [sp, #8]
 800092e:	2300      	movs	r3, #0
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	2300      	movs	r3, #0
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2302      	movs	r3, #2
 8000938:	2164      	movs	r1, #100	; 0x64
 800093a:	2046      	movs	r0, #70	; 0x46
 800093c:	f001 f9d6 	bl	8001cec <lcd_ShowIntNum>
 8000940:	e00e      	b.n	8000960 <timer_mode+0xa8>
		} else lcd_ShowIntNum(70, 100, timer_hours, 2, MAGENTA, BLACK, 24);
 8000942:	4b90      	ldr	r3, [pc, #576]	; (8000b84 <timer_mode+0x2cc>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b29a      	uxth	r2, r3
 8000948:	2318      	movs	r3, #24
 800094a:	9302      	str	r3, [sp, #8]
 800094c:	2300      	movs	r3, #0
 800094e:	9301      	str	r3, [sp, #4]
 8000950:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2302      	movs	r3, #2
 8000958:	2164      	movs	r1, #100	; 0x64
 800095a:	2046      	movs	r0, #70	; 0x46
 800095c:	f001 f9c6 	bl	8001cec <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000960:	4b85      	ldr	r3, [pc, #532]	; (8000b78 <timer_mode+0x2c0>)
 8000962:	88db      	ldrh	r3, [r3, #6]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d136      	bne.n	80009d6 <timer_mode+0x11e>
			timer_hours = (timer_hours % 24) + 1 ; //btn3 = ↑
 8000968:	4b86      	ldr	r3, [pc, #536]	; (8000b84 <timer_mode+0x2cc>)
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	4b86      	ldr	r3, [pc, #536]	; (8000b88 <timer_mode+0x2d0>)
 800096e:	fba3 1302 	umull	r1, r3, r3, r2
 8000972:	0919      	lsrs	r1, r3, #4
 8000974:	460b      	mov	r3, r1
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	440b      	add	r3, r1
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	3301      	adds	r3, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b7f      	ldr	r3, [pc, #508]	; (8000b84 <timer_mode+0x2cc>)
 8000986:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_HOUR, timer_hours);
 8000988:	4b7e      	ldr	r3, [pc, #504]	; (8000b84 <timer_mode+0x2cc>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	2002      	movs	r0, #2
 8000990:	f7ff fe52 	bl	8000638 <ds3231_Write>
		}
		while(flag == 1) {
 8000994:	e01f      	b.n	80009d6 <timer_mode+0x11e>
			count_led_flash = 9;
 8000996:	4b76      	ldr	r3, [pc, #472]	; (8000b70 <timer_mode+0x2b8>)
 8000998:	2209      	movs	r2, #9
 800099a:	701a      	strb	r2, [r3, #0]
			if(button_count[3]%4 == 0){
 800099c:	4b76      	ldr	r3, [pc, #472]	; (8000b78 <timer_mode+0x2c0>)
 800099e:	88db      	ldrh	r3, [r3, #6]
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d115      	bne.n	80009d6 <timer_mode+0x11e>
				timer_hours = (timer_hours % 24) + 1;
 80009aa:	4b76      	ldr	r3, [pc, #472]	; (8000b84 <timer_mode+0x2cc>)
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b76      	ldr	r3, [pc, #472]	; (8000b88 <timer_mode+0x2d0>)
 80009b0:	fba3 1302 	umull	r1, r3, r3, r2
 80009b4:	0919      	lsrs	r1, r3, #4
 80009b6:	460b      	mov	r3, r1
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	440b      	add	r3, r1
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b6f      	ldr	r3, [pc, #444]	; (8000b84 <timer_mode+0x2cc>)
 80009c8:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_HOUR, timer_hours);
 80009ca:	4b6e      	ldr	r3, [pc, #440]	; (8000b84 <timer_mode+0x2cc>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	4619      	mov	r1, r3
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fe31 	bl	8000638 <ds3231_Write>
		while(flag == 1) {
 80009d6:	4b69      	ldr	r3, [pc, #420]	; (8000b7c <timer_mode+0x2c4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d0db      	beq.n	8000996 <timer_mode+0xde>
			}
		}
		if(button_count[0] == 1) {TIMER = timerM; count_led_flash = 0;}
 80009de:	4b66      	ldr	r3, [pc, #408]	; (8000b78 <timer_mode+0x2c0>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d105      	bne.n	80009f2 <timer_mode+0x13a>
 80009e6:	4b66      	ldr	r3, [pc, #408]	; (8000b80 <timer_mode+0x2c8>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	4b60      	ldr	r3, [pc, #384]	; (8000b70 <timer_mode+0x2b8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		if(button_count[14] == 1) status = MODE1;
 80009f2:	4b61      	ldr	r3, [pc, #388]	; (8000b78 <timer_mode+0x2c0>)
 80009f4:	8b9b      	ldrh	r3, [r3, #28]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	f040 8151 	bne.w	8000c9e <timer_mode+0x3e6>
 80009fc:	4b63      	ldr	r3, [pc, #396]	; (8000b8c <timer_mode+0x2d4>)
 80009fe:	2202      	movs	r2, #2
 8000a00:	601a      	str	r2, [r3, #0]
		break;
 8000a02:	e14c      	b.n	8000c9e <timer_mode+0x3e6>
	case timerM:
		displayTimer();
 8000a04:	f7ff ff1c 	bl	8000840 <displayTimer>
		if(count_led_flash < 10){
 8000a08:	4b59      	ldr	r3, [pc, #356]	; (8000b70 <timer_mode+0x2b8>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b09      	cmp	r3, #9
 8000a0e:	d80e      	bhi.n	8000a2e <timer_mode+0x176>
			lcd_ShowIntNum(70, 100, timer_min, 2, BLACK, BLACK, 24);
 8000a10:	4b5f      	ldr	r3, [pc, #380]	; (8000b90 <timer_mode+0x2d8>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	2318      	movs	r3, #24
 8000a18:	9302      	str	r3, [sp, #8]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2302      	movs	r3, #2
 8000a24:	2164      	movs	r1, #100	; 0x64
 8000a26:	2046      	movs	r0, #70	; 0x46
 8000a28:	f001 f960 	bl	8001cec <lcd_ShowIntNum>
 8000a2c:	e00e      	b.n	8000a4c <timer_mode+0x194>
		} else lcd_ShowIntNum(70, 100, timer_min, 2, MAGENTA, BLACK, 24);
 8000a2e:	4b58      	ldr	r3, [pc, #352]	; (8000b90 <timer_mode+0x2d8>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	2318      	movs	r3, #24
 8000a36:	9302      	str	r3, [sp, #8]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2302      	movs	r3, #2
 8000a44:	2164      	movs	r1, #100	; 0x64
 8000a46:	2046      	movs	r0, #70	; 0x46
 8000a48:	f001 f950 	bl	8001cec <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000a4c:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <timer_mode+0x2c0>)
 8000a4e:	88db      	ldrh	r3, [r3, #6]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d136      	bne.n	8000ac2 <timer_mode+0x20a>
			timer_min = (timer_min % 60) + 1; //btn3 = ↑
 8000a54:	4b4e      	ldr	r3, [pc, #312]	; (8000b90 <timer_mode+0x2d8>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b4e      	ldr	r3, [pc, #312]	; (8000b94 <timer_mode+0x2dc>)
 8000a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a5e:	0959      	lsrs	r1, r3, #5
 8000a60:	460b      	mov	r3, r1
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	1a5b      	subs	r3, r3, r1
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <timer_mode+0x2d8>)
 8000a72:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MIN, timer_min);
 8000a74:	4b46      	ldr	r3, [pc, #280]	; (8000b90 <timer_mode+0x2d8>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff fddc 	bl	8000638 <ds3231_Write>
		}
		while(flag == 1) {
 8000a80:	e01f      	b.n	8000ac2 <timer_mode+0x20a>
			count_led_flash = 9;
 8000a82:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <timer_mode+0x2b8>)
 8000a84:	2209      	movs	r2, #9
 8000a86:	701a      	strb	r2, [r3, #0]
			if(button_count[3]%4 == 0){
 8000a88:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <timer_mode+0x2c0>)
 8000a8a:	88db      	ldrh	r3, [r3, #6]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d115      	bne.n	8000ac2 <timer_mode+0x20a>
				timer_min = (timer_min % 60) + 1;
 8000a96:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <timer_mode+0x2d8>)
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <timer_mode+0x2dc>)
 8000a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa0:	0959      	lsrs	r1, r3, #5
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	011b      	lsls	r3, r3, #4
 8000aa6:	1a5b      	subs	r3, r3, r1
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <timer_mode+0x2d8>)
 8000ab4:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_MIN, timer_min);
 8000ab6:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <timer_mode+0x2d8>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4619      	mov	r1, r3
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fdbb 	bl	8000638 <ds3231_Write>
		while(flag == 1) {
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <timer_mode+0x2c4>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d0db      	beq.n	8000a82 <timer_mode+0x1ca>
			}
		}
		if(button_count[0] == 1) {TIMER = timerS; count_led_flash = 0;}
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <timer_mode+0x2c0>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d105      	bne.n	8000ade <timer_mode+0x226>
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <timer_mode+0x2c8>)
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <timer_mode+0x2b8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
		if(button_count[14] == 1) status = MODE1;
 8000ade:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <timer_mode+0x2c0>)
 8000ae0:	8b9b      	ldrh	r3, [r3, #28]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	f040 80dd 	bne.w	8000ca2 <timer_mode+0x3ea>
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <timer_mode+0x2d4>)
 8000aea:	2202      	movs	r2, #2
 8000aec:	601a      	str	r2, [r3, #0]
		break;
 8000aee:	e0d8      	b.n	8000ca2 <timer_mode+0x3ea>
	case timerS:
		displayTimer();
 8000af0:	f7ff fea6 	bl	8000840 <displayTimer>
		if(count_led_flash < 5){
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <timer_mode+0x2b8>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d80e      	bhi.n	8000b1a <timer_mode+0x262>
			lcd_ShowIntNum(70, 100, timer_sec, 2, BLACK, BLACK, 24);
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <timer_mode+0x2e0>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	2318      	movs	r3, #24
 8000b04:	9302      	str	r3, [sp, #8]
 8000b06:	2300      	movs	r3, #0
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2302      	movs	r3, #2
 8000b10:	2164      	movs	r1, #100	; 0x64
 8000b12:	2046      	movs	r0, #70	; 0x46
 8000b14:	f001 f8ea 	bl	8001cec <lcd_ShowIntNum>
 8000b18:	e00e      	b.n	8000b38 <timer_mode+0x280>
		} else lcd_ShowIntNum(70, 100, timer_sec, 2, MAGENTA, BLACK, 24);
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <timer_mode+0x2e0>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	2318      	movs	r3, #24
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	2300      	movs	r3, #0
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2302      	movs	r3, #2
 8000b30:	2164      	movs	r1, #100	; 0x64
 8000b32:	2046      	movs	r0, #70	; 0x46
 8000b34:	f001 f8da 	bl	8001cec <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <timer_mode+0x2c0>)
 8000b3a:	88db      	ldrh	r3, [r3, #6]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d14d      	bne.n	8000bdc <timer_mode+0x324>
			timer_sec = (timer_sec % 60) + 1; //btn3 = ↑
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <timer_mode+0x2e0>)
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <timer_mode+0x2dc>)
 8000b46:	fba3 1302 	umull	r1, r3, r3, r2
 8000b4a:	0959      	lsrs	r1, r3, #5
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	011b      	lsls	r3, r3, #4
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <timer_mode+0x2e0>)
 8000b5e:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_SEC, timer_sec);
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <timer_mode+0x2e0>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff fd66 	bl	8000638 <ds3231_Write>
		}
		while(flag == 1) {
 8000b6c:	e036      	b.n	8000bdc <timer_mode+0x324>
 8000b6e:	bf00      	nop
 8000b70:	2000002a 	.word	0x2000002a
 8000b74:	66666667 	.word	0x66666667
 8000b78:	2000004c 	.word	0x2000004c
 8000b7c:	2000002b 	.word	0x2000002b
 8000b80:	2000003c 	.word	0x2000003c
 8000b84:	2000002c 	.word	0x2000002c
 8000b88:	aaaaaaab 	.word	0xaaaaaaab
 8000b8c:	20000034 	.word	0x20000034
 8000b90:	2000002d 	.word	0x2000002d
 8000b94:	88888889 	.word	0x88888889
 8000b98:	2000002e 	.word	0x2000002e
			count_led_flash = 9;
 8000b9c:	4b45      	ldr	r3, [pc, #276]	; (8000cb4 <timer_mode+0x3fc>)
 8000b9e:	2209      	movs	r2, #9
 8000ba0:	701a      	strb	r2, [r3, #0]
			if(button_count[3]%4 == 0){
 8000ba2:	4b45      	ldr	r3, [pc, #276]	; (8000cb8 <timer_mode+0x400>)
 8000ba4:	88db      	ldrh	r3, [r3, #6]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d115      	bne.n	8000bdc <timer_mode+0x324>
				timer_sec = (timer_sec % 60) + 1;
 8000bb0:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <timer_mode+0x404>)
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	4b42      	ldr	r3, [pc, #264]	; (8000cc0 <timer_mode+0x408>)
 8000bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bba:	0959      	lsrs	r1, r3, #5
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b3b      	ldr	r3, [pc, #236]	; (8000cbc <timer_mode+0x404>)
 8000bce:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_SEC, timer_sec);
 8000bd0:	4b3a      	ldr	r3, [pc, #232]	; (8000cbc <timer_mode+0x404>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fd2e 	bl	8000638 <ds3231_Write>
		while(flag == 1) {
 8000bdc:	4b39      	ldr	r3, [pc, #228]	; (8000cc4 <timer_mode+0x40c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d0db      	beq.n	8000b9c <timer_mode+0x2e4>
			}
		}
		if(button_count[0] == 1) {TIMER = timerH; count_led_flash = 0;}
 8000be4:	4b34      	ldr	r3, [pc, #208]	; (8000cb8 <timer_mode+0x400>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d105      	bne.n	8000bf8 <timer_mode+0x340>
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <timer_mode+0x410>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <timer_mode+0x3fc>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
		if(button_count[14] == 1) status = MODE1;
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <timer_mode+0x400>)
 8000bfa:	8b9b      	ldrh	r3, [r3, #28]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d152      	bne.n	8000ca6 <timer_mode+0x3ee>
 8000c00:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <timer_mode+0x414>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	601a      	str	r2, [r3, #0]
		break;
 8000c06:	e04e      	b.n	8000ca6 <timer_mode+0x3ee>
	case timerC:
		displayTimer();
 8000c08:	f7ff fe1a 	bl	8000840 <displayTimer>
		if(count_led_flash < 5){
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <timer_mode+0x3fc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d80e      	bhi.n	8000c32 <timer_mode+0x37a>
			lcd_ShowIntNum(70, 100, timer_check, 2, BLACK, BLACK, 24);
 8000c14:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <timer_mode+0x418>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	2318      	movs	r3, #24
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2302      	movs	r3, #2
 8000c28:	2164      	movs	r1, #100	; 0x64
 8000c2a:	2046      	movs	r0, #70	; 0x46
 8000c2c:	f001 f85e 	bl	8001cec <lcd_ShowIntNum>
 8000c30:	e00e      	b.n	8000c50 <timer_mode+0x398>
		} else lcd_ShowIntNum(70, 100, timer_check, 2, MAGENTA, BLACK, 24);
 8000c32:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <timer_mode+0x418>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	2318      	movs	r3, #24
 8000c3a:	9302      	str	r3, [sp, #8]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	9301      	str	r3, [sp, #4]
 8000c40:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2302      	movs	r3, #2
 8000c48:	2164      	movs	r1, #100	; 0x64
 8000c4a:	2046      	movs	r0, #70	; 0x46
 8000c4c:	f001 f84e 	bl	8001cec <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <timer_mode+0x400>)
 8000c52:	88db      	ldrh	r3, [r3, #6]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d10e      	bne.n	8000c76 <timer_mode+0x3be>
			timer_check = (timer_check % 2) + 1;//btn3 = ↑
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <timer_mode+0x418>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <timer_mode+0x418>)
 8000c68:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_DAY, timer_check);
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <timer_mode+0x418>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	2003      	movs	r0, #3
 8000c72:	f7ff fce1 	bl	8000638 <ds3231_Write>
		}
		if(button_count[0] == 1) {TIMER = timerH; count_led_flash = 0;}
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <timer_mode+0x400>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d105      	bne.n	8000c8a <timer_mode+0x3d2>
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <timer_mode+0x410>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <timer_mode+0x3fc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
		if(button_count[14] == 1) status = MODE1;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <timer_mode+0x400>)
 8000c8c:	8b9b      	ldrh	r3, [r3, #28]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d10b      	bne.n	8000caa <timer_mode+0x3f2>
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <timer_mode+0x414>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	601a      	str	r2, [r3, #0]
		break;
 8000c98:	e007      	b.n	8000caa <timer_mode+0x3f2>
	default:
		break;
 8000c9a:	bf00      	nop
 8000c9c:	e006      	b.n	8000cac <timer_mode+0x3f4>
		break;
 8000c9e:	bf00      	nop
 8000ca0:	e004      	b.n	8000cac <timer_mode+0x3f4>
		break;
 8000ca2:	bf00      	nop
 8000ca4:	e002      	b.n	8000cac <timer_mode+0x3f4>
		break;
 8000ca6:	bf00      	nop
 8000ca8:	e000      	b.n	8000cac <timer_mode+0x3f4>
		break;
 8000caa:	bf00      	nop
	}
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000002a 	.word	0x2000002a
 8000cb8:	2000004c 	.word	0x2000004c
 8000cbc:	2000002e 	.word	0x2000002e
 8000cc0:	88888889 	.word	0x88888889
 8000cc4:	2000002b 	.word	0x2000002b
 8000cc8:	2000003c 	.word	0x2000003c
 8000ccc:	20000034 	.word	0x20000034
 8000cd0:	2000002f 	.word	0x2000002f

08000cd4 <alarm>:

void alarm(){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af02      	add	r7, sp, #8
	while(timer_check){
 8000cda:	e01d      	b.n	8000d18 <alarm+0x44>
		if(ds3231_hours == timer_hours && ds3231_min == timer_min && ds3231_sec == timer_sec){
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <alarm+0x64>)
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <alarm+0x68>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d117      	bne.n	8000d18 <alarm+0x44>
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <alarm+0x6c>)
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <alarm+0x70>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d111      	bne.n	8000d18 <alarm+0x44>
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <alarm+0x74>)
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <alarm+0x78>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d10b      	bne.n	8000d18 <alarm+0x44>
			lcd_DrawCircle(120, 120, RED, 10, 1);
 8000d00:	2301      	movs	r3, #1
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	230a      	movs	r3, #10
 8000d06:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000d0a:	2178      	movs	r1, #120	; 0x78
 8000d0c:	2078      	movs	r0, #120	; 0x78
 8000d0e:	f001 fa7a 	bl	8002206 <lcd_DrawCircle>
			timer_check = 0;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <alarm+0x7c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
	while(timer_check){
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <alarm+0x7c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1dd      	bne.n	8000cdc <alarm+0x8>
		}

	}
	lcd_DrawCircle(120, 120, BLACK, 10, 1);
 8000d20:	2301      	movs	r3, #1
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	230a      	movs	r3, #10
 8000d26:	2200      	movs	r2, #0
 8000d28:	2178      	movs	r1, #120	; 0x78
 8000d2a:	2078      	movs	r0, #120	; 0x78
 8000d2c:	f001 fa6b 	bl	8002206 <lcd_DrawCircle>
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000071 	.word	0x20000071
 8000d3c:	2000002c 	.word	0x2000002c
 8000d40:	2000006e 	.word	0x2000006e
 8000d44:	2000002d 	.word	0x2000002d
 8000d48:	2000006c 	.word	0x2000006c
 8000d4c:	2000002e 	.word	0x2000002e
 8000d50:	2000002f 	.word	0x2000002f

08000d54 <adjustingTime_mode>:

void adjustingTime_mode(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af04      	add	r7, sp, #16
	count_led_flash = (count_led_flash + 1)%10;
 8000d5a:	4bac      	ldr	r3, [pc, #688]	; (800100c <adjustingTime_mode+0x2b8>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	4bab      	ldr	r3, [pc, #684]	; (8001010 <adjustingTime_mode+0x2bc>)
 8000d62:	fb83 1302 	smull	r1, r3, r3, r2
 8000d66:	1099      	asrs	r1, r3, #2
 8000d68:	17d3      	asrs	r3, r2, #31
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	1ad1      	subs	r1, r2, r3
 8000d76:	b2ca      	uxtb	r2, r1
 8000d78:	4ba4      	ldr	r3, [pc, #656]	; (800100c <adjustingTime_mode+0x2b8>)
 8000d7a:	701a      	strb	r2, [r3, #0]
	if(button_count[3] == 40) flag = 1;
 8000d7c:	4ba5      	ldr	r3, [pc, #660]	; (8001014 <adjustingTime_mode+0x2c0>)
 8000d7e:	88db      	ldrh	r3, [r3, #6]
 8000d80:	2b28      	cmp	r3, #40	; 0x28
 8000d82:	d103      	bne.n	8000d8c <adjustingTime_mode+0x38>
 8000d84:	4ba4      	ldr	r3, [pc, #656]	; (8001018 <adjustingTime_mode+0x2c4>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e002      	b.n	8000d92 <adjustingTime_mode+0x3e>
	else flag = 0;
 8000d8c:	4ba2      	ldr	r3, [pc, #648]	; (8001018 <adjustingTime_mode+0x2c4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
	switch(TMP){
 8000d92:	4ba2      	ldr	r3, [pc, #648]	; (800101c <adjustingTime_mode+0x2c8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	2b05      	cmp	r3, #5
 8000d9a:	f200 8349 	bhi.w	8001430 <adjustingTime_mode+0x6dc>
 8000d9e:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <adjustingTime_mode+0x50>)
 8000da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da4:	08000dbd 	.word	0x08000dbd
 8000da8:	08000ea9 	.word	0x08000ea9
 8000dac:	08000f8f 	.word	0x08000f8f
 8000db0:	080010a1 	.word	0x080010a1
 8000db4:	08001229 	.word	0x08001229
 8000db8:	08001341 	.word	0x08001341
	case hour:
		displayTime();
 8000dbc:	f7ff fcc2 	bl	8000744 <displayTime>
		if(count_led_flash < 5){
 8000dc0:	4b92      	ldr	r3, [pc, #584]	; (800100c <adjustingTime_mode+0x2b8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d80e      	bhi.n	8000de6 <adjustingTime_mode+0x92>
			lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8000dc8:	4b95      	ldr	r3, [pc, #596]	; (8001020 <adjustingTime_mode+0x2cc>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	2318      	movs	r3, #24
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2302      	movs	r3, #2
 8000ddc:	2164      	movs	r1, #100	; 0x64
 8000dde:	2046      	movs	r0, #70	; 0x46
 8000de0:	f000 ff84 	bl	8001cec <lcd_ShowIntNum>
 8000de4:	e00e      	b.n	8000e04 <adjustingTime_mode+0xb0>
		} else lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8000de6:	4b8e      	ldr	r3, [pc, #568]	; (8001020 <adjustingTime_mode+0x2cc>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	2318      	movs	r3, #24
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2300      	movs	r3, #0
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	2164      	movs	r1, #100	; 0x64
 8000dfe:	2046      	movs	r0, #70	; 0x46
 8000e00:	f000 ff74 	bl	8001cec <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000e04:	4b83      	ldr	r3, [pc, #524]	; (8001014 <adjustingTime_mode+0x2c0>)
 8000e06:	88db      	ldrh	r3, [r3, #6]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d136      	bne.n	8000e7a <adjustingTime_mode+0x126>
			ds3231_hours = (ds3231_hours % 24) + 1; //btn3 = ↑
 8000e0c:	4b84      	ldr	r3, [pc, #528]	; (8001020 <adjustingTime_mode+0x2cc>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	4b84      	ldr	r3, [pc, #528]	; (8001024 <adjustingTime_mode+0x2d0>)
 8000e12:	fba3 1302 	umull	r1, r3, r3, r2
 8000e16:	0919      	lsrs	r1, r3, #4
 8000e18:	460b      	mov	r3, r1
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	440b      	add	r3, r1
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b7d      	ldr	r3, [pc, #500]	; (8001020 <adjustingTime_mode+0x2cc>)
 8000e2a:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8000e2c:	4b7c      	ldr	r3, [pc, #496]	; (8001020 <adjustingTime_mode+0x2cc>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	2002      	movs	r0, #2
 8000e34:	f7ff fc00 	bl	8000638 <ds3231_Write>
		}
		while (flag == 1) {
 8000e38:	e01f      	b.n	8000e7a <adjustingTime_mode+0x126>
			count_led_flash = 9;
 8000e3a:	4b74      	ldr	r3, [pc, #464]	; (800100c <adjustingTime_mode+0x2b8>)
 8000e3c:	2209      	movs	r2, #9
 8000e3e:	701a      	strb	r2, [r3, #0]
			if(button_count[3]%4 == 0){
 8000e40:	4b74      	ldr	r3, [pc, #464]	; (8001014 <adjustingTime_mode+0x2c0>)
 8000e42:	88db      	ldrh	r3, [r3, #6]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d115      	bne.n	8000e7a <adjustingTime_mode+0x126>
				ds3231_hours = (ds3231_hours % 24) + 1; //btn3 = ↑
 8000e4e:	4b74      	ldr	r3, [pc, #464]	; (8001020 <adjustingTime_mode+0x2cc>)
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	4b74      	ldr	r3, [pc, #464]	; (8001024 <adjustingTime_mode+0x2d0>)
 8000e54:	fba3 1302 	umull	r1, r3, r3, r2
 8000e58:	0919      	lsrs	r1, r3, #4
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	440b      	add	r3, r1
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b6d      	ldr	r3, [pc, #436]	; (8001020 <adjustingTime_mode+0x2cc>)
 8000e6c:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8000e6e:	4b6c      	ldr	r3, [pc, #432]	; (8001020 <adjustingTime_mode+0x2cc>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	2002      	movs	r0, #2
 8000e76:	f7ff fbdf 	bl	8000638 <ds3231_Write>
		while (flag == 1) {
 8000e7a:	4b67      	ldr	r3, [pc, #412]	; (8001018 <adjustingTime_mode+0x2c4>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d0db      	beq.n	8000e3a <adjustingTime_mode+0xe6>
			}
		}
		if(button_count[0] == 1) {TMP = min; count_led_flash = 0;}
 8000e82:	4b64      	ldr	r3, [pc, #400]	; (8001014 <adjustingTime_mode+0x2c0>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d105      	bne.n	8000e96 <adjustingTime_mode+0x142>
 8000e8a:	4b64      	ldr	r3, [pc, #400]	; (800101c <adjustingTime_mode+0x2c8>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	4b5e      	ldr	r3, [pc, #376]	; (800100c <adjustingTime_mode+0x2b8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
		if(button_count[14] == 1) status = MODE3;
 8000e96:	4b5f      	ldr	r3, [pc, #380]	; (8001014 <adjustingTime_mode+0x2c0>)
 8000e98:	8b9b      	ldrh	r3, [r3, #28]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	f040 82ca 	bne.w	8001434 <adjustingTime_mode+0x6e0>
 8000ea0:	4b61      	ldr	r3, [pc, #388]	; (8001028 <adjustingTime_mode+0x2d4>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	601a      	str	r2, [r3, #0]
		break;
 8000ea6:	e2c5      	b.n	8001434 <adjustingTime_mode+0x6e0>
	case min:
		displayTime();
 8000ea8:	f7ff fc4c 	bl	8000744 <displayTime>
		if(count_led_flash < 5){
 8000eac:	4b57      	ldr	r3, [pc, #348]	; (800100c <adjustingTime_mode+0x2b8>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d80f      	bhi.n	8000ed4 <adjustingTime_mode+0x180>
			lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8000eb4:	4b5d      	ldr	r3, [pc, #372]	; (800102c <adjustingTime_mode+0x2d8>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	2318      	movs	r3, #24
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2302      	movs	r3, #2
 8000eca:	2164      	movs	r1, #100	; 0x64
 8000ecc:	206e      	movs	r0, #110	; 0x6e
 8000ece:	f000 ff0d 	bl	8001cec <lcd_ShowIntNum>
 8000ed2:	e00d      	b.n	8000ef0 <adjustingTime_mode+0x19c>
		} else lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8000ed4:	4b55      	ldr	r3, [pc, #340]	; (800102c <adjustingTime_mode+0x2d8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	2318      	movs	r3, #24
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	2164      	movs	r1, #100	; 0x64
 8000eea:	206e      	movs	r0, #110	; 0x6e
 8000eec:	f000 fefe 	bl	8001cec <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000ef0:	4b48      	ldr	r3, [pc, #288]	; (8001014 <adjustingTime_mode+0x2c0>)
 8000ef2:	88db      	ldrh	r3, [r3, #6]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d136      	bne.n	8000f66 <adjustingTime_mode+0x212>
			ds3231_min = (ds3231_min % 60) + 1; //btn3 = ↑
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	; (800102c <adjustingTime_mode+0x2d8>)
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	4b4c      	ldr	r3, [pc, #304]	; (8001030 <adjustingTime_mode+0x2dc>)
 8000efe:	fba3 1302 	umull	r1, r3, r3, r2
 8000f02:	0959      	lsrs	r1, r3, #5
 8000f04:	460b      	mov	r3, r1
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	3301      	adds	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b45      	ldr	r3, [pc, #276]	; (800102c <adjustingTime_mode+0x2d8>)
 8000f16:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_HOUR, ds3231_min);
 8000f18:	4b44      	ldr	r3, [pc, #272]	; (800102c <adjustingTime_mode+0x2d8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f7ff fb8a 	bl	8000638 <ds3231_Write>
		}
		while(flag == 1) {
 8000f24:	e01f      	b.n	8000f66 <adjustingTime_mode+0x212>
			count_led_flash = 9;
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <adjustingTime_mode+0x2b8>)
 8000f28:	2209      	movs	r2, #9
 8000f2a:	701a      	strb	r2, [r3, #0]
			if(button_count[3]%4 == 0){
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <adjustingTime_mode+0x2c0>)
 8000f2e:	88db      	ldrh	r3, [r3, #6]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d115      	bne.n	8000f66 <adjustingTime_mode+0x212>
				ds3231_min = (ds3231_min % 60) + 1; //btn3 = ↑
 8000f3a:	4b3c      	ldr	r3, [pc, #240]	; (800102c <adjustingTime_mode+0x2d8>)
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <adjustingTime_mode+0x2dc>)
 8000f40:	fba3 1302 	umull	r1, r3, r3, r2
 8000f44:	0959      	lsrs	r1, r3, #5
 8000f46:	460b      	mov	r3, r1
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	1a5b      	subs	r3, r3, r1
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	3301      	adds	r3, #1
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b35      	ldr	r3, [pc, #212]	; (800102c <adjustingTime_mode+0x2d8>)
 8000f58:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_HOUR, ds3231_min);
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <adjustingTime_mode+0x2d8>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	2002      	movs	r0, #2
 8000f62:	f7ff fb69 	bl	8000638 <ds3231_Write>
		while(flag == 1) {
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <adjustingTime_mode+0x2c4>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d0db      	beq.n	8000f26 <adjustingTime_mode+0x1d2>
			}
		}
		if(button_count[0] == 1) TMP = sec;
 8000f6e:	4b29      	ldr	r3, [pc, #164]	; (8001014 <adjustingTime_mode+0x2c0>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <adjustingTime_mode+0x228>
 8000f76:	4b29      	ldr	r3, [pc, #164]	; (800101c <adjustingTime_mode+0x2c8>)
 8000f78:	2203      	movs	r2, #3
 8000f7a:	601a      	str	r2, [r3, #0]
		if(button_count[14] == 1) status = MODE3;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <adjustingTime_mode+0x2c0>)
 8000f7e:	8b9b      	ldrh	r3, [r3, #28]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	f040 8259 	bne.w	8001438 <adjustingTime_mode+0x6e4>
 8000f86:	4b28      	ldr	r3, [pc, #160]	; (8001028 <adjustingTime_mode+0x2d4>)
 8000f88:	2204      	movs	r2, #4
 8000f8a:	601a      	str	r2, [r3, #0]
		break;
 8000f8c:	e254      	b.n	8001438 <adjustingTime_mode+0x6e4>
	case sec:
		displayTime();
 8000f8e:	f7ff fbd9 	bl	8000744 <displayTime>
		if(count_led_flash < 5){
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <adjustingTime_mode+0x2b8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d80f      	bhi.n	8000fba <adjustingTime_mode+0x266>
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <adjustingTime_mode+0x2e0>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	2318      	movs	r3, #24
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2302      	movs	r3, #2
 8000fb0:	2164      	movs	r1, #100	; 0x64
 8000fb2:	2096      	movs	r0, #150	; 0x96
 8000fb4:	f000 fe9a 	bl	8001cec <lcd_ShowIntNum>
 8000fb8:	e00d      	b.n	8000fd6 <adjustingTime_mode+0x282>
		} else lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <adjustingTime_mode+0x2e0>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	2318      	movs	r3, #24
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2302      	movs	r3, #2
 8000fce:	2164      	movs	r1, #100	; 0x64
 8000fd0:	2096      	movs	r0, #150	; 0x96
 8000fd2:	f000 fe8b 	bl	8001cec <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <adjustingTime_mode+0x2c0>)
 8000fd8:	88db      	ldrh	r3, [r3, #6]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d14c      	bne.n	8001078 <adjustingTime_mode+0x324>
			ds3231_sec = (ds3231_sec % 60) + 1; //btn3 = ↑
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <adjustingTime_mode+0x2e0>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <adjustingTime_mode+0x2dc>)
 8000fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe8:	0959      	lsrs	r1, r3, #5
 8000fea:	460b      	mov	r3, r1
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	1a5b      	subs	r3, r3, r1
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <adjustingTime_mode+0x2e0>)
 8000ffc:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_HOUR, ds3231_sec);
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <adjustingTime_mode+0x2e0>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	2002      	movs	r0, #2
 8001006:	f7ff fb17 	bl	8000638 <ds3231_Write>
		}
		while(flag == 1) {
 800100a:	e035      	b.n	8001078 <adjustingTime_mode+0x324>
 800100c:	2000002a 	.word	0x2000002a
 8001010:	66666667 	.word	0x66666667
 8001014:	2000004c 	.word	0x2000004c
 8001018:	2000002b 	.word	0x2000002b
 800101c:	20000038 	.word	0x20000038
 8001020:	20000071 	.word	0x20000071
 8001024:	aaaaaaab 	.word	0xaaaaaaab
 8001028:	20000034 	.word	0x20000034
 800102c:	2000006e 	.word	0x2000006e
 8001030:	88888889 	.word	0x88888889
 8001034:	2000006c 	.word	0x2000006c
			count_led_flash = 9;
 8001038:	4b9b      	ldr	r3, [pc, #620]	; (80012a8 <adjustingTime_mode+0x554>)
 800103a:	2209      	movs	r2, #9
 800103c:	701a      	strb	r2, [r3, #0]
			if(button_count[3]%4 == 0){
 800103e:	4b9b      	ldr	r3, [pc, #620]	; (80012ac <adjustingTime_mode+0x558>)
 8001040:	88db      	ldrh	r3, [r3, #6]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	b29b      	uxth	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d115      	bne.n	8001078 <adjustingTime_mode+0x324>
				ds3231_sec = (ds3231_sec % 60) + 1; //btn3 = ↑
 800104c:	4b98      	ldr	r3, [pc, #608]	; (80012b0 <adjustingTime_mode+0x55c>)
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b98      	ldr	r3, [pc, #608]	; (80012b4 <adjustingTime_mode+0x560>)
 8001052:	fba3 1302 	umull	r1, r3, r3, r2
 8001056:	0959      	lsrs	r1, r3, #5
 8001058:	460b      	mov	r3, r1
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	1a5b      	subs	r3, r3, r1
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3301      	adds	r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b91      	ldr	r3, [pc, #580]	; (80012b0 <adjustingTime_mode+0x55c>)
 800106a:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_HOUR, ds3231_sec);
 800106c:	4b90      	ldr	r3, [pc, #576]	; (80012b0 <adjustingTime_mode+0x55c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	2002      	movs	r0, #2
 8001074:	f7ff fae0 	bl	8000638 <ds3231_Write>
		while(flag == 1) {
 8001078:	4b8f      	ldr	r3, [pc, #572]	; (80012b8 <adjustingTime_mode+0x564>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d0db      	beq.n	8001038 <adjustingTime_mode+0x2e4>
			}
		}
		if(button_count[0] == 1) TMP = day;
 8001080:	4b8a      	ldr	r3, [pc, #552]	; (80012ac <adjustingTime_mode+0x558>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d102      	bne.n	800108e <adjustingTime_mode+0x33a>
 8001088:	4b8c      	ldr	r3, [pc, #560]	; (80012bc <adjustingTime_mode+0x568>)
 800108a:	2204      	movs	r2, #4
 800108c:	601a      	str	r2, [r3, #0]
		if(button_count[14] == 1) status = MODE3;
 800108e:	4b87      	ldr	r3, [pc, #540]	; (80012ac <adjustingTime_mode+0x558>)
 8001090:	8b9b      	ldrh	r3, [r3, #28]
 8001092:	2b01      	cmp	r3, #1
 8001094:	f040 81d2 	bne.w	800143c <adjustingTime_mode+0x6e8>
 8001098:	4b89      	ldr	r3, [pc, #548]	; (80012c0 <adjustingTime_mode+0x56c>)
 800109a:	2204      	movs	r2, #4
 800109c:	601a      	str	r2, [r3, #0]
		break;
 800109e:	e1cd      	b.n	800143c <adjustingTime_mode+0x6e8>
	case day:
		displayTime();
 80010a0:	f7ff fb50 	bl	8000744 <displayTime>
		if(count_led_flash < 5){
 80010a4:	4b80      	ldr	r3, [pc, #512]	; (80012a8 <adjustingTime_mode+0x554>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d81e      	bhi.n	80010ea <adjustingTime_mode+0x396>
			lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80010ac:	4b85      	ldr	r3, [pc, #532]	; (80012c4 <adjustingTime_mode+0x570>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	2318      	movs	r3, #24
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	2300      	movs	r3, #0
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2302      	movs	r3, #2
 80010c2:	2182      	movs	r1, #130	; 0x82
 80010c4:	2014      	movs	r0, #20
 80010c6:	f000 fe11 	bl	8001cec <lcd_ShowIntNum>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80010ca:	4b7f      	ldr	r3, [pc, #508]	; (80012c8 <adjustingTime_mode+0x574>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	2318      	movs	r3, #24
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2300      	movs	r3, #0
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2302      	movs	r3, #2
 80010e0:	2182      	movs	r1, #130	; 0x82
 80010e2:	2046      	movs	r0, #70	; 0x46
 80010e4:	f000 fe02 	bl	8001cec <lcd_ShowIntNum>
 80010e8:	e01b      	b.n	8001122 <adjustingTime_mode+0x3ce>
		} else {
			lcd_ShowIntNum(20, 130, ds3231_day, 2, BLACK, BLACK, 24);
 80010ea:	4b76      	ldr	r3, [pc, #472]	; (80012c4 <adjustingTime_mode+0x570>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	2318      	movs	r3, #24
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2300      	movs	r3, #0
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	2300      	movs	r3, #0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	2182      	movs	r1, #130	; 0x82
 8001100:	2014      	movs	r0, #20
 8001102:	f000 fdf3 	bl	8001cec <lcd_ShowIntNum>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 8001106:	4b70      	ldr	r3, [pc, #448]	; (80012c8 <adjustingTime_mode+0x574>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b29a      	uxth	r2, r3
 800110c:	2318      	movs	r3, #24
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2300      	movs	r3, #0
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	2300      	movs	r3, #0
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2302      	movs	r3, #2
 800111a:	2182      	movs	r1, #130	; 0x82
 800111c:	2046      	movs	r0, #70	; 0x46
 800111e:	f000 fde5 	bl	8001cec <lcd_ShowIntNum>
		}
		if(button_count[3] == 1) {
 8001122:	4b62      	ldr	r3, [pc, #392]	; (80012ac <adjustingTime_mode+0x558>)
 8001124:	88db      	ldrh	r3, [r3, #6]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d16a      	bne.n	8001200 <adjustingTime_mode+0x4ac>
			ds3231_day = (ds3231_day % 7) + 1;//btn3 = ↑ //display: 6, ds32_day = 4
 800112a:	4b66      	ldr	r3, [pc, #408]	; (80012c4 <adjustingTime_mode+0x570>)
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <adjustingTime_mode+0x578>)
 8001130:	fba3 1302 	umull	r1, r3, r3, r2
 8001134:	1ad1      	subs	r1, r2, r3
 8001136:	0849      	lsrs	r1, r1, #1
 8001138:	440b      	add	r3, r1
 800113a:	0899      	lsrs	r1, r3, #2
 800113c:	460b      	mov	r3, r1
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	1a5b      	subs	r3, r3, r1
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b5e      	ldr	r3, [pc, #376]	; (80012c4 <adjustingTime_mode+0x570>)
 800114c:	701a      	strb	r2, [r3, #0]
			ds3231_date = (ds3231_day % 30) + 1;
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <adjustingTime_mode+0x570>)
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <adjustingTime_mode+0x560>)
 8001154:	fba3 1302 	umull	r1, r3, r3, r2
 8001158:	0919      	lsrs	r1, r3, #4
 800115a:	460b      	mov	r3, r1
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	1a5b      	subs	r3, r3, r1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	3301      	adds	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <adjustingTime_mode+0x574>)
 800116c:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_DAY, ds3231_day + 2);
 800116e:	4b55      	ldr	r3, [pc, #340]	; (80012c4 <adjustingTime_mode+0x570>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3302      	adds	r3, #2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	2003      	movs	r0, #3
 800117a:	f7ff fa5d 	bl	8000638 <ds3231_Write>
			ds3231_Write(ADDRESS_DATE, ds3231_date);
 800117e:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <adjustingTime_mode+0x574>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	2004      	movs	r0, #4
 8001186:	f7ff fa57 	bl	8000638 <ds3231_Write>
		}
		while(flag == 1) {
 800118a:	e039      	b.n	8001200 <adjustingTime_mode+0x4ac>
			count_led_flash = 9;
 800118c:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <adjustingTime_mode+0x554>)
 800118e:	2209      	movs	r2, #9
 8001190:	701a      	strb	r2, [r3, #0]
			if(button_count[3]%4 == 0){
 8001192:	4b46      	ldr	r3, [pc, #280]	; (80012ac <adjustingTime_mode+0x558>)
 8001194:	88db      	ldrh	r3, [r3, #6]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	b29b      	uxth	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d12f      	bne.n	8001200 <adjustingTime_mode+0x4ac>
				ds3231_day = (ds3231_day % 7) + 1;//btn3 = ↑ //display: 6, ds32_day = 4
 80011a0:	4b48      	ldr	r3, [pc, #288]	; (80012c4 <adjustingTime_mode+0x570>)
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <adjustingTime_mode+0x578>)
 80011a6:	fba3 1302 	umull	r1, r3, r3, r2
 80011aa:	1ad1      	subs	r1, r2, r3
 80011ac:	0849      	lsrs	r1, r1, #1
 80011ae:	440b      	add	r3, r1
 80011b0:	0899      	lsrs	r1, r3, #2
 80011b2:	460b      	mov	r3, r1
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	1a5b      	subs	r3, r3, r1
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	3301      	adds	r3, #1
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <adjustingTime_mode+0x570>)
 80011c2:	701a      	strb	r2, [r3, #0]
				ds3231_date = (ds3231_day % 30) + 1;
 80011c4:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <adjustingTime_mode+0x570>)
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <adjustingTime_mode+0x560>)
 80011ca:	fba3 1302 	umull	r1, r3, r3, r2
 80011ce:	0919      	lsrs	r1, r3, #4
 80011d0:	460b      	mov	r3, r1
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	1a5b      	subs	r3, r3, r1
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	3301      	adds	r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <adjustingTime_mode+0x574>)
 80011e2:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_DAY, ds3231_day + 2);
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <adjustingTime_mode+0x570>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3302      	adds	r3, #2
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	2003      	movs	r0, #3
 80011f0:	f7ff fa22 	bl	8000638 <ds3231_Write>
				ds3231_Write(ADDRESS_DATE, ds3231_date);
 80011f4:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <adjustingTime_mode+0x574>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	2004      	movs	r0, #4
 80011fc:	f7ff fa1c 	bl	8000638 <ds3231_Write>
		while(flag == 1) {
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <adjustingTime_mode+0x564>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d0c1      	beq.n	800118c <adjustingTime_mode+0x438>
			}
		}
		if(button_count[0] == 1) TMP = month;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <adjustingTime_mode+0x558>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d102      	bne.n	8001216 <adjustingTime_mode+0x4c2>
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <adjustingTime_mode+0x568>)
 8001212:	2205      	movs	r2, #5
 8001214:	601a      	str	r2, [r3, #0]
		if(button_count[14] == 1) status = MODE3;
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <adjustingTime_mode+0x558>)
 8001218:	8b9b      	ldrh	r3, [r3, #28]
 800121a:	2b01      	cmp	r3, #1
 800121c:	f040 8110 	bne.w	8001440 <adjustingTime_mode+0x6ec>
 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <adjustingTime_mode+0x56c>)
 8001222:	2204      	movs	r2, #4
 8001224:	601a      	str	r2, [r3, #0]
		break;
 8001226:	e10b      	b.n	8001440 <adjustingTime_mode+0x6ec>
	case month:
		displayTime();
 8001228:	f7ff fa8c 	bl	8000744 <displayTime>
		if(count_led_flash < 5){
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <adjustingTime_mode+0x554>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d80f      	bhi.n	8001254 <adjustingTime_mode+0x500>
			lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <adjustingTime_mode+0x57c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b29a      	uxth	r2, r3
 800123a:	2318      	movs	r3, #24
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2300      	movs	r3, #0
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2302      	movs	r3, #2
 800124a:	2182      	movs	r1, #130	; 0x82
 800124c:	206e      	movs	r0, #110	; 0x6e
 800124e:	f000 fd4d 	bl	8001cec <lcd_ShowIntNum>
 8001252:	e00d      	b.n	8001270 <adjustingTime_mode+0x51c>
		} else lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <adjustingTime_mode+0x57c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b29a      	uxth	r2, r3
 800125a:	2318      	movs	r3, #24
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	2300      	movs	r3, #0
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	2300      	movs	r3, #0
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2302      	movs	r3, #2
 8001268:	2182      	movs	r1, #130	; 0x82
 800126a:	206e      	movs	r0, #110	; 0x6e
 800126c:	f000 fd3e 	bl	8001cec <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <adjustingTime_mode+0x558>)
 8001272:	88db      	ldrh	r3, [r3, #6]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d14f      	bne.n	8001318 <adjustingTime_mode+0x5c4>
			ds3231_month = (ds3231_month % 12) +  1; //btn3 = ↑
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <adjustingTime_mode+0x57c>)
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <adjustingTime_mode+0x580>)
 800127e:	fba3 1302 	umull	r1, r3, r3, r2
 8001282:	08d9      	lsrs	r1, r3, #3
 8001284:	460b      	mov	r3, r1
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	440b      	add	r3, r1
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	3301      	adds	r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <adjustingTime_mode+0x57c>)
 8001296:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <adjustingTime_mode+0x57c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	2005      	movs	r0, #5
 80012a0:	f7ff f9ca 	bl	8000638 <ds3231_Write>
		}
		while(flag == 1) {
 80012a4:	e038      	b.n	8001318 <adjustingTime_mode+0x5c4>
 80012a6:	bf00      	nop
 80012a8:	2000002a 	.word	0x2000002a
 80012ac:	2000004c 	.word	0x2000004c
 80012b0:	2000006c 	.word	0x2000006c
 80012b4:	88888889 	.word	0x88888889
 80012b8:	2000002b 	.word	0x2000002b
 80012bc:	20000038 	.word	0x20000038
 80012c0:	20000034 	.word	0x20000034
 80012c4:	20000070 	.word	0x20000070
 80012c8:	2000006f 	.word	0x2000006f
 80012cc:	24924925 	.word	0x24924925
 80012d0:	20000072 	.word	0x20000072
 80012d4:	aaaaaaab 	.word	0xaaaaaaab
			count_led_flash = 9;
 80012d8:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <adjustingTime_mode+0x6fc>)
 80012da:	2209      	movs	r2, #9
 80012dc:	701a      	strb	r2, [r3, #0]
			if(button_count[3]%4 == 0){
 80012de:	4b5d      	ldr	r3, [pc, #372]	; (8001454 <adjustingTime_mode+0x700>)
 80012e0:	88db      	ldrh	r3, [r3, #6]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d115      	bne.n	8001318 <adjustingTime_mode+0x5c4>
				ds3231_month = (ds3231_month % 12) +  1; //btn3 = ↑
 80012ec:	4b5a      	ldr	r3, [pc, #360]	; (8001458 <adjustingTime_mode+0x704>)
 80012ee:	781a      	ldrb	r2, [r3, #0]
 80012f0:	4b5a      	ldr	r3, [pc, #360]	; (800145c <adjustingTime_mode+0x708>)
 80012f2:	fba3 1302 	umull	r1, r3, r3, r2
 80012f6:	08d9      	lsrs	r1, r3, #3
 80012f8:	460b      	mov	r3, r1
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	440b      	add	r3, r1
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	3301      	adds	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <adjustingTime_mode+0x704>)
 800130a:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_MONTH, ds3231_month);
 800130c:	4b52      	ldr	r3, [pc, #328]	; (8001458 <adjustingTime_mode+0x704>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	2005      	movs	r0, #5
 8001314:	f7ff f990 	bl	8000638 <ds3231_Write>
		while(flag == 1) {
 8001318:	4b51      	ldr	r3, [pc, #324]	; (8001460 <adjustingTime_mode+0x70c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d0db      	beq.n	80012d8 <adjustingTime_mode+0x584>
			}
		}
		if(button_count[0] == 1) TMP = year;
 8001320:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <adjustingTime_mode+0x700>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d102      	bne.n	800132e <adjustingTime_mode+0x5da>
 8001328:	4b4e      	ldr	r3, [pc, #312]	; (8001464 <adjustingTime_mode+0x710>)
 800132a:	2206      	movs	r2, #6
 800132c:	601a      	str	r2, [r3, #0]
		if(button_count[14] == 1) status = MODE3;
 800132e:	4b49      	ldr	r3, [pc, #292]	; (8001454 <adjustingTime_mode+0x700>)
 8001330:	8b9b      	ldrh	r3, [r3, #28]
 8001332:	2b01      	cmp	r3, #1
 8001334:	f040 8086 	bne.w	8001444 <adjustingTime_mode+0x6f0>
 8001338:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <adjustingTime_mode+0x714>)
 800133a:	2204      	movs	r2, #4
 800133c:	601a      	str	r2, [r3, #0]
		break;
 800133e:	e081      	b.n	8001444 <adjustingTime_mode+0x6f0>
	case year:
		displayTime();
 8001340:	f7ff fa00 	bl	8000744 <displayTime>
		if(count_led_flash < 10 && flag == 0){
 8001344:	4b42      	ldr	r3, [pc, #264]	; (8001450 <adjustingTime_mode+0x6fc>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b09      	cmp	r3, #9
 800134a:	d813      	bhi.n	8001374 <adjustingTime_mode+0x620>
 800134c:	4b44      	ldr	r3, [pc, #272]	; (8001460 <adjustingTime_mode+0x70c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10f      	bne.n	8001374 <adjustingTime_mode+0x620>
			lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001354:	4b45      	ldr	r3, [pc, #276]	; (800146c <adjustingTime_mode+0x718>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b29a      	uxth	r2, r3
 800135a:	2318      	movs	r3, #24
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	2300      	movs	r3, #0
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2302      	movs	r3, #2
 800136a:	2182      	movs	r1, #130	; 0x82
 800136c:	2096      	movs	r0, #150	; 0x96
 800136e:	f000 fcbd 	bl	8001cec <lcd_ShowIntNum>
 8001372:	e00d      	b.n	8001390 <adjustingTime_mode+0x63c>
		} else lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <adjustingTime_mode+0x718>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b29a      	uxth	r2, r3
 800137a:	2318      	movs	r3, #24
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	2300      	movs	r3, #0
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	2300      	movs	r3, #0
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2302      	movs	r3, #2
 8001388:	2182      	movs	r1, #130	; 0x82
 800138a:	2096      	movs	r0, #150	; 0x96
 800138c:	f000 fcae 	bl	8001cec <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <adjustingTime_mode+0x700>)
 8001392:	88db      	ldrh	r3, [r3, #6]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d138      	bne.n	800140a <adjustingTime_mode+0x6b6>
			ds3231_year = (ds3231_year % 99) +  1; //btn3 = ↑
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <adjustingTime_mode+0x718>)
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <adjustingTime_mode+0x71c>)
 800139e:	fba3 1302 	umull	r1, r3, r3, r2
 80013a2:	0999      	lsrs	r1, r3, #6
 80013a4:	460b      	mov	r3, r1
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	440b      	add	r3, r1
 80013aa:	0159      	lsls	r1, r3, #5
 80013ac:	440b      	add	r3, r1
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <adjustingTime_mode+0x718>)
 80013b8:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_YEAR, ds3231_year);
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <adjustingTime_mode+0x718>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	2006      	movs	r0, #6
 80013c2:	f7ff f939 	bl	8000638 <ds3231_Write>
		}
		while(flag == 1) {
 80013c6:	e020      	b.n	800140a <adjustingTime_mode+0x6b6>
			count_led_flash = 9;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <adjustingTime_mode+0x6fc>)
 80013ca:	2209      	movs	r2, #9
 80013cc:	701a      	strb	r2, [r3, #0]
			if(button_count[3]%4 == 0){
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <adjustingTime_mode+0x700>)
 80013d0:	88db      	ldrh	r3, [r3, #6]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d116      	bne.n	800140a <adjustingTime_mode+0x6b6>
				ds3231_year = (ds3231_year % 99) +  1; //btn3 = ↑
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <adjustingTime_mode+0x718>)
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <adjustingTime_mode+0x71c>)
 80013e2:	fba3 1302 	umull	r1, r3, r3, r2
 80013e6:	0999      	lsrs	r1, r3, #6
 80013e8:	460b      	mov	r3, r1
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	440b      	add	r3, r1
 80013ee:	0159      	lsls	r1, r3, #5
 80013f0:	440b      	add	r3, r1
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <adjustingTime_mode+0x718>)
 80013fc:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_YEAR, ds3231_year);
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <adjustingTime_mode+0x718>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	2006      	movs	r0, #6
 8001406:	f7ff f917 	bl	8000638 <ds3231_Write>
		while(flag == 1) {
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <adjustingTime_mode+0x70c>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d0da      	beq.n	80013c8 <adjustingTime_mode+0x674>
			}
		}
		if(button_count[0] == 1) TMP = hour;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <adjustingTime_mode+0x700>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d102      	bne.n	8001420 <adjustingTime_mode+0x6cc>
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <adjustingTime_mode+0x710>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
		if(button_count[14] == 1) status = MODE3;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <adjustingTime_mode+0x700>)
 8001422:	8b9b      	ldrh	r3, [r3, #28]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d10f      	bne.n	8001448 <adjustingTime_mode+0x6f4>
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <adjustingTime_mode+0x714>)
 800142a:	2204      	movs	r2, #4
 800142c:	601a      	str	r2, [r3, #0]
		break;
 800142e:	e00b      	b.n	8001448 <adjustingTime_mode+0x6f4>
	default:
		break;
 8001430:	bf00      	nop
 8001432:	e00a      	b.n	800144a <adjustingTime_mode+0x6f6>
		break;
 8001434:	bf00      	nop
 8001436:	e008      	b.n	800144a <adjustingTime_mode+0x6f6>
		break;
 8001438:	bf00      	nop
 800143a:	e006      	b.n	800144a <adjustingTime_mode+0x6f6>
		break;
 800143c:	bf00      	nop
 800143e:	e004      	b.n	800144a <adjustingTime_mode+0x6f6>
		break;
 8001440:	bf00      	nop
 8001442:	e002      	b.n	800144a <adjustingTime_mode+0x6f6>
		break;
 8001444:	bf00      	nop
 8001446:	e000      	b.n	800144a <adjustingTime_mode+0x6f6>
		break;
 8001448:	bf00      	nop
	}
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000002a 	.word	0x2000002a
 8001454:	2000004c 	.word	0x2000004c
 8001458:	20000072 	.word	0x20000072
 800145c:	aaaaaaab 	.word	0xaaaaaaab
 8001460:	2000002b 	.word	0x2000002b
 8001464:	20000038 	.word	0x20000038
 8001468:	20000034 	.word	0x20000034
 800146c:	2000006d 	.word	0x2000006d
 8001470:	a57eb503 	.word	0xa57eb503

08001474 <fsm_run>:


void fsm_run(){
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	switch(status){
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <fsm_run+0x78>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	2b03      	cmp	r3, #3
 8001480:	d82e      	bhi.n	80014e0 <fsm_run+0x6c>
 8001482:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <fsm_run+0x14>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	08001499 	.word	0x08001499
 800148c:	0800149f 	.word	0x0800149f
 8001490:	080014bb 	.word	0x080014bb
 8001494:	080014cf 	.word	0x080014cf
	case INIT:
		status = MODE1;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <fsm_run+0x78>)
 800149a:	2202      	movs	r2, #2
 800149c:	601a      	str	r2, [r3, #0]
	case MODE1:
		ds3231_ReadTime();
 800149e:	f7ff f8ed 	bl	800067c <ds3231_ReadTime>
		displayTime();
 80014a2:	f7ff f94f 	bl	8000744 <displayTime>
		alarm();
 80014a6:	f7ff fc15 	bl	8000cd4 <alarm>
		if(button_count[14]  == 1) status = MODE2; //btn14 = B
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <fsm_run+0x7c>)
 80014ac:	8b9b      	ldrh	r3, [r3, #28]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d118      	bne.n	80014e4 <fsm_run+0x70>
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <fsm_run+0x78>)
 80014b4:	2203      	movs	r2, #3
 80014b6:	601a      	str	r2, [r3, #0]
		break;
 80014b8:	e014      	b.n	80014e4 <fsm_run+0x70>

	case MODE2:
		count_led_flash = 0;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <fsm_run+0x80>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
		adjustingTime_mode();
 80014c0:	f7ff fc48 	bl	8000d54 <adjustingTime_mode>
		setTimer3(2000);
 80014c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014c8:	f001 f824 	bl	8002514 <setTimer3>
//		ds3231_ReadTime();
		break;
 80014cc:	e00b      	b.n	80014e6 <fsm_run+0x72>


	case MODE3:
		timer_mode();
 80014ce:	f7ff f9f3 	bl	80008b8 <timer_mode>
		if(button_count[14] == 1) status = MODE1;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <fsm_run+0x7c>)
 80014d4:	8b9b      	ldrh	r3, [r3, #28]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d102      	bne.n	80014e0 <fsm_run+0x6c>
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <fsm_run+0x78>)
 80014dc:	2202      	movs	r2, #2
 80014de:	601a      	str	r2, [r3, #0]

	default:
		break;
 80014e0:	bf00      	nop
 80014e2:	e000      	b.n	80014e6 <fsm_run+0x72>
		break;
 80014e4:	bf00      	nop
	}
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000034 	.word	0x20000034
 80014f0:	2000004c 	.word	0x2000004c
 80014f4:	2000002a 	.word	0x2000002a

080014f8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001524:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <MX_FSMC_Init+0xec>)
 8001526:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800152a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800152c:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <MX_FSMC_Init+0xec>)
 800152e:	4a2e      	ldr	r2, [pc, #184]	; (80015e8 <MX_FSMC_Init+0xf0>)
 8001530:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <MX_FSMC_Init+0xec>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <MX_FSMC_Init+0xec>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800153e:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <MX_FSMC_Init+0xec>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <MX_FSMC_Init+0xec>)
 8001546:	2210      	movs	r2, #16
 8001548:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <MX_FSMC_Init+0xec>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <MX_FSMC_Init+0xec>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <MX_FSMC_Init+0xec>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <MX_FSMC_Init+0xec>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <MX_FSMC_Init+0xec>)
 8001564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <MX_FSMC_Init+0xec>)
 800156c:	2200      	movs	r2, #0
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_FSMC_Init+0xec>)
 8001572:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_FSMC_Init+0xec>)
 800157a:	2200      	movs	r2, #0
 800157c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_FSMC_Init+0xec>)
 8001580:	2200      	movs	r2, #0
 8001582:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_FSMC_Init+0xec>)
 8001586:	2200      	movs	r2, #0
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800158a:	230f      	movs	r3, #15
 800158c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800158e:	230f      	movs	r3, #15
 8001590:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001592:	233c      	movs	r3, #60	; 0x3c
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800159a:	2310      	movs	r3, #16
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800159e:	2311      	movs	r3, #17
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80015a6:	2308      	movs	r3, #8
 80015a8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80015aa:	230f      	movs	r3, #15
 80015ac:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80015ae:	2309      	movs	r3, #9
 80015b0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80015b6:	2310      	movs	r3, #16
 80015b8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80015ba:	2311      	movs	r3, #17
 80015bc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80015c2:	463a      	mov	r2, r7
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4806      	ldr	r0, [pc, #24]	; (80015e4 <MX_FSMC_Init+0xec>)
 80015cc:	f003 fee2 	bl	8005394 <HAL_SRAM_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80015d6:	f000 ff71 	bl	80024bc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80015da:	bf00      	nop
 80015dc:	3738      	adds	r7, #56	; 0x38
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000007c 	.word	0x2000007c
 80015e8:	a0000104 	.word	0xa0000104

080015ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_FSMC_MspInit+0x88>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d131      	bne.n	800166c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_FSMC_MspInit+0x88>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_FSMC_MspInit+0x8c>)
 8001614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001616:	4a18      	ldr	r2, [pc, #96]	; (8001678 <HAL_FSMC_MspInit+0x8c>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6393      	str	r3, [r2, #56]	; 0x38
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_FSMC_MspInit+0x8c>)
 8001620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800162a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800162e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800163c:	230c      	movs	r3, #12
 800163e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <HAL_FSMC_MspInit+0x90>)
 8001646:	f001 fb35 	bl	8002cb4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800164a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800164e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800165c:	230c      	movs	r3, #12
 800165e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	4619      	mov	r1, r3
 8001664:	4806      	ldr	r0, [pc, #24]	; (8001680 <HAL_FSMC_MspInit+0x94>)
 8001666:	f001 fb25 	bl	8002cb4 <HAL_GPIO_Init>
 800166a:	e000      	b.n	800166e <HAL_FSMC_MspInit+0x82>
    return;
 800166c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000030 	.word	0x20000030
 8001678:	40023800 	.word	0x40023800
 800167c:	40021000 	.word	0x40021000
 8001680:	40020c00 	.word	0x40020c00

08001684 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800168c:	f7ff ffae 	bl	80015ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	4b6f      	ldr	r3, [pc, #444]	; (8001870 <MX_GPIO_Init+0x1d8>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a6e      	ldr	r2, [pc, #440]	; (8001870 <MX_GPIO_Init+0x1d8>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b6c      	ldr	r3, [pc, #432]	; (8001870 <MX_GPIO_Init+0x1d8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	4b68      	ldr	r3, [pc, #416]	; (8001870 <MX_GPIO_Init+0x1d8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a67      	ldr	r2, [pc, #412]	; (8001870 <MX_GPIO_Init+0x1d8>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b65      	ldr	r3, [pc, #404]	; (8001870 <MX_GPIO_Init+0x1d8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b61      	ldr	r3, [pc, #388]	; (8001870 <MX_GPIO_Init+0x1d8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a60      	ldr	r2, [pc, #384]	; (8001870 <MX_GPIO_Init+0x1d8>)
 80016f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b5e      	ldr	r3, [pc, #376]	; (8001870 <MX_GPIO_Init+0x1d8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <MX_GPIO_Init+0x1d8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a59      	ldr	r2, [pc, #356]	; (8001870 <MX_GPIO_Init+0x1d8>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b57      	ldr	r3, [pc, #348]	; (8001870 <MX_GPIO_Init+0x1d8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b53      	ldr	r3, [pc, #332]	; (8001870 <MX_GPIO_Init+0x1d8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a52      	ldr	r2, [pc, #328]	; (8001870 <MX_GPIO_Init+0x1d8>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b50      	ldr	r3, [pc, #320]	; (8001870 <MX_GPIO_Init+0x1d8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b4c      	ldr	r3, [pc, #304]	; (8001870 <MX_GPIO_Init+0x1d8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a4b      	ldr	r2, [pc, #300]	; (8001870 <MX_GPIO_Init+0x1d8>)
 8001744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b49      	ldr	r3, [pc, #292]	; (8001870 <MX_GPIO_Init+0x1d8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	4b45      	ldr	r3, [pc, #276]	; (8001870 <MX_GPIO_Init+0x1d8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a44      	ldr	r2, [pc, #272]	; (8001870 <MX_GPIO_Init+0x1d8>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b42      	ldr	r3, [pc, #264]	; (8001870 <MX_GPIO_Init+0x1d8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	2170      	movs	r1, #112	; 0x70
 8001776:	483f      	ldr	r0, [pc, #252]	; (8001874 <MX_GPIO_Init+0x1dc>)
 8001778:	f001 fc38 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001782:	483d      	ldr	r0, [pc, #244]	; (8001878 <MX_GPIO_Init+0x1e0>)
 8001784:	f001 fc32 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	2140      	movs	r1, #64	; 0x40
 800178c:	483b      	ldr	r0, [pc, #236]	; (800187c <MX_GPIO_Init+0x1e4>)
 800178e:	f001 fc2d 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001798:	4839      	ldr	r0, [pc, #228]	; (8001880 <MX_GPIO_Init+0x1e8>)
 800179a:	f001 fc27 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2108      	movs	r1, #8
 80017a2:	4838      	ldr	r0, [pc, #224]	; (8001884 <MX_GPIO_Init+0x1ec>)
 80017a4:	f001 fc22 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80017a8:	2370      	movs	r3, #112	; 0x70
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	482d      	ldr	r0, [pc, #180]	; (8001874 <MX_GPIO_Init+0x1dc>)
 80017c0:	f001 fa78 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80017c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4826      	ldr	r0, [pc, #152]	; (8001878 <MX_GPIO_Init+0x1e0>)
 80017de:	f001 fa69 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80017e2:	23c0      	movs	r3, #192	; 0xc0
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4822      	ldr	r0, [pc, #136]	; (8001880 <MX_GPIO_Init+0x1e8>)
 80017f6:	f001 fa5d 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80017fa:	2330      	movs	r3, #48	; 0x30
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	481a      	ldr	r0, [pc, #104]	; (8001878 <MX_GPIO_Init+0x1e0>)
 800180e:	f001 fa51 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001812:	2340      	movs	r3, #64	; 0x40
 8001814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	4814      	ldr	r0, [pc, #80]	; (800187c <MX_GPIO_Init+0x1e4>)
 800182a:	f001 fa43 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800182e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	480e      	ldr	r0, [pc, #56]	; (8001880 <MX_GPIO_Init+0x1e8>)
 8001848:	f001 fa34 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800184c:	2308      	movs	r3, #8
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	4808      	ldr	r0, [pc, #32]	; (8001884 <MX_GPIO_Init+0x1ec>)
 8001864:	f001 fa26 	bl	8002cb4 <HAL_GPIO_Init>

}
 8001868:	bf00      	nop
 800186a:	3730      	adds	r7, #48	; 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	40021000 	.word	0x40021000
 8001878:	40020800 	.word	0x40020800
 800187c:	40021800 	.word	0x40021800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020c00 	.word	0x40020c00

08001888 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_I2C1_Init+0x50>)
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <MX_I2C1_Init+0x54>)
 8001890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_I2C1_Init+0x50>)
 8001894:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <MX_I2C1_Init+0x58>)
 8001896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_I2C1_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_I2C1_Init+0x50>)
 80018c6:	f001 fbab 	bl	8003020 <HAL_I2C_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018d0:	f000 fdf4 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200000cc 	.word	0x200000cc
 80018dc:	40005400 	.word	0x40005400
 80018e0:	000186a0 	.word	0x000186a0

080018e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a19      	ldr	r2, [pc, #100]	; (8001968 <HAL_I2C_MspInit+0x84>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d12b      	bne.n	800195e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_I2C_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a17      	ldr	r2, [pc, #92]	; (800196c <HAL_I2C_MspInit+0x88>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_I2C_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001922:	23c0      	movs	r3, #192	; 0xc0
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001926:	2312      	movs	r3, #18
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001932:	2304      	movs	r3, #4
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	480c      	ldr	r0, [pc, #48]	; (8001970 <HAL_I2C_MspInit+0x8c>)
 800193e:	f001 f9b9 	bl	8002cb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_I2C_MspInit+0x88>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_I2C_MspInit+0x88>)
 800194c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_I2C_MspInit+0x88>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40005400 	.word	0x40005400
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400

08001974 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <LCD_WR_REG+0x1c>)
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	8013      	strh	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	600ffffe 	.word	0x600ffffe

08001994 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <LCD_WR_DATA+0x1c>)
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	8053      	strh	r3, [r2, #2]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	600ffffe 	.word	0x600ffffe

080019b4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <LCD_RD_DATA+0x20>)
 80019bc:	885b      	ldrh	r3, [r3, #2]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	b29b      	uxth	r3, r3
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	600ffffe 	.word	0x600ffffe

080019d8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4604      	mov	r4, r0
 80019e0:	4608      	mov	r0, r1
 80019e2:	4611      	mov	r1, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	80fb      	strh	r3, [r7, #6]
 80019ea:	4603      	mov	r3, r0
 80019ec:	80bb      	strh	r3, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	807b      	strh	r3, [r7, #2]
 80019f2:	4613      	mov	r3, r2
 80019f4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80019f6:	202a      	movs	r0, #42	; 0x2a
 80019f8:	f7ff ffbc 	bl	8001974 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ffc6 	bl	8001994 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffc0 	bl	8001994 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ffba 	bl	8001994 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ffb4 	bl	8001994 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001a2c:	202b      	movs	r0, #43	; 0x2b
 8001a2e:	f7ff ffa1 	bl	8001974 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001a32:	88bb      	ldrh	r3, [r7, #4]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ffab 	bl	8001994 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ffa5 	bl	8001994 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001a4a:	883b      	ldrh	r3, [r7, #0]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff9f 	bl	8001994 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001a56:	883b      	ldrh	r3, [r7, #0]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff99 	bl	8001994 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001a62:	202c      	movs	r0, #44	; 0x2c
 8001a64:	f7ff ff86 	bl	8001974 <LCD_WR_REG>
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd90      	pop	{r4, r7, pc}

08001a70 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <lcd_Clear+0x70>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <lcd_Clear+0x70>)
 8001a94:	885b      	ldrh	r3, [r3, #2]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff ff9b 	bl	80019d8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	81fb      	strh	r3, [r7, #14]
 8001aa6:	e011      	b.n	8001acc <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	81bb      	strh	r3, [r7, #12]
 8001aac:	e006      	b.n	8001abc <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff6f 	bl	8001994 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001ab6:	89bb      	ldrh	r3, [r7, #12]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	81bb      	strh	r3, [r7, #12]
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <lcd_Clear+0x70>)
 8001abe:	885b      	ldrh	r3, [r3, #2]
 8001ac0:	89ba      	ldrh	r2, [r7, #12]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d3f3      	bcc.n	8001aae <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8001ac6:	89fb      	ldrh	r3, [r7, #14]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	81fb      	strh	r3, [r7, #14]
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <lcd_Clear+0x70>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	89fa      	ldrh	r2, [r7, #14]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d3e8      	bcc.n	8001aa8 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000120 	.word	0x20000120

08001ae4 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
 8001aee:	460b      	mov	r3, r1
 8001af0:	80bb      	strh	r3, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001af6:	88bb      	ldrh	r3, [r7, #4]
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	88b9      	ldrh	r1, [r7, #4]
 8001afc:	88f8      	ldrh	r0, [r7, #6]
 8001afe:	f7ff ff6b 	bl	80019d8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff45 	bl	8001994 <LCD_WR_DATA>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	4611      	mov	r1, r2
 8001b20:	461a      	mov	r2, r3
 8001b22:	4623      	mov	r3, r4
 8001b24:	80fb      	strh	r3, [r7, #6]
 8001b26:	4603      	mov	r3, r0
 8001b28:	80bb      	strh	r3, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70fb      	strb	r3, [r7, #3]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001b3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b3e:	085b      	lsrs	r3, r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf14      	ite	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	2300      	moveq	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	fb12 f303 	smulbb	r3, r2, r3
 8001b6a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	3b20      	subs	r3, #32
 8001b70:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29c      	uxth	r4, r3
 8001b80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	88bb      	ldrh	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	88b9      	ldrh	r1, [r7, #4]
 8001b92:	88f8      	ldrh	r0, [r7, #6]
 8001b94:	4622      	mov	r2, r4
 8001b96:	f7ff ff1f 	bl	80019d8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	827b      	strh	r3, [r7, #18]
 8001b9e:	e07a      	b.n	8001c96 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001ba0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d028      	beq.n	8001bfa <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001ba8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d108      	bne.n	8001bc2 <lcd_ShowChar+0xae>
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	8a7b      	ldrh	r3, [r7, #18]
 8001bb4:	493c      	ldr	r1, [pc, #240]	; (8001ca8 <lcd_ShowChar+0x194>)
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	440a      	add	r2, r1
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	75fb      	strb	r3, [r7, #23]
 8001bc0:	e01b      	b.n	8001bfa <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8001bc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc6:	2b18      	cmp	r3, #24
 8001bc8:	d10b      	bne.n	8001be2 <lcd_ShowChar+0xce>
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	8a79      	ldrh	r1, [r7, #18]
 8001bce:	4837      	ldr	r0, [pc, #220]	; (8001cac <lcd_ShowChar+0x198>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	4403      	add	r3, r0
 8001bda:	440b      	add	r3, r1
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	75fb      	strb	r3, [r7, #23]
 8001be0:	e00b      	b.n	8001bfa <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8001be2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d15a      	bne.n	8001ca0 <lcd_ShowChar+0x18c>
 8001bea:	78fa      	ldrb	r2, [r7, #3]
 8001bec:	8a7b      	ldrh	r3, [r7, #18]
 8001bee:	4930      	ldr	r1, [pc, #192]	; (8001cb0 <lcd_ShowChar+0x19c>)
 8001bf0:	0192      	lsls	r2, r2, #6
 8001bf2:	440a      	add	r2, r1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75bb      	strb	r3, [r7, #22]
 8001bfe:	e044      	b.n	8001c8a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001c00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d120      	bne.n	8001c4a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7dbb      	ldrb	r3, [r7, #22]
 8001c0c:	fa42 f303 	asr.w	r3, r2, r3
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <lcd_ShowChar+0x10e>
 8001c18:	883b      	ldrh	r3, [r7, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff feba 	bl	8001994 <LCD_WR_DATA>
 8001c20:	e003      	b.n	8001c2a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001c22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff feb5 	bl	8001994 <LCD_WR_DATA>
				m++;
 8001c2a:	7d7b      	ldrb	r3, [r7, #21]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001c30:	7d7b      	ldrb	r3, [r7, #21]
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c38:	fb02 f201 	mul.w	r2, r2, r1
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11f      	bne.n	8001c84 <lcd_ShowChar+0x170>
				{
					m=0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	757b      	strb	r3, [r7, #21]
					break;
 8001c48:	e022      	b.n	8001c90 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001c4a:	7dfa      	ldrb	r2, [r7, #23]
 8001c4c:	7dbb      	ldrb	r3, [r7, #22]
 8001c4e:	fa42 f303 	asr.w	r3, r2, r3
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <lcd_ShowChar+0x152>
 8001c5a:	883a      	ldrh	r2, [r7, #0]
 8001c5c:	88b9      	ldrh	r1, [r7, #4]
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff3f 	bl	8001ae4 <lcd_DrawPoint>
				x++;
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001c6c:	88fa      	ldrh	r2, [r7, #6]
 8001c6e:	8a3b      	ldrh	r3, [r7, #16]
 8001c70:	1ad2      	subs	r2, r2, r3
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d105      	bne.n	8001c84 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001c78:	8a3b      	ldrh	r3, [r7, #16]
 8001c7a:	80fb      	strh	r3, [r7, #6]
					y++;
 8001c7c:	88bb      	ldrh	r3, [r7, #4]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	80bb      	strh	r3, [r7, #4]
					break;
 8001c82:	e005      	b.n	8001c90 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001c84:	7dbb      	ldrb	r3, [r7, #22]
 8001c86:	3301      	adds	r3, #1
 8001c88:	75bb      	strb	r3, [r7, #22]
 8001c8a:	7dbb      	ldrb	r3, [r7, #22]
 8001c8c:	2b07      	cmp	r3, #7
 8001c8e:	d9b7      	bls.n	8001c00 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001c90:	8a7b      	ldrh	r3, [r7, #18]
 8001c92:	3301      	adds	r3, #1
 8001c94:	827b      	strh	r3, [r7, #18]
 8001c96:	8a7a      	ldrh	r2, [r7, #18]
 8001c98:	89bb      	ldrh	r3, [r7, #12]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d380      	bcc.n	8001ba0 <lcd_ShowChar+0x8c>
 8001c9e:	e000      	b.n	8001ca2 <lcd_ShowChar+0x18e>
		else return;
 8001ca0:	bf00      	nop
				}
			}
		}
	}
}
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	08005f30 	.word	0x08005f30
 8001cac:	08006520 	.word	0x08006520
 8001cb0:	080076f0 	.word	0x080076f0

08001cb4 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	71fb      	strb	r3, [r7, #7]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001cc8:	e004      	b.n	8001cd4 <mypow+0x20>
 8001cca:	79fa      	ldrb	r2, [r7, #7]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	71ba      	strb	r2, [r7, #6]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f5      	bne.n	8001cca <mypow+0x16>
	return result;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	4608      	mov	r0, r1
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4623      	mov	r3, r4
 8001cfc:	80fb      	strh	r3, [r7, #6]
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80bb      	strh	r3, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	807b      	strh	r3, [r7, #2]
 8001d06:	4613      	mov	r3, r2
 8001d08:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	73fb      	strb	r3, [r7, #15]
 8001d1a:	e059      	b.n	8001dd0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001d1c:	887c      	ldrh	r4, [r7, #2]
 8001d1e:	787a      	ldrb	r2, [r7, #1]
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	200a      	movs	r0, #10
 8001d2e:	f7ff ffc1 	bl	8001cb4 <mypow>
 8001d32:	4603      	mov	r3, r0
 8001d34:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <lcd_ShowIntNum+0xf8>)
 8001d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	1aca      	subs	r2, r1, r3
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d121      	bne.n	8001d98 <lcd_ShowIntNum+0xac>
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	787b      	ldrb	r3, [r7, #1]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	da1c      	bge.n	8001d98 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001d5e:	7b3b      	ldrb	r3, [r7, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d117      	bne.n	8001d94 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	7b7b      	ldrb	r3, [r7, #13]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	fb12 f303 	smulbb	r3, r2, r3
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	4413      	add	r3, r2
 8001d76:	b298      	uxth	r0, r3
 8001d78:	8c3a      	ldrh	r2, [r7, #32]
 8001d7a:	88b9      	ldrh	r1, [r7, #4]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f7ff fec1 	bl	8001b14 <lcd_ShowChar>
				continue;
 8001d92:	e01a      	b.n	8001dca <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	7b7b      	ldrb	r3, [r7, #13]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	fb12 f303 	smulbb	r3, r2, r3
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	4413      	add	r3, r2
 8001daa:	b298      	uxth	r0, r3
 8001dac:	7b3b      	ldrb	r3, [r7, #12]
 8001dae:	3330      	adds	r3, #48	; 0x30
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	8c3c      	ldrh	r4, [r7, #32]
 8001db4:	88b9      	ldrh	r1, [r7, #4]
 8001db6:	2300      	movs	r3, #0
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4623      	mov	r3, r4
 8001dc6:	f7ff fea5 	bl	8001b14 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	787b      	ldrb	r3, [r7, #1]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d3a1      	bcc.n	8001d1c <lcd_ShowIntNum+0x30>
	}
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd90      	pop	{r4, r7, pc}
 8001de2:	bf00      	nop
 8001de4:	cccccccd 	.word	0xcccccccd

08001de8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <lcd_SetDir+0x44>)
 8001e04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e08:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <lcd_SetDir+0x44>)
 8001e0c:	22f0      	movs	r2, #240	; 0xf0
 8001e0e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001e10:	e006      	b.n	8001e20 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <lcd_SetDir+0x44>)
 8001e14:	22f0      	movs	r2, #240	; 0xf0
 8001e16:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <lcd_SetDir+0x44>)
 8001e1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e1e:	805a      	strh	r2, [r3, #2]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	20000120 	.word	0x20000120

08001e30 <lcd_init>:


void lcd_init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e3a:	48aa      	ldr	r0, [pc, #680]	; (80020e4 <lcd_init+0x2b4>)
 8001e3c:	f001 f8d6 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e44:	f000 fe00 	bl	8002a48 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4e:	48a5      	ldr	r0, [pc, #660]	; (80020e4 <lcd_init+0x2b4>)
 8001e50:	f001 f8cc 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e58:	f000 fdf6 	bl	8002a48 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff ffc3 	bl	8001de8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001e62:	20d3      	movs	r0, #211	; 0xd3
 8001e64:	f7ff fd86 	bl	8001974 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001e68:	f7ff fda4 	bl	80019b4 <LCD_RD_DATA>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b9d      	ldr	r3, [pc, #628]	; (80020e8 <lcd_init+0x2b8>)
 8001e72:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001e74:	f7ff fd9e 	bl	80019b4 <LCD_RD_DATA>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b9a      	ldr	r3, [pc, #616]	; (80020e8 <lcd_init+0x2b8>)
 8001e7e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001e80:	f7ff fd98 	bl	80019b4 <LCD_RD_DATA>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b97      	ldr	r3, [pc, #604]	; (80020e8 <lcd_init+0x2b8>)
 8001e8a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001e8c:	4b96      	ldr	r3, [pc, #600]	; (80020e8 <lcd_init+0x2b8>)
 8001e8e:	889b      	ldrh	r3, [r3, #4]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b94      	ldr	r3, [pc, #592]	; (80020e8 <lcd_init+0x2b8>)
 8001e96:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001e98:	f7ff fd8c 	bl	80019b4 <LCD_RD_DATA>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b91      	ldr	r3, [pc, #580]	; (80020e8 <lcd_init+0x2b8>)
 8001ea2:	889b      	ldrh	r3, [r3, #4]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4b8f      	ldr	r3, [pc, #572]	; (80020e8 <lcd_init+0x2b8>)
 8001eaa:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001eac:	20cf      	movs	r0, #207	; 0xcf
 8001eae:	f7ff fd61 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fd6e 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001eb8:	20c1      	movs	r0, #193	; 0xc1
 8001eba:	f7ff fd6b 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001ebe:	2030      	movs	r0, #48	; 0x30
 8001ec0:	f7ff fd68 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001ec4:	20ed      	movs	r0, #237	; 0xed
 8001ec6:	f7ff fd55 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001eca:	2064      	movs	r0, #100	; 0x64
 8001ecc:	f7ff fd62 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f7ff fd5f 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001ed6:	2012      	movs	r0, #18
 8001ed8:	f7ff fd5c 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001edc:	2081      	movs	r0, #129	; 0x81
 8001ede:	f7ff fd59 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001ee2:	20e8      	movs	r0, #232	; 0xe8
 8001ee4:	f7ff fd46 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001ee8:	2085      	movs	r0, #133	; 0x85
 8001eea:	f7ff fd53 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001eee:	2010      	movs	r0, #16
 8001ef0:	f7ff fd50 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001ef4:	207a      	movs	r0, #122	; 0x7a
 8001ef6:	f7ff fd4d 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001efa:	20cb      	movs	r0, #203	; 0xcb
 8001efc:	f7ff fd3a 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f00:	2039      	movs	r0, #57	; 0x39
 8001f02:	f7ff fd47 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001f06:	202c      	movs	r0, #44	; 0x2c
 8001f08:	f7ff fd44 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fd41 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001f12:	2034      	movs	r0, #52	; 0x34
 8001f14:	f7ff fd3e 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7ff fd3b 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001f1e:	20f7      	movs	r0, #247	; 0xf7
 8001f20:	f7ff fd28 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001f24:	2020      	movs	r0, #32
 8001f26:	f7ff fd35 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001f2a:	20ea      	movs	r0, #234	; 0xea
 8001f2c:	f7ff fd22 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff fd2f 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fd2c 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001f3c:	20c0      	movs	r0, #192	; 0xc0
 8001f3e:	f7ff fd19 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001f42:	201b      	movs	r0, #27
 8001f44:	f7ff fd26 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001f48:	20c1      	movs	r0, #193	; 0xc1
 8001f4a:	f7ff fd13 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff fd20 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001f54:	20c5      	movs	r0, #197	; 0xc5
 8001f56:	f7ff fd0d 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001f5a:	2030      	movs	r0, #48	; 0x30
 8001f5c:	f7ff fd1a 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001f60:	2030      	movs	r0, #48	; 0x30
 8001f62:	f7ff fd17 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001f66:	20c7      	movs	r0, #199	; 0xc7
 8001f68:	f7ff fd04 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001f6c:	20b7      	movs	r0, #183	; 0xb7
 8001f6e:	f7ff fd11 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001f72:	2036      	movs	r0, #54	; 0x36
 8001f74:	f7ff fcfe 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001f78:	2008      	movs	r0, #8
 8001f7a:	f7ff fd0b 	bl	8001994 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001f7e:	203a      	movs	r0, #58	; 0x3a
 8001f80:	f7ff fcf8 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001f84:	2055      	movs	r0, #85	; 0x55
 8001f86:	f7ff fd05 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001f8a:	20b1      	movs	r0, #177	; 0xb1
 8001f8c:	f7ff fcf2 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff fcff 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001f96:	201a      	movs	r0, #26
 8001f98:	f7ff fcfc 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001f9c:	20b6      	movs	r0, #182	; 0xb6
 8001f9e:	f7ff fce9 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001fa2:	200a      	movs	r0, #10
 8001fa4:	f7ff fcf6 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001fa8:	20a2      	movs	r0, #162	; 0xa2
 8001faa:	f7ff fcf3 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001fae:	20f2      	movs	r0, #242	; 0xf2
 8001fb0:	f7ff fce0 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7ff fced 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001fba:	2026      	movs	r0, #38	; 0x26
 8001fbc:	f7ff fcda 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7ff fce7 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001fc6:	20e0      	movs	r0, #224	; 0xe0
 8001fc8:	f7ff fcd4 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001fcc:	200f      	movs	r0, #15
 8001fce:	f7ff fce1 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001fd2:	202a      	movs	r0, #42	; 0x2a
 8001fd4:	f7ff fcde 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001fd8:	2028      	movs	r0, #40	; 0x28
 8001fda:	f7ff fcdb 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001fde:	2008      	movs	r0, #8
 8001fe0:	f7ff fcd8 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001fe4:	200e      	movs	r0, #14
 8001fe6:	f7ff fcd5 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001fea:	2008      	movs	r0, #8
 8001fec:	f7ff fcd2 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001ff0:	2054      	movs	r0, #84	; 0x54
 8001ff2:	f7ff fccf 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001ff6:	20a9      	movs	r0, #169	; 0xa9
 8001ff8:	f7ff fccc 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001ffc:	2043      	movs	r0, #67	; 0x43
 8001ffe:	f7ff fcc9 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002002:	200a      	movs	r0, #10
 8002004:	f7ff fcc6 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002008:	200f      	movs	r0, #15
 800200a:	f7ff fcc3 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff fcc0 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff fcbd 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff fcba 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fcb7 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002026:	20e1      	movs	r0, #225	; 0xe1
 8002028:	f7ff fca4 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff fcb1 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002032:	2015      	movs	r0, #21
 8002034:	f7ff fcae 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002038:	2017      	movs	r0, #23
 800203a:	f7ff fcab 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800203e:	2007      	movs	r0, #7
 8002040:	f7ff fca8 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002044:	2011      	movs	r0, #17
 8002046:	f7ff fca5 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800204a:	2006      	movs	r0, #6
 800204c:	f7ff fca2 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002050:	202b      	movs	r0, #43	; 0x2b
 8002052:	f7ff fc9f 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002056:	2056      	movs	r0, #86	; 0x56
 8002058:	f7ff fc9c 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800205c:	203c      	movs	r0, #60	; 0x3c
 800205e:	f7ff fc99 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002062:	2005      	movs	r0, #5
 8002064:	f7ff fc96 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002068:	2010      	movs	r0, #16
 800206a:	f7ff fc93 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800206e:	200f      	movs	r0, #15
 8002070:	f7ff fc90 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002074:	203f      	movs	r0, #63	; 0x3f
 8002076:	f7ff fc8d 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800207a:	203f      	movs	r0, #63	; 0x3f
 800207c:	f7ff fc8a 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002080:	200f      	movs	r0, #15
 8002082:	f7ff fc87 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002086:	202b      	movs	r0, #43	; 0x2b
 8002088:	f7ff fc74 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff fc81 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002092:	2000      	movs	r0, #0
 8002094:	f7ff fc7e 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002098:	2001      	movs	r0, #1
 800209a:	f7ff fc7b 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800209e:	203f      	movs	r0, #63	; 0x3f
 80020a0:	f7ff fc78 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80020a4:	202a      	movs	r0, #42	; 0x2a
 80020a6:	f7ff fc65 	bl	8001974 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff fc72 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff fc6f 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff fc6c 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80020bc:	20ef      	movs	r0, #239	; 0xef
 80020be:	f7ff fc69 	bl	8001994 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80020c2:	2011      	movs	r0, #17
 80020c4:	f7ff fc56 	bl	8001974 <LCD_WR_REG>
	HAL_Delay(120);
 80020c8:	2078      	movs	r0, #120	; 0x78
 80020ca:	f000 fcbd 	bl	8002a48 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80020ce:	2029      	movs	r0, #41	; 0x29
 80020d0:	f7ff fc50 	bl	8001974 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020da:	4804      	ldr	r0, [pc, #16]	; (80020ec <lcd_init+0x2bc>)
 80020dc:	f000 ff86 	bl	8002fec <HAL_GPIO_WritePin>
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40020800 	.word	0x40020800
 80020e8:	20000120 	.word	0x20000120
 80020ec:	40020000 	.word	0x40020000

080020f0 <_draw_circle_8>:

void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	b29b      	uxth	r3, r3
 8002106:	4413      	add	r3, r2
 8002108:	b298      	uxth	r0, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	b29a      	uxth	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	4413      	add	r3, r2
 8002114:	b29b      	uxth	r3, r3
 8002116:	8b3a      	ldrh	r2, [r7, #24]
 8002118:	4619      	mov	r1, r3
 800211a:	f7ff fce3 	bl	8001ae4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	b29a      	uxth	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	b29b      	uxth	r3, r3
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	b298      	uxth	r0, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	b29a      	uxth	r2, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	4413      	add	r3, r2
 8002134:	b29b      	uxth	r3, r3
 8002136:	8b3a      	ldrh	r2, [r7, #24]
 8002138:	4619      	mov	r1, r3
 800213a:	f7ff fcd3 	bl	8001ae4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	b29a      	uxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	b29b      	uxth	r3, r3
 8002146:	4413      	add	r3, r2
 8002148:	b298      	uxth	r0, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	b29a      	uxth	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	b29b      	uxth	r3, r3
 8002156:	8b3a      	ldrh	r2, [r7, #24]
 8002158:	4619      	mov	r1, r3
 800215a:	f7ff fcc3 	bl	8001ae4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	b29a      	uxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	b29b      	uxth	r3, r3
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	b298      	uxth	r0, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	b29a      	uxth	r2, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	b29b      	uxth	r3, r3
 8002176:	8b3a      	ldrh	r2, [r7, #24]
 8002178:	4619      	mov	r1, r3
 800217a:	f7ff fcb3 	bl	8001ae4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	b29a      	uxth	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4413      	add	r3, r2
 8002188:	b298      	uxth	r0, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	b29a      	uxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4413      	add	r3, r2
 8002194:	b29b      	uxth	r3, r3
 8002196:	8b3a      	ldrh	r2, [r7, #24]
 8002198:	4619      	mov	r1, r3
 800219a:	f7ff fca3 	bl	8001ae4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	b298      	uxth	r0, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	8b3a      	ldrh	r2, [r7, #24]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7ff fc93 	bl	8001ae4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	b298      	uxth	r0, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	8b3a      	ldrh	r2, [r7, #24]
 80021d8:	4619      	mov	r1, r3
 80021da:	f7ff fc83 	bl	8001ae4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	b298      	uxth	r0, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	8b3a      	ldrh	r2, [r7, #24]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7ff fc73 	bl	8001ae4 <lcd_DrawPoint>
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b08a      	sub	sp, #40	; 0x28
 800220a:	af02      	add	r7, sp, #8
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	f1c3 0303 	rsb	r3, r3, #3
 8002226:	613b      	str	r3, [r7, #16]


	if (fill)
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	2b00      	cmp	r3, #0
 800222c:	d04f      	beq.n	80022ce <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 800222e:	e029      	b.n	8002284 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	e00a      	b.n	800224c <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7ff ff55 	bl	80020f0 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	429a      	cmp	r2, r3
 8002252:	ddf0      	ble.n	8002236 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	da06      	bge.n	8002268 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	009a      	lsls	r2, r3, #2
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	3306      	adds	r3, #6
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	e00a      	b.n	800227e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	009a      	lsls	r2, r3, #2
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	330a      	adds	r3, #10
 8002276:	613b      	str	r3, [r7, #16]
				y--;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3b01      	subs	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	429a      	cmp	r2, r3
 800228a:	ddd1      	ble.n	8002230 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800228c:	e023      	b.n	80022d6 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff ff29 	bl	80020f0 <_draw_circle_8>
			if (d < 0) {
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da06      	bge.n	80022b2 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	3306      	adds	r3, #6
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e00a      	b.n	80022c8 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	009a      	lsls	r2, r3, #2
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	330a      	adds	r3, #10
 80022c0:	613b      	str	r3, [r7, #16]
				y--;
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	61bb      	str	r3, [r7, #24]
			x++;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	3301      	adds	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	dddb      	ble.n	800228e <lcd_DrawCircle+0x88>
}
 80022d6:	bf00      	nop
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80022e4:	2201      	movs	r2, #1
 80022e6:	2140      	movs	r1, #64	; 0x40
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <led7_init+0x14>)
 80022ea:	f000 fe7f 	bl	8002fec <HAL_GPIO_WritePin>
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40021800 	.word	0x40021800

080022f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022fc:	f000 fb32 	bl	8002964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002300:	f000 f830 	bl	8002364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002304:	f7ff f9c8 	bl	8001698 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002308:	f000 fa52 	bl	80027b0 <MX_TIM2_Init>
  MX_SPI1_Init();
 800230c:	f000 f964 	bl	80025d8 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002310:	f7ff f8f2 	bl	80014f8 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002314:	f7ff fab8 	bl	8001888 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002318:	f000 f88e 	bl	8002438 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff fba7 	bl	8001a70 <lcd_Clear>
 updateTime();
 8002322:	f000 f8ab 	bl	800247c <updateTime>
 status = INIT;
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <main+0x5c>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]
 TMP = 1;
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <main+0x60>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]
 TIMER = 1;
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <main+0x64>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  while(!flag_timer2);
 8002338:	bf00      	nop
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <main+0x68>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0fb      	beq.n	800233a <main+0x42>
	  flag_timer2 = 0;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <main+0x68>)
 8002344:	2200      	movs	r2, #0
 8002346:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8002348:	f7fe f8c6 	bl	80004d8 <button_Scan>
	  fsm_run();
 800234c:	f7ff f892 	bl	8001474 <fsm_run>
	  while(!flag_timer2);
 8002350:	e7f2      	b.n	8002338 <main+0x40>
 8002352:	bf00      	nop
 8002354:	20000034 	.word	0x20000034
 8002358:	20000038 	.word	0x20000038
 800235c:	2000003c 	.word	0x2000003c
 8002360:	20000040 	.word	0x20000040

08002364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b094      	sub	sp, #80	; 0x50
 8002368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236a:	f107 0320 	add.w	r3, r7, #32
 800236e:	2230      	movs	r2, #48	; 0x30
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fdc8 	bl	8005f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <SystemClock_Config+0xcc>)
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	4a27      	ldr	r2, [pc, #156]	; (8002430 <SystemClock_Config+0xcc>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	6413      	str	r3, [r2, #64]	; 0x40
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <SystemClock_Config+0xcc>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a4:	2300      	movs	r3, #0
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <SystemClock_Config+0xd0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a21      	ldr	r2, [pc, #132]	; (8002434 <SystemClock_Config+0xd0>)
 80023ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <SystemClock_Config+0xd0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023c0:	2302      	movs	r3, #2
 80023c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023c4:	2301      	movs	r3, #1
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023c8:	2310      	movs	r3, #16
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023cc:	2302      	movs	r3, #2
 80023ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023d0:	2300      	movs	r3, #0
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023d4:	2308      	movs	r3, #8
 80023d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023d8:	23a8      	movs	r3, #168	; 0xa8
 80023da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023dc:	2302      	movs	r3, #2
 80023de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023e0:	2304      	movs	r3, #4
 80023e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e4:	f107 0320 	add.w	r3, r7, #32
 80023e8:	4618      	mov	r0, r3
 80023ea:	f001 ff07 	bl	80041fc <HAL_RCC_OscConfig>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023f4:	f000 f862 	bl	80024bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f8:	230f      	movs	r3, #15
 80023fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023fc:	2302      	movs	r3, #2
 80023fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002404:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002408:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800240a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800240e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	2105      	movs	r1, #5
 8002416:	4618      	mov	r0, r3
 8002418:	f002 f968 	bl	80046ec <HAL_RCC_ClockConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002422:	f000 f84b 	bl	80024bc <Error_Handler>
  }
}
 8002426:	bf00      	nop
 8002428:	3750      	adds	r7, #80	; 0x50
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	40007000 	.word	0x40007000

08002438 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	2120      	movs	r1, #32
 8002440:	480d      	ldr	r0, [pc, #52]	; (8002478 <system_init+0x40>)
 8002442:	f000 fdd3 	bl	8002fec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2140      	movs	r1, #64	; 0x40
 800244a:	480b      	ldr	r0, [pc, #44]	; (8002478 <system_init+0x40>)
 800244c:	f000 fdce 	bl	8002fec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2110      	movs	r1, #16
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <system_init+0x40>)
 8002456:	f000 fdc9 	bl	8002fec <HAL_GPIO_WritePin>
	  timer_init();
 800245a:	f000 f835 	bl	80024c8 <timer_init>
	  led7_init();
 800245e:	f7ff ff3f 	bl	80022e0 <led7_init>
	  button_init();
 8002462:	f7fe f82d 	bl	80004c0 <button_init>
	  lcd_init();
 8002466:	f7ff fce3 	bl	8001e30 <lcd_init>
	  ds3231_init();
 800246a:	f7fe f8a1 	bl	80005b0 <ds3231_init>
	  setTimer2(50);
 800246e:	2032      	movs	r0, #50	; 0x32
 8002470:	f000 f834 	bl	80024dc <setTimer2>
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000

0800247c <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 8002480:	2117      	movs	r1, #23
 8002482:	2006      	movs	r0, #6
 8002484:	f7fe f8d8 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 8002488:	210a      	movs	r1, #10
 800248a:	2005      	movs	r0, #5
 800248c:	f7fe f8d4 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 8002490:	2114      	movs	r1, #20
 8002492:	2004      	movs	r0, #4
 8002494:	f7fe f8d0 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8002498:	2106      	movs	r1, #6
 800249a:	2003      	movs	r0, #3
 800249c:	f7fe f8cc 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 80024a0:	2114      	movs	r1, #20
 80024a2:	2002      	movs	r0, #2
 80024a4:	f7fe f8c8 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 80024a8:	210b      	movs	r1, #11
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7fe f8c4 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 80024b0:	2117      	movs	r1, #23
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7fe f8c0 	bl	8000638 <ds3231_Write>
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}

080024bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c0:	b672      	cpsid	i
}
 80024c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <Error_Handler+0x8>
	...

080024c8 <timer_init>:

uint16_t flag_timer3 = 0;
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;

void timer_init(){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <timer_init+0x10>)
 80024ce:	f002 fff5 	bl	80054bc <HAL_TIM_Base_Start_IT>
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200001b4 	.word	0x200001b4

080024dc <setTimer2>:

void setTimer2(uint16_t duration){
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80024e6:	4a08      	ldr	r2, [pc, #32]	; (8002508 <setTimer2+0x2c>)
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <setTimer2+0x2c>)
 80024ee:	881a      	ldrh	r2, [r3, #0]
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <setTimer2+0x30>)
 80024f2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <setTimer2+0x34>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	801a      	strh	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000044 	.word	0x20000044
 800250c:	20000042 	.word	0x20000042
 8002510:	20000040 	.word	0x20000040

08002514 <setTimer3>:

void setTimer3(uint16_t duration){
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_3;
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <setTimer3+0x2c>)
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <setTimer3+0x2c>)
 8002526:	881a      	ldrh	r2, [r3, #0]
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <setTimer3+0x30>)
 800252a:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <setTimer3+0x34>)
 800252e:	2200      	movs	r2, #0
 8002530:	801a      	strh	r2, [r3, #0]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	2000004a 	.word	0x2000004a
 8002544:	20000048 	.word	0x20000048
 8002548:	20000046 	.word	0x20000046

0800254c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255c:	d129      	bne.n	80025b2 <HAL_TIM_PeriodElapsedCallback+0x66>
		if(timer2_counter > 0){
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002570:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800257c:	2201      	movs	r2, #1
 800257e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002582:	881a      	ldrh	r2, [r3, #0]
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002586:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d010      	beq.n	80025b2 <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800259a:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80025b0:	801a      	strh	r2, [r3, #0]
			}
		}
//		led7_Scan();
	}
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000042 	.word	0x20000042
 80025c4:	20000040 	.word	0x20000040
 80025c8:	20000044 	.word	0x20000044
 80025cc:	20000048 	.word	0x20000048
 80025d0:	20000046 	.word	0x20000046
 80025d4:	2000004a 	.word	0x2000004a

080025d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025dc:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_SPI1_Init+0x64>)
 80025de:	4a18      	ldr	r2, [pc, #96]	; (8002640 <MX_SPI1_Init+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <MX_SPI1_Init+0x64>)
 80025e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ea:	4b14      	ldr	r3, [pc, #80]	; (800263c <MX_SPI1_Init+0x64>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <MX_SPI1_Init+0x64>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_SPI1_Init+0x64>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_SPI1_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_SPI1_Init+0x64>)
 8002604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_SPI1_Init+0x64>)
 800260c:	2200      	movs	r2, #0
 800260e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <MX_SPI1_Init+0x64>)
 8002612:	2200      	movs	r2, #0
 8002614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_SPI1_Init+0x64>)
 8002618:	2200      	movs	r2, #0
 800261a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <MX_SPI1_Init+0x64>)
 800261e:	2200      	movs	r2, #0
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_SPI1_Init+0x64>)
 8002624:	220a      	movs	r2, #10
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002628:	4804      	ldr	r0, [pc, #16]	; (800263c <MX_SPI1_Init+0x64>)
 800262a:	f002 fa47 	bl	8004abc <HAL_SPI_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002634:	f7ff ff42 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	2000015c 	.word	0x2000015c
 8002640:	40013000 	.word	0x40013000

08002644 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_SPI_MspInit+0x84>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d12b      	bne.n	80026be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_SPI_MspInit+0x88>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002674:	6453      	str	r3, [r2, #68]	; 0x44
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_SPI_MspInit+0x88>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800269e:	2338      	movs	r3, #56	; 0x38
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ae:	2305      	movs	r3, #5
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <HAL_SPI_MspInit+0x8c>)
 80026ba:	f000 fafb 	bl	8002cb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80026be:	bf00      	nop
 80026c0:	3728      	adds	r7, #40	; 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40013000 	.word	0x40013000
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020400 	.word	0x40020400

080026d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_MspInit+0x4c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_MspInit+0x4c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_MspInit+0x4c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_MspInit+0x4c>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a08      	ldr	r2, [pc, #32]	; (8002720 <HAL_MspInit+0x4c>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_MspInit+0x4c>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <NMI_Handler+0x4>

0800272a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <HardFault_Handler+0x4>

08002730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <MemManage_Handler+0x4>

08002736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <BusFault_Handler+0x4>

0800273c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <UsageFault_Handler+0x4>

08002742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002770:	f000 f94a 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}

08002778 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <TIM2_IRQHandler+0x10>)
 800277e:	f002 ff0d 	bl	800559c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200001b4 	.word	0x200001b4

0800278c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <SystemInit+0x20>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <SystemInit+0x20>)
 8002798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800279c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c4:	463b      	mov	r3, r7
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <MX_TIM2_Init+0x94>)
 80027ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <MX_TIM2_Init+0x94>)
 80027d6:	f240 3247 	movw	r2, #839	; 0x347
 80027da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <MX_TIM2_Init+0x94>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <MX_TIM2_Init+0x94>)
 80027e4:	2263      	movs	r2, #99	; 0x63
 80027e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <MX_TIM2_Init+0x94>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <MX_TIM2_Init+0x94>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027f4:	4813      	ldr	r0, [pc, #76]	; (8002844 <MX_TIM2_Init+0x94>)
 80027f6:	f002 fe11 	bl	800541c <HAL_TIM_Base_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002800:	f7ff fe5c 	bl	80024bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800280a:	f107 0308 	add.w	r3, r7, #8
 800280e:	4619      	mov	r1, r3
 8002810:	480c      	ldr	r0, [pc, #48]	; (8002844 <MX_TIM2_Init+0x94>)
 8002812:	f002 ffcb 	bl	80057ac <HAL_TIM_ConfigClockSource>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800281c:	f7ff fe4e 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002828:	463b      	mov	r3, r7
 800282a:	4619      	mov	r1, r3
 800282c:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_TIM2_Init+0x94>)
 800282e:	f003 f9e7 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002838:	f7ff fe40 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200001b4 	.word	0x200001b4

08002848 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d115      	bne.n	8002886 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_TIM_Base_MspInit+0x48>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_TIM_Base_MspInit+0x48>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_TIM_Base_MspInit+0x48>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	201c      	movs	r0, #28
 800287c:	f000 f9e3 	bl	8002c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002880:	201c      	movs	r0, #28
 8002882:	f000 f9fc 	bl	8002c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800

08002894 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	0092      	lsls	r2, r2, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	b2db      	uxtb	r3, r3
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	; (800290c <DEC2BCD+0x44>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	08db      	lsrs	r3, r3, #3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	b258      	sxtb	r0, r3
 80028e2:	79fa      	ldrb	r2, [r7, #7]
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <DEC2BCD+0x44>)
 80028e6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ea:	08d9      	lsrs	r1, r3, #3
 80028ec:	460b      	mov	r3, r1
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	4303      	orrs	r3, r0
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	cccccccd 	.word	0xcccccccd

08002910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002914:	480d      	ldr	r0, [pc, #52]	; (800294c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002916:	490e      	ldr	r1, [pc, #56]	; (8002950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800291c:	e002      	b.n	8002924 <LoopCopyDataInit>

0800291e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800291e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002922:	3304      	adds	r3, #4

08002924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002928:	d3f9      	bcc.n	800291e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292a:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800292c:	4c0b      	ldr	r4, [pc, #44]	; (800295c <LoopFillZerobss+0x26>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002930:	e001      	b.n	8002936 <LoopFillZerobss>

08002932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002934:	3204      	adds	r2, #4

08002936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002938:	d3fb      	bcc.n	8002932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800293a:	f7ff ff27 	bl	800278c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800293e:	f003 fabf 	bl	8005ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002942:	f7ff fcd9 	bl	80022f8 <main>
  bx  lr    
 8002946:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002954:	08008ed8 	.word	0x08008ed8
  ldr r2, =_sbss
 8002958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800295c:	20000200 	.word	0x20000200

08002960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC_IRQHandler>
	...

08002964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <HAL_Init+0x40>)
 800296e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_Init+0x40>)
 800297a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_Init+0x40>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298c:	2003      	movs	r0, #3
 800298e:	f000 f94f 	bl	8002c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002992:	200f      	movs	r0, #15
 8002994:	f000 f808 	bl	80029a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002998:	f7ff fe9c 	bl	80026d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00

080029a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x54>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x58>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f967 	bl	8002c9a <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f000 f92f 	bl	8002c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <HAL_InitTick+0x5c>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000000 	.word	0x20000000
 8002a00:	20000008 	.word	0x20000008
 8002a04:	20000004 	.word	0x20000004

08002a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_IncTick+0x20>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_IncTick+0x24>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_IncTick+0x24>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000008 	.word	0x20000008
 8002a2c:	200001fc 	.word	0x200001fc

08002a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_GetTick+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	200001fc 	.word	0x200001fc

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff ffee 	bl	8002a30 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffde 	bl	8002a30 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000008 	.word	0x20000008

08002a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	60d3      	str	r3, [r2, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db0b      	blt.n	8002b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4907      	ldr	r1, [pc, #28]	; (8002b2c <__NVIC_EnableIRQ+0x38>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2001      	movs	r0, #1
 8002b16:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	db0a      	blt.n	8002b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	490c      	ldr	r1, [pc, #48]	; (8002b7c <__NVIC_SetPriority+0x4c>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	440b      	add	r3, r1
 8002b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b58:	e00a      	b.n	8002b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4908      	ldr	r1, [pc, #32]	; (8002b80 <__NVIC_SetPriority+0x50>)
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3b04      	subs	r3, #4
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	761a      	strb	r2, [r3, #24]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f1c3 0307 	rsb	r3, r3, #7
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	bf28      	it	cs
 8002ba2:	2304      	movcs	r3, #4
 8002ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d902      	bls.n	8002bb4 <NVIC_EncodePriority+0x30>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3b03      	subs	r3, #3
 8002bb2:	e000      	b.n	8002bb6 <NVIC_EncodePriority+0x32>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	43d9      	mvns	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	4313      	orrs	r3, r2
         );
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	; 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bfc:	d301      	bcc.n	8002c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e00f      	b.n	8002c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <SysTick_Config+0x40>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0a:	210f      	movs	r1, #15
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	f7ff ff8e 	bl	8002b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <SysTick_Config+0x40>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <SysTick_Config+0x40>)
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	e000e010 	.word	0xe000e010

08002c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff29 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c58:	f7ff ff3e 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f7ff ff8e 	bl	8002b84 <NVIC_EncodePriority>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff5d 	bl	8002b30 <__NVIC_SetPriority>
}
 8002c76:	bf00      	nop
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff31 	bl	8002af4 <__NVIC_EnableIRQ>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ffa2 	bl	8002bec <SysTick_Config>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	e16b      	b.n	8002fa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	f040 815a 	bne.w	8002fa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d005      	beq.n	8002d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d130      	bne.n	8002d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	2203      	movs	r2, #3
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 0201 	and.w	r2, r3, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d017      	beq.n	8002da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d123      	bne.n	8002df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	08da      	lsrs	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3208      	adds	r2, #8
 8002db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	08da      	lsrs	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3208      	adds	r2, #8
 8002df2:	69b9      	ldr	r1, [r7, #24]
 8002df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0203 	and.w	r2, r3, #3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80b4 	beq.w	8002fa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	4b60      	ldr	r3, [pc, #384]	; (8002fc0 <HAL_GPIO_Init+0x30c>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	4a5f      	ldr	r2, [pc, #380]	; (8002fc0 <HAL_GPIO_Init+0x30c>)
 8002e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e48:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4a:	4b5d      	ldr	r3, [pc, #372]	; (8002fc0 <HAL_GPIO_Init+0x30c>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e56:	4a5b      	ldr	r2, [pc, #364]	; (8002fc4 <HAL_GPIO_Init+0x310>)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	; (8002fc8 <HAL_GPIO_Init+0x314>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d02b      	beq.n	8002eda <HAL_GPIO_Init+0x226>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a51      	ldr	r2, [pc, #324]	; (8002fcc <HAL_GPIO_Init+0x318>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d025      	beq.n	8002ed6 <HAL_GPIO_Init+0x222>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a50      	ldr	r2, [pc, #320]	; (8002fd0 <HAL_GPIO_Init+0x31c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01f      	beq.n	8002ed2 <HAL_GPIO_Init+0x21e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4f      	ldr	r2, [pc, #316]	; (8002fd4 <HAL_GPIO_Init+0x320>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d019      	beq.n	8002ece <HAL_GPIO_Init+0x21a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4e      	ldr	r2, [pc, #312]	; (8002fd8 <HAL_GPIO_Init+0x324>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_GPIO_Init+0x216>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4d      	ldr	r2, [pc, #308]	; (8002fdc <HAL_GPIO_Init+0x328>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_GPIO_Init+0x212>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4c      	ldr	r2, [pc, #304]	; (8002fe0 <HAL_GPIO_Init+0x32c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <HAL_GPIO_Init+0x20e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4b      	ldr	r2, [pc, #300]	; (8002fe4 <HAL_GPIO_Init+0x330>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_GPIO_Init+0x20a>
 8002eba:	2307      	movs	r3, #7
 8002ebc:	e00e      	b.n	8002edc <HAL_GPIO_Init+0x228>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	e00c      	b.n	8002edc <HAL_GPIO_Init+0x228>
 8002ec2:	2306      	movs	r3, #6
 8002ec4:	e00a      	b.n	8002edc <HAL_GPIO_Init+0x228>
 8002ec6:	2305      	movs	r3, #5
 8002ec8:	e008      	b.n	8002edc <HAL_GPIO_Init+0x228>
 8002eca:	2304      	movs	r3, #4
 8002ecc:	e006      	b.n	8002edc <HAL_GPIO_Init+0x228>
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e004      	b.n	8002edc <HAL_GPIO_Init+0x228>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e002      	b.n	8002edc <HAL_GPIO_Init+0x228>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_GPIO_Init+0x228>
 8002eda:	2300      	movs	r3, #0
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	f002 0203 	and.w	r2, r2, #3
 8002ee2:	0092      	lsls	r2, r2, #2
 8002ee4:	4093      	lsls	r3, r2
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eec:	4935      	ldr	r1, [pc, #212]	; (8002fc4 <HAL_GPIO_Init+0x310>)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002efa:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_GPIO_Init+0x334>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f1e:	4a32      	ldr	r2, [pc, #200]	; (8002fe8 <HAL_GPIO_Init+0x334>)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f24:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <HAL_GPIO_Init+0x334>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f48:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <HAL_GPIO_Init+0x334>)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <HAL_GPIO_Init+0x334>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <HAL_GPIO_Init+0x334>)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_GPIO_Init+0x334>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f9c:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <HAL_GPIO_Init+0x334>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	61fb      	str	r3, [r7, #28]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2b0f      	cmp	r3, #15
 8002fac:	f67f ae90 	bls.w	8002cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	3724      	adds	r7, #36	; 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40013800 	.word	0x40013800
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	40020800 	.word	0x40020800
 8002fd4:	40020c00 	.word	0x40020c00
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40021400 	.word	0x40021400
 8002fe0:	40021800 	.word	0x40021800
 8002fe4:	40021c00 	.word	0x40021c00
 8002fe8:	40013c00 	.word	0x40013c00

08002fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003008:	e003      	b.n	8003012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	619a      	str	r2, [r3, #24]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e12b      	b.n	800328a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe fc4c 	bl	80018e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	; 0x24
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003084:	f001 fd06 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8003088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4a81      	ldr	r2, [pc, #516]	; (8003294 <HAL_I2C_Init+0x274>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d807      	bhi.n	80030a4 <HAL_I2C_Init+0x84>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4a80      	ldr	r2, [pc, #512]	; (8003298 <HAL_I2C_Init+0x278>)
 8003098:	4293      	cmp	r3, r2
 800309a:	bf94      	ite	ls
 800309c:	2301      	movls	r3, #1
 800309e:	2300      	movhi	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e006      	b.n	80030b2 <HAL_I2C_Init+0x92>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a7d      	ldr	r2, [pc, #500]	; (800329c <HAL_I2C_Init+0x27c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	bf94      	ite	ls
 80030ac:	2301      	movls	r3, #1
 80030ae:	2300      	movhi	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0e7      	b.n	800328a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a78      	ldr	r2, [pc, #480]	; (80032a0 <HAL_I2C_Init+0x280>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0c9b      	lsrs	r3, r3, #18
 80030c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a6a      	ldr	r2, [pc, #424]	; (8003294 <HAL_I2C_Init+0x274>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d802      	bhi.n	80030f4 <HAL_I2C_Init+0xd4>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3301      	adds	r3, #1
 80030f2:	e009      	b.n	8003108 <HAL_I2C_Init+0xe8>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	4a69      	ldr	r2, [pc, #420]	; (80032a4 <HAL_I2C_Init+0x284>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	3301      	adds	r3, #1
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	430b      	orrs	r3, r1
 800310e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800311a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	495c      	ldr	r1, [pc, #368]	; (8003294 <HAL_I2C_Init+0x274>)
 8003124:	428b      	cmp	r3, r1
 8003126:	d819      	bhi.n	800315c <HAL_I2C_Init+0x13c>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e59      	subs	r1, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fbb1 f3f3 	udiv	r3, r1, r3
 8003136:	1c59      	adds	r1, r3, #1
 8003138:	f640 73fc 	movw	r3, #4092	; 0xffc
 800313c:	400b      	ands	r3, r1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_I2C_Init+0x138>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1e59      	subs	r1, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003150:	3301      	adds	r3, #1
 8003152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003156:	e051      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 8003158:	2304      	movs	r3, #4
 800315a:	e04f      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d111      	bne.n	8003188 <HAL_I2C_Init+0x168>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	440b      	add	r3, r1
 8003172:	fbb0 f3f3 	udiv	r3, r0, r3
 8003176:	3301      	adds	r3, #1
 8003178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e012      	b.n	80031ae <HAL_I2C_Init+0x18e>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e58      	subs	r0, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	0099      	lsls	r1, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	fbb0 f3f3 	udiv	r3, r0, r3
 800319e:	3301      	adds	r3, #1
 80031a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Init+0x196>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e022      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10e      	bne.n	80031dc <HAL_I2C_Init+0x1bc>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1e58      	subs	r0, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	440b      	add	r3, r1
 80031cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d0:	3301      	adds	r3, #1
 80031d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031da:	e00f      	b.n	80031fc <HAL_I2C_Init+0x1dc>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e58      	subs	r0, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	0099      	lsls	r1, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	6809      	ldr	r1, [r1, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800322a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6911      	ldr	r1, [r2, #16]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68d2      	ldr	r2, [r2, #12]
 8003236:	4311      	orrs	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	430b      	orrs	r3, r1
 800323e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	000186a0 	.word	0x000186a0
 8003298:	001e847f 	.word	0x001e847f
 800329c:	003d08ff 	.word	0x003d08ff
 80032a0:	431bde83 	.word	0x431bde83
 80032a4:	10624dd3 	.word	0x10624dd3

080032a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	4608      	mov	r0, r1
 80032b2:	4611      	mov	r1, r2
 80032b4:	461a      	mov	r2, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	817b      	strh	r3, [r7, #10]
 80032ba:	460b      	mov	r3, r1
 80032bc:	813b      	strh	r3, [r7, #8]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032c2:	f7ff fbb5 	bl	8002a30 <HAL_GetTick>
 80032c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	f040 80d9 	bne.w	8003488 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2319      	movs	r3, #25
 80032dc:	2201      	movs	r2, #1
 80032de:	496d      	ldr	r1, [pc, #436]	; (8003494 <HAL_I2C_Mem_Write+0x1ec>)
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fdad 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
 80032ee:	e0cc      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_I2C_Mem_Write+0x56>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0c5      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d007      	beq.n	8003324 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003332:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2221      	movs	r2, #33	; 0x21
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2240      	movs	r2, #64	; 0x40
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a4d      	ldr	r2, [pc, #308]	; (8003498 <HAL_I2C_Mem_Write+0x1f0>)
 8003364:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003366:	88f8      	ldrh	r0, [r7, #6]
 8003368:	893a      	ldrh	r2, [r7, #8]
 800336a:	8979      	ldrh	r1, [r7, #10]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	4603      	mov	r3, r0
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fbe4 	bl	8003b44 <I2C_RequestMemoryWrite>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d052      	beq.n	8003428 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e081      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fe2e 	bl	8003fec <I2C_WaitOnTXEFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b04      	cmp	r3, #4
 800339c:	d107      	bne.n	80033ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06b      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	781a      	ldrb	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d11b      	bne.n	8003428 <HAL_I2C_Mem_Write+0x180>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d017      	beq.n	8003428 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1aa      	bne.n	8003386 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fe1a 	bl	800406e <I2C_WaitOnBTFFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	2b04      	cmp	r3, #4
 8003446:	d107      	bne.n	8003458 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003456:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e016      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e000      	b.n	800348a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
  }
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	00100002 	.word	0x00100002
 8003498:	ffff0000 	.word	0xffff0000

0800349c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	4608      	mov	r0, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	461a      	mov	r2, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	817b      	strh	r3, [r7, #10]
 80034ae:	460b      	mov	r3, r1
 80034b0:	813b      	strh	r3, [r7, #8]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034b6:	f7ff fabb 	bl	8002a30 <HAL_GetTick>
 80034ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	f040 8208 	bne.w	80038da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	2319      	movs	r3, #25
 80034d0:	2201      	movs	r2, #1
 80034d2:	497b      	ldr	r1, [pc, #492]	; (80036c0 <HAL_I2C_Mem_Read+0x224>)
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fcb3 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
 80034e2:	e1fb      	b.n	80038dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_I2C_Mem_Read+0x56>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e1f4      	b.n	80038dc <HAL_I2C_Mem_Read+0x440>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d007      	beq.n	8003518 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003526:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2222      	movs	r2, #34	; 0x22
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2240      	movs	r2, #64	; 0x40
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a5b      	ldr	r2, [pc, #364]	; (80036c4 <HAL_I2C_Mem_Read+0x228>)
 8003558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800355a:	88f8      	ldrh	r0, [r7, #6]
 800355c:	893a      	ldrh	r2, [r7, #8]
 800355e:	8979      	ldrh	r1, [r7, #10]
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	4603      	mov	r3, r0
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fb80 	bl	8003c70 <I2C_RequestMemoryRead>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e1b0      	b.n	80038dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d113      	bne.n	80035aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003582:	2300      	movs	r3, #0
 8003584:	623b      	str	r3, [r7, #32]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	623b      	str	r3, [r7, #32]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e184      	b.n	80038b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d11b      	bne.n	80035ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e164      	b.n	80038b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d11b      	bne.n	800362a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003600:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003610:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	e144      	b.n	80038b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003640:	e138      	b.n	80038b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	2b03      	cmp	r3, #3
 8003648:	f200 80f1 	bhi.w	800382e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	2b01      	cmp	r3, #1
 8003652:	d123      	bne.n	800369c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003656:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fd49 	bl	80040f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e139      	b.n	80038dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	855a      	strh	r2, [r3, #42]	; 0x2a
 800369a:	e10b      	b.n	80038b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d14e      	bne.n	8003742 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036aa:	2200      	movs	r2, #0
 80036ac:	4906      	ldr	r1, [pc, #24]	; (80036c8 <HAL_I2C_Mem_Read+0x22c>)
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fbc6 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e10e      	b.n	80038dc <HAL_I2C_Mem_Read+0x440>
 80036be:	bf00      	nop
 80036c0:	00100002 	.word	0x00100002
 80036c4:	ffff0000 	.word	0xffff0000
 80036c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003740:	e0b8      	b.n	80038b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	2200      	movs	r2, #0
 800374a:	4966      	ldr	r1, [pc, #408]	; (80038e4 <HAL_I2C_Mem_Read+0x448>)
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fb77 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0bf      	b.n	80038dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	2200      	movs	r2, #0
 80037a6:	494f      	ldr	r1, [pc, #316]	; (80038e4 <HAL_I2C_Mem_Read+0x448>)
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fb49 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e091      	b.n	80038dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800382c:	e042      	b.n	80038b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003830:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fc5c 	bl	80040f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e04c      	b.n	80038dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b04      	cmp	r3, #4
 8003880:	d118      	bne.n	80038b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f47f aec2 	bne.w	8003642 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e000      	b.n	80038dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3728      	adds	r7, #40	; 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	00010004 	.word	0x00010004

080038e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	460b      	mov	r3, r1
 80038f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80038f8:	f7ff f89a 	bl	8002a30 <HAL_GetTick>
 80038fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b20      	cmp	r3, #32
 800390c:	f040 8111 	bne.w	8003b32 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	2319      	movs	r3, #25
 8003916:	2201      	movs	r2, #1
 8003918:	4988      	ldr	r1, [pc, #544]	; (8003b3c <HAL_I2C_IsDeviceReady+0x254>)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fa90 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003926:	2302      	movs	r3, #2
 8003928:	e104      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_I2C_IsDeviceReady+0x50>
 8003934:	2302      	movs	r3, #2
 8003936:	e0fd      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d007      	beq.n	800395e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2224      	movs	r2, #36	; 0x24
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a70      	ldr	r2, [pc, #448]	; (8003b40 <HAL_I2C_IsDeviceReady+0x258>)
 8003980:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003990:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2200      	movs	r2, #0
 800399a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fa4e 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b8:	d103      	bne.n	80039c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0b6      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039c6:	897b      	ldrh	r3, [r7, #10]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80039d6:	f7ff f82b 	bl	8002a30 <HAL_GetTick>
 80039da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a0a:	e025      	b.n	8003a58 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a0c:	f7ff f810 	bl	8002a30 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d302      	bcc.n	8003a22 <HAL_I2C_IsDeviceReady+0x13a>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	22a0      	movs	r2, #160	; 0xa0
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2ba0      	cmp	r3, #160	; 0xa0
 8003a62:	d005      	beq.n	8003a70 <HAL_I2C_IsDeviceReady+0x188>
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d102      	bne.n	8003a70 <HAL_I2C_IsDeviceReady+0x188>
 8003a6a:	7dbb      	ldrb	r3, [r7, #22]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0cd      	beq.n	8003a0c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d129      	bne.n	8003ada <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a94:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2319      	movs	r3, #25
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4921      	ldr	r1, [pc, #132]	; (8003b3c <HAL_I2C_IsDeviceReady+0x254>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f9c2 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e036      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e02c      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003af2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	490f      	ldr	r1, [pc, #60]	; (8003b3c <HAL_I2C_IsDeviceReady+0x254>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f99e 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e012      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	f4ff af32 	bcc.w	8003982 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	00100002 	.word	0x00100002
 8003b40:	ffff0000 	.word	0xffff0000

08003b44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	461a      	mov	r2, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	817b      	strh	r3, [r7, #10]
 8003b56:	460b      	mov	r3, r1
 8003b58:	813b      	strh	r3, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f960 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b94:	d103      	bne.n	8003b9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e05f      	b.n	8003c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ba2:	897b      	ldrh	r3, [r7, #10]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	6a3a      	ldr	r2, [r7, #32]
 8003bb6:	492d      	ldr	r1, [pc, #180]	; (8003c6c <I2C_RequestMemoryWrite+0x128>)
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f998 	bl	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e04c      	b.n	8003c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	6a39      	ldr	r1, [r7, #32]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fa02 	bl	8003fec <I2C_WaitOnTXEFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00d      	beq.n	8003c0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d107      	bne.n	8003c06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e02b      	b.n	8003c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c10:	893b      	ldrh	r3, [r7, #8]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	611a      	str	r2, [r3, #16]
 8003c1a:	e021      	b.n	8003c60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c1c:	893b      	ldrh	r3, [r7, #8]
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2c:	6a39      	ldr	r1, [r7, #32]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f9dc 	bl	8003fec <I2C_WaitOnTXEFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d107      	bne.n	8003c52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e005      	b.n	8003c62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c56:	893b      	ldrh	r3, [r7, #8]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	00010002 	.word	0x00010002

08003c70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	4608      	mov	r0, r1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	817b      	strh	r3, [r7, #10]
 8003c82:	460b      	mov	r3, r1
 8003c84:	813b      	strh	r3, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f8c2 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd0:	d103      	bne.n	8003cda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0aa      	b.n	8003e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cde:	897b      	ldrh	r3, [r7, #10]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	4952      	ldr	r1, [pc, #328]	; (8003e3c <I2C_RequestMemoryRead+0x1cc>)
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f8fa 	bl	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e097      	b.n	8003e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	6a39      	ldr	r1, [r7, #32]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f964 	bl	8003fec <I2C_WaitOnTXEFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d107      	bne.n	8003d42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e076      	b.n	8003e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d105      	bne.n	8003d58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d4c:	893b      	ldrh	r3, [r7, #8]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	611a      	str	r2, [r3, #16]
 8003d56:	e021      	b.n	8003d9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	6a39      	ldr	r1, [r7, #32]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f93e 	bl	8003fec <I2C_WaitOnTXEFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d107      	bne.n	8003d8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e050      	b.n	8003e34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d92:	893b      	ldrh	r3, [r7, #8]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9e:	6a39      	ldr	r1, [r7, #32]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f923 	bl	8003fec <I2C_WaitOnTXEFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00d      	beq.n	8003dc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d107      	bne.n	8003dc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e035      	b.n	8003e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f82b 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00d      	beq.n	8003e0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfe:	d103      	bne.n	8003e08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e013      	b.n	8003e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e0c:	897b      	ldrh	r3, [r7, #10]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	6a3a      	ldr	r2, [r7, #32]
 8003e20:	4906      	ldr	r1, [pc, #24]	; (8003e3c <I2C_RequestMemoryRead+0x1cc>)
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f863 	bl	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	00010002 	.word	0x00010002

08003e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e50:	e025      	b.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d021      	beq.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7fe fde9 	bl	8002a30 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d116      	bne.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f043 0220 	orr.w	r2, r3, #32
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e023      	b.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10d      	bne.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	e00c      	b.n	8003ede <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d0b6      	beq.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003efc:	e051      	b.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0c:	d123      	bne.n	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e046      	b.n	8003fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d021      	beq.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5e:	f7fe fd67 	bl	8002a30 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d302      	bcc.n	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d116      	bne.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f043 0220 	orr.w	r2, r3, #32
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e020      	b.n	8003fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10c      	bne.n	8003fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf14      	ite	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	2300      	moveq	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	e00b      	b.n	8003fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d18d      	bne.n	8003efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff8:	e02d      	b.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f8ce 	bl	800419c <I2C_IsAcknowledgeFailed>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e02d      	b.n	8004066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d021      	beq.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fe fd0d 	bl	8002a30 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d116      	bne.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e007      	b.n	8004066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b80      	cmp	r3, #128	; 0x80
 8004062:	d1ca      	bne.n	8003ffa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800407a:	e02d      	b.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f88d 	bl	800419c <I2C_IsAcknowledgeFailed>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e02d      	b.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d021      	beq.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004094:	f7fe fccc 	bl	8002a30 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d302      	bcc.n	80040aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d116      	bne.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e007      	b.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d1ca      	bne.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040fc:	e042      	b.n	8004184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b10      	cmp	r3, #16
 800410a:	d119      	bne.n	8004140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0210 	mvn.w	r2, #16
 8004114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e029      	b.n	8004194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004140:	f7fe fc76 	bl	8002a30 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	429a      	cmp	r2, r3
 800414e:	d302      	bcc.n	8004156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d116      	bne.n	8004184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e007      	b.n	8004194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d1b5      	bne.n	80040fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b2:	d11b      	bne.n	80041ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f043 0204 	orr.w	r2, r3, #4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e264      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d075      	beq.n	8004306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421a:	4ba3      	ldr	r3, [pc, #652]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b04      	cmp	r3, #4
 8004224:	d00c      	beq.n	8004240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004226:	4ba0      	ldr	r3, [pc, #640]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800422e:	2b08      	cmp	r3, #8
 8004230:	d112      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004232:	4b9d      	ldr	r3, [pc, #628]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800423e:	d10b      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	4b99      	ldr	r3, [pc, #612]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05b      	beq.n	8004304 <HAL_RCC_OscConfig+0x108>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d157      	bne.n	8004304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e23f      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d106      	bne.n	8004270 <HAL_RCC_OscConfig+0x74>
 8004262:	4b91      	ldr	r3, [pc, #580]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a90      	ldr	r2, [pc, #576]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x98>
 800427a:	4b8b      	ldr	r3, [pc, #556]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a8a      	ldr	r2, [pc, #552]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a87      	ldr	r2, [pc, #540]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004294:	4b84      	ldr	r3, [pc, #528]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a83      	ldr	r2, [pc, #524]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b81      	ldr	r3, [pc, #516]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a80      	ldr	r2, [pc, #512]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fe fbbc 	bl	8002a30 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fe fbb8 	bl	8002a30 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e204      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b76      	ldr	r3, [pc, #472]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0xc0>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fe fba8 	bl	8002a30 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe fba4 	bl	8002a30 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e1f0      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	4b6c      	ldr	r3, [pc, #432]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0xe8>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d063      	beq.n	80043da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004312:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11c      	bne.n	8004364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432a:	4b5f      	ldr	r3, [pc, #380]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d116      	bne.n	8004364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	4b5c      	ldr	r3, [pc, #368]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x152>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1c4      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b56      	ldr	r3, [pc, #344]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4952      	ldr	r1, [pc, #328]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	e03a      	b.n	80043da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d020      	beq.n	80043ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	4b4f      	ldr	r3, [pc, #316]	; (80044ac <HAL_RCC_OscConfig+0x2b0>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fe fb5d 	bl	8002a30 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800437a:	f7fe fb59 	bl	8002a30 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e1a5      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438c:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004398:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4940      	ldr	r1, [pc, #256]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]
 80043ac:	e015      	b.n	80043da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ae:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <HAL_RCC_OscConfig+0x2b0>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fe fb3c 	bl	8002a30 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043bc:	f7fe fb38 	bl	8002a30 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e184      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d030      	beq.n	8004448 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ee:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <HAL_RCC_OscConfig+0x2b4>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fe fb1c 	bl	8002a30 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fc:	f7fe fb18 	bl	8002a30 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e164      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x200>
 800441a:	e015      	b.n	8004448 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800441c:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCC_OscConfig+0x2b4>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004422:	f7fe fb05 	bl	8002a30 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442a:	f7fe fb01 	bl	8002a30 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e14d      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800443e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80a0 	beq.w	8004596 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10f      	bne.n	8004486 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004482:	2301      	movs	r3, #1
 8004484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_OscConfig+0x2b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d121      	bne.n	80044d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_RCC_OscConfig+0x2b8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <HAL_RCC_OscConfig+0x2b8>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449e:	f7fe fac7 	bl	8002a30 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	e011      	b.n	80044ca <HAL_RCC_OscConfig+0x2ce>
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	42470000 	.word	0x42470000
 80044b0:	42470e80 	.word	0x42470e80
 80044b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b8:	f7fe faba 	bl	8002a30 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e106      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	4b85      	ldr	r3, [pc, #532]	; (80046e0 <HAL_RCC_OscConfig+0x4e4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d106      	bne.n	80044ec <HAL_RCC_OscConfig+0x2f0>
 80044de:	4b81      	ldr	r3, [pc, #516]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a80      	ldr	r2, [pc, #512]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ea:	e01c      	b.n	8004526 <HAL_RCC_OscConfig+0x32a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d10c      	bne.n	800450e <HAL_RCC_OscConfig+0x312>
 80044f4:	4b7b      	ldr	r3, [pc, #492]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a7a      	ldr	r2, [pc, #488]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	4b78      	ldr	r3, [pc, #480]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a77      	ldr	r2, [pc, #476]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
 800450c:	e00b      	b.n	8004526 <HAL_RCC_OscConfig+0x32a>
 800450e:	4b75      	ldr	r3, [pc, #468]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a74      	ldr	r2, [pc, #464]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
 800451a:	4b72      	ldr	r3, [pc, #456]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a71      	ldr	r2, [pc, #452]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d015      	beq.n	800455a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fe fa7f 	bl	8002a30 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fe fa7b 	bl	8002a30 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0c5      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	4b65      	ldr	r3, [pc, #404]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ee      	beq.n	8004536 <HAL_RCC_OscConfig+0x33a>
 8004558:	e014      	b.n	8004584 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7fe fa69 	bl	8002a30 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fe fa65 	bl	8002a30 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0af      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004578:	4b5a      	ldr	r3, [pc, #360]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ee      	bne.n	8004562 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458a:	4b56      	ldr	r3, [pc, #344]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	4a55      	ldr	r2, [pc, #340]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 809b 	beq.w	80046d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a0:	4b50      	ldr	r3, [pc, #320]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d05c      	beq.n	8004666 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d141      	bne.n	8004638 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b4:	4b4c      	ldr	r3, [pc, #304]	; (80046e8 <HAL_RCC_OscConfig+0x4ec>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7fe fa39 	bl	8002a30 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fe fa35 	bl	8002a30 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e081      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d4:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	019b      	lsls	r3, r3, #6
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	3b01      	subs	r3, #1
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	061b      	lsls	r3, r3, #24
 8004604:	4937      	ldr	r1, [pc, #220]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800460a:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <HAL_RCC_OscConfig+0x4ec>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7fe fa0e 	bl	8002a30 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004618:	f7fe fa0a 	bl	8002a30 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e056      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462a:	4b2e      	ldr	r3, [pc, #184]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x41c>
 8004636:	e04e      	b.n	80046d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <HAL_RCC_OscConfig+0x4ec>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fe f9f7 	bl	8002a30 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe f9f3 	bl	8002a30 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e03f      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004658:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x44a>
 8004664:	e037      	b.n	80046d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e032      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d028      	beq.n	80046d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d121      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d11a      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046a2:	4013      	ands	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d111      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40007000 	.word	0x40007000
 80046e4:	40023800 	.word	0x40023800
 80046e8:	42470060 	.word	0x42470060

080046ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0cc      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004700:	4b68      	ldr	r3, [pc, #416]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d90c      	bls.n	8004728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b65      	ldr	r3, [pc, #404]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b63      	ldr	r3, [pc, #396]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0b8      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a58      	ldr	r2, [pc, #352]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800474a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004758:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a52      	ldr	r2, [pc, #328]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	494d      	ldr	r1, [pc, #308]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d044      	beq.n	800480c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b47      	ldr	r3, [pc, #284]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d119      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d003      	beq.n	80047aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047aa:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e06f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ba:	4b3b      	ldr	r3, [pc, #236]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e067      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ca:	4b37      	ldr	r3, [pc, #220]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f023 0203 	bic.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4934      	ldr	r1, [pc, #208]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047dc:	f7fe f928 	bl	8002a30 <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e4:	f7fe f924 	bl	8002a30 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e04f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fa:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 020c 	and.w	r2, r3, #12
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	429a      	cmp	r2, r3
 800480a:	d1eb      	bne.n	80047e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d20c      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4916      	ldr	r1, [pc, #88]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4602      	mov	r2, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	490a      	ldr	r1, [pc, #40]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 8004884:	5ccb      	ldrb	r3, [r1, r3]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe f888 	bl	80029a8 <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023c00 	.word	0x40023c00
 80048a8:	40023800 	.word	0x40023800
 80048ac:	08008eb0 	.word	0x08008eb0
 80048b0:	20000000 	.word	0x20000000
 80048b4:	20000004 	.word	0x20000004

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	2300      	movs	r3, #0
 80048ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d0:	4b67      	ldr	r3, [pc, #412]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d00d      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x40>
 80048dc:	2b08      	cmp	r3, #8
 80048de:	f200 80bd 	bhi.w	8004a5c <HAL_RCC_GetSysClockFreq+0x1a4>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x34>
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ea:	e0b7      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b61      	ldr	r3, [pc, #388]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048ee:	60bb      	str	r3, [r7, #8]
       break;
 80048f0:	e0b7      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f2:	4b61      	ldr	r3, [pc, #388]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80048f4:	60bb      	str	r3, [r7, #8]
      break;
 80048f6:	e0b4      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f8:	4b5d      	ldr	r3, [pc, #372]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004900:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004902:	4b5b      	ldr	r3, [pc, #364]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d04d      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	4b58      	ldr	r3, [pc, #352]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	461a      	mov	r2, r3
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800491e:	f04f 0100 	mov.w	r1, #0
 8004922:	ea02 0800 	and.w	r8, r2, r0
 8004926:	ea03 0901 	and.w	r9, r3, r1
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	014b      	lsls	r3, r1, #5
 8004938:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800493c:	0142      	lsls	r2, r0, #5
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	ebb0 0008 	subs.w	r0, r0, r8
 8004946:	eb61 0109 	sbc.w	r1, r1, r9
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	018b      	lsls	r3, r1, #6
 8004954:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004958:	0182      	lsls	r2, r0, #6
 800495a:	1a12      	subs	r2, r2, r0
 800495c:	eb63 0301 	sbc.w	r3, r3, r1
 8004960:	f04f 0000 	mov.w	r0, #0
 8004964:	f04f 0100 	mov.w	r1, #0
 8004968:	00d9      	lsls	r1, r3, #3
 800496a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800496e:	00d0      	lsls	r0, r2, #3
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	eb12 0208 	adds.w	r2, r2, r8
 8004978:	eb43 0309 	adc.w	r3, r3, r9
 800497c:	f04f 0000 	mov.w	r0, #0
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	0259      	lsls	r1, r3, #9
 8004986:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800498a:	0250      	lsls	r0, r2, #9
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	461a      	mov	r2, r3
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f7fb fc14 	bl	80001c8 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4613      	mov	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e04a      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	461a      	mov	r2, r3
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	ea02 0400 	and.w	r4, r2, r0
 80049c2:	ea03 0501 	and.w	r5, r3, r1
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	014b      	lsls	r3, r1, #5
 80049d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049d8:	0142      	lsls	r2, r0, #5
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	1b00      	subs	r0, r0, r4
 80049e0:	eb61 0105 	sbc.w	r1, r1, r5
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	018b      	lsls	r3, r1, #6
 80049ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049f2:	0182      	lsls	r2, r0, #6
 80049f4:	1a12      	subs	r2, r2, r0
 80049f6:	eb63 0301 	sbc.w	r3, r3, r1
 80049fa:	f04f 0000 	mov.w	r0, #0
 80049fe:	f04f 0100 	mov.w	r1, #0
 8004a02:	00d9      	lsls	r1, r3, #3
 8004a04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a08:	00d0      	lsls	r0, r2, #3
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	1912      	adds	r2, r2, r4
 8004a10:	eb45 0303 	adc.w	r3, r5, r3
 8004a14:	f04f 0000 	mov.w	r0, #0
 8004a18:	f04f 0100 	mov.w	r1, #0
 8004a1c:	0299      	lsls	r1, r3, #10
 8004a1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a22:	0290      	lsls	r0, r2, #10
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	f7fb fbc8 	bl	80001c8 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	60bb      	str	r3, [r7, #8]
      break;
 8004a5a:	e002      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a5e:	60bb      	str	r3, [r7, #8]
      break;
 8004a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a62:	68bb      	ldr	r3, [r7, #8]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	00f42400 	.word	0x00f42400
 8004a78:	007a1200 	.word	0x007a1200

08004a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000000 	.word	0x20000000

08004a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a98:	f7ff fff0 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	0a9b      	lsrs	r3, r3, #10
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	4903      	ldr	r1, [pc, #12]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	08008ec0 	.word	0x08008ec0

08004abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e07b      	b.n	8004bc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d108      	bne.n	8004ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ade:	d009      	beq.n	8004af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	61da      	str	r2, [r3, #28]
 8004ae6:	e005      	b.n	8004af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fd fd98 	bl	8002644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b78:	ea42 0103 	orr.w	r1, r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	f003 0104 	and.w	r1, r3, #4
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	f003 0210 	and.w	r2, r3, #16
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b088      	sub	sp, #32
 8004bd2:	af02      	add	r7, sp, #8
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	603b      	str	r3, [r7, #0]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bea:	d112      	bne.n	8004c12 <HAL_SPI_Receive+0x44>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10e      	bne.n	8004c12 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	4613      	mov	r3, r2
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f8f1 	bl	8004df0 <HAL_SPI_TransmitReceive>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	e0ea      	b.n	8004de8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_SPI_Receive+0x52>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e0e3      	b.n	8004de8 <HAL_SPI_Receive+0x21a>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c28:	f7fd ff02 	bl	8002a30 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c3e:	e0ca      	b.n	8004dd6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_Receive+0x7e>
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c50:	e0c1      	b.n	8004dd6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2204      	movs	r2, #4
 8004c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	88fa      	ldrh	r2, [r7, #6]
 8004c6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c98:	d10f      	bne.n	8004cba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cb8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d007      	beq.n	8004cd8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d162      	bne.n	8004da6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ce0:	e02e      	b.n	8004d40 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d115      	bne.n	8004d1c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f103 020c 	add.w	r2, r3, #12
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d1a:	e011      	b.n	8004d40 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d1c:	f7fd fe88 	bl	8002a30 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d803      	bhi.n	8004d34 <HAL_SPI_Receive+0x166>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d102      	bne.n	8004d3a <HAL_SPI_Receive+0x16c>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d3e:	e04a      	b.n	8004dd6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1cb      	bne.n	8004ce2 <HAL_SPI_Receive+0x114>
 8004d4a:	e031      	b.n	8004db0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d113      	bne.n	8004d82 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	b292      	uxth	r2, r2
 8004d66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	1c9a      	adds	r2, r3, #2
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d80:	e011      	b.n	8004da6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d82:	f7fd fe55 	bl	8002a30 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d803      	bhi.n	8004d9a <HAL_SPI_Receive+0x1cc>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d102      	bne.n	8004da0 <HAL_SPI_Receive+0x1d2>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004da4:	e017      	b.n	8004dd6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1cd      	bne.n	8004d4c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fa45 	bl	8005244 <SPI_EndRxTransaction>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	75fb      	strb	r3, [r7, #23]
 8004dd2:	e000      	b.n	8004dd6 <HAL_SPI_Receive+0x208>
  }

error :
 8004dd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08c      	sub	sp, #48	; 0x30
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_SPI_TransmitReceive+0x26>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e18a      	b.n	800512c <HAL_SPI_TransmitReceive+0x33c>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e1e:	f7fd fe07 	bl	8002a30 <HAL_GetTick>
 8004e22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e34:	887b      	ldrh	r3, [r7, #2]
 8004e36:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d00f      	beq.n	8004e60 <HAL_SPI_TransmitReceive+0x70>
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e46:	d107      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d103      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x68>
 8004e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d003      	beq.n	8004e60 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e5e:	e15b      	b.n	8005118 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_SPI_TransmitReceive+0x82>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_SPI_TransmitReceive+0x82>
 8004e6c:	887b      	ldrh	r3, [r7, #2]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d103      	bne.n	8004e7a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e78:	e14e      	b.n	8005118 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d003      	beq.n	8004e8e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2205      	movs	r2, #5
 8004e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	887a      	ldrh	r2, [r7, #2]
 8004e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	887a      	ldrh	r2, [r7, #2]
 8004ea4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	887a      	ldrh	r2, [r7, #2]
 8004eb0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	887a      	ldrh	r2, [r7, #2]
 8004eb6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d007      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ee0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eea:	d178      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_SPI_TransmitReceive+0x10a>
 8004ef4:	8b7b      	ldrh	r3, [r7, #26]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d166      	bne.n	8004fc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	881a      	ldrh	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	1c9a      	adds	r2, r3, #2
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f1e:	e053      	b.n	8004fc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d11b      	bne.n	8004f66 <HAL_SPI_TransmitReceive+0x176>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d016      	beq.n	8004f66 <HAL_SPI_TransmitReceive+0x176>
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d113      	bne.n	8004f66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	881a      	ldrh	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	1c9a      	adds	r2, r3, #2
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d119      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x1b8>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d014      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	b292      	uxth	r2, r2
 8004f8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	1c9a      	adds	r2, r3, #2
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fa8:	f7fd fd42 	bl	8002a30 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d807      	bhi.n	8004fc8 <HAL_SPI_TransmitReceive+0x1d8>
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d003      	beq.n	8004fc8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fc6:	e0a7      	b.n	8005118 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1a6      	bne.n	8004f20 <HAL_SPI_TransmitReceive+0x130>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1a1      	bne.n	8004f20 <HAL_SPI_TransmitReceive+0x130>
 8004fdc:	e07c      	b.n	80050d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x1fc>
 8004fe6:	8b7b      	ldrh	r3, [r7, #26]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d16b      	bne.n	80050c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	7812      	ldrb	r2, [r2, #0]
 8004ff8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005012:	e057      	b.n	80050c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b02      	cmp	r3, #2
 8005020:	d11c      	bne.n	800505c <HAL_SPI_TransmitReceive+0x26c>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d017      	beq.n	800505c <HAL_SPI_TransmitReceive+0x26c>
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	2b01      	cmp	r3, #1
 8005030:	d114      	bne.n	800505c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	330c      	adds	r3, #12
 800503c:	7812      	ldrb	r2, [r2, #0]
 800503e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d119      	bne.n	800509e <HAL_SPI_TransmitReceive+0x2ae>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d014      	beq.n	800509e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800509a:	2301      	movs	r3, #1
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800509e:	f7fd fcc7 	bl	8002a30 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d803      	bhi.n	80050b6 <HAL_SPI_TransmitReceive+0x2c6>
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d102      	bne.n	80050bc <HAL_SPI_TransmitReceive+0x2cc>
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050c2:	e029      	b.n	8005118 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1a2      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x224>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d19d      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f917 	bl	8005310 <SPI_EndRxTxTransaction>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d006      	beq.n	80050f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050f4:	e010      	b.n	8005118 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10b      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	e000      	b.n	8005118 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005116:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005128:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800512c:	4618      	mov	r0, r3
 800512e:	3730      	adds	r7, #48	; 0x30
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005144:	f7fd fc74 	bl	8002a30 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	4413      	add	r3, r2
 8005152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005154:	f7fd fc6c 	bl	8002a30 <HAL_GetTick>
 8005158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800515a:	4b39      	ldr	r3, [pc, #228]	; (8005240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	015b      	lsls	r3, r3, #5
 8005160:	0d1b      	lsrs	r3, r3, #20
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800516a:	e054      	b.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d050      	beq.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005174:	f7fd fc5c 	bl	8002a30 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	429a      	cmp	r2, r3
 8005182:	d902      	bls.n	800518a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d13d      	bne.n	8005206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a2:	d111      	bne.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ac:	d004      	beq.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b6:	d107      	bne.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d0:	d10f      	bne.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e017      	b.n	8005236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3b01      	subs	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4013      	ands	r3, r2
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	429a      	cmp	r2, r3
 8005232:	d19b      	bne.n	800516c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000000 	.word	0x20000000

08005244 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005258:	d111      	bne.n	800527e <SPI_EndRxTransaction+0x3a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005262:	d004      	beq.n	800526e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526c:	d107      	bne.n	800527e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800527c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005286:	d12a      	bne.n	80052de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005290:	d012      	beq.n	80052b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2200      	movs	r2, #0
 800529a:	2180      	movs	r1, #128	; 0x80
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ff49 	bl	8005134 <SPI_WaitFlagStateUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d02d      	beq.n	8005304 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e026      	b.n	8005306 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2200      	movs	r2, #0
 80052c0:	2101      	movs	r1, #1
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f7ff ff36 	bl	8005134 <SPI_WaitFlagStateUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01a      	beq.n	8005304 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	f043 0220 	orr.w	r2, r3, #32
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e013      	b.n	8005306 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	2101      	movs	r1, #1
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff ff23 	bl	8005134 <SPI_WaitFlagStateUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e000      	b.n	8005306 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <SPI_EndRxTxTransaction+0x7c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <SPI_EndRxTxTransaction+0x80>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	0d5b      	lsrs	r3, r3, #21
 8005328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800532c:	fb02 f303 	mul.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533a:	d112      	bne.n	8005362 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2200      	movs	r2, #0
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff fef4 	bl	8005134 <SPI_WaitFlagStateUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d016      	beq.n	8005380 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e00f      	b.n	8005382 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	3b01      	subs	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d0f2      	beq.n	8005362 <SPI_EndRxTxTransaction+0x52>
 800537c:	e000      	b.n	8005380 <SPI_EndRxTxTransaction+0x70>
        break;
 800537e:	bf00      	nop
  }

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000000 	.word	0x20000000
 8005390:	165e9f81 	.word	0x165e9f81

08005394 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e034      	b.n	8005414 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f7fc f960 	bl	8001684 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3308      	adds	r3, #8
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f000 fca6 	bl	8005d20 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	461a      	mov	r2, r3
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	f000 fcf0 	bl	8005dc4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6858      	ldr	r0, [r3, #4]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	f000 fd25 	bl	8005e40 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	6892      	ldr	r2, [r2, #8]
 80053fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	6892      	ldr	r2, [r2, #8]
 800540a:	f041 0101 	orr.w	r1, r1, #1
 800540e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e041      	b.n	80054b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fd fa00 	bl	8002848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f000 fa96 	bl	800598c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d001      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e04e      	b.n	8005572 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a23      	ldr	r2, [pc, #140]	; (8005580 <HAL_TIM_Base_Start_IT+0xc4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fe:	d01d      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <HAL_TIM_Base_Start_IT+0xc8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <HAL_TIM_Base_Start_IT+0xcc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1c      	ldr	r2, [pc, #112]	; (800558c <HAL_TIM_Base_Start_IT+0xd0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1b      	ldr	r2, [pc, #108]	; (8005590 <HAL_TIM_Base_Start_IT+0xd4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a19      	ldr	r2, [pc, #100]	; (8005594 <HAL_TIM_Base_Start_IT+0xd8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x80>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a18      	ldr	r2, [pc, #96]	; (8005598 <HAL_TIM_Base_Start_IT+0xdc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d111      	bne.n	8005560 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b06      	cmp	r3, #6
 800554c:	d010      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555e:	e007      	b.n	8005570 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40010400 	.word	0x40010400
 8005594:	40014000 	.word	0x40014000
 8005598:	40001800 	.word	0x40001800

0800559c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d122      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d11b      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0202 	mvn.w	r2, #2
 80055c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f9b5 	bl	800594e <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f9a7 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f9b8 	bl	8005962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b04      	cmp	r3, #4
 8005604:	d122      	bne.n	800564c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b04      	cmp	r3, #4
 8005612:	d11b      	bne.n	800564c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0204 	mvn.w	r2, #4
 800561c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f98b 	bl	800594e <HAL_TIM_IC_CaptureCallback>
 8005638:	e005      	b.n	8005646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f97d 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f98e 	bl	8005962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b08      	cmp	r3, #8
 8005658:	d122      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b08      	cmp	r3, #8
 8005666:	d11b      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0208 	mvn.w	r2, #8
 8005670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2204      	movs	r2, #4
 8005676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f961 	bl	800594e <HAL_TIM_IC_CaptureCallback>
 800568c:	e005      	b.n	800569a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f953 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f964 	bl	8005962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0210 	mvn.w	r2, #16
 80056c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2208      	movs	r2, #8
 80056ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f937 	bl	800594e <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f929 	bl	800593a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f93a 	bl	8005962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d10e      	bne.n	8005720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b01      	cmp	r3, #1
 800570e:	d107      	bne.n	8005720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0201 	mvn.w	r2, #1
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fc ff16 	bl	800254c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b80      	cmp	r3, #128	; 0x80
 800572c:	d10e      	bne.n	800574c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005738:	2b80      	cmp	r3, #128	; 0x80
 800573a:	d107      	bne.n	800574c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fae0 	bl	8005d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d10e      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	d107      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f8ff 	bl	8005976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b20      	cmp	r3, #32
 8005784:	d10e      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b20      	cmp	r3, #32
 8005792:	d107      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0220 	mvn.w	r2, #32
 800579c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 faaa 	bl	8005cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057a4:	bf00      	nop
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_TIM_ConfigClockSource+0x1c>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e0b4      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x186>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005800:	d03e      	beq.n	8005880 <HAL_TIM_ConfigClockSource+0xd4>
 8005802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005806:	f200 8087 	bhi.w	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580e:	f000 8086 	beq.w	800591e <HAL_TIM_ConfigClockSource+0x172>
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005816:	d87f      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b70      	cmp	r3, #112	; 0x70
 800581a:	d01a      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0xa6>
 800581c:	2b70      	cmp	r3, #112	; 0x70
 800581e:	d87b      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b60      	cmp	r3, #96	; 0x60
 8005822:	d050      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005824:	2b60      	cmp	r3, #96	; 0x60
 8005826:	d877      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b50      	cmp	r3, #80	; 0x50
 800582a:	d03c      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0xfa>
 800582c:	2b50      	cmp	r3, #80	; 0x50
 800582e:	d873      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d058      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d86f      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b30      	cmp	r3, #48	; 0x30
 800583a:	d064      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 800583c:	2b30      	cmp	r3, #48	; 0x30
 800583e:	d86b      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d060      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 8005844:	2b20      	cmp	r3, #32
 8005846:	d867      	bhi.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d05c      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	2b10      	cmp	r3, #16
 800584e:	d05a      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x15a>
 8005850:	e062      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6899      	ldr	r1, [r3, #8]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f000 f9ad 	bl	8005bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	609a      	str	r2, [r3, #8]
      break;
 800587e:	e04f      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	6899      	ldr	r1, [r3, #8]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f000 f996 	bl	8005bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058a2:	609a      	str	r2, [r3, #8]
      break;
 80058a4:	e03c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6859      	ldr	r1, [r3, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f000 f90a 	bl	8005acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2150      	movs	r1, #80	; 0x50
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f963 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 80058c4:	e02c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6859      	ldr	r1, [r3, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f000 f929 	bl	8005b2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2160      	movs	r1, #96	; 0x60
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 f953 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 80058e4:	e01c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6859      	ldr	r1, [r3, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f000 f8ea 	bl	8005acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2140      	movs	r1, #64	; 0x40
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f943 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005904:	e00c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4619      	mov	r1, r3
 8005910:	4610      	mov	r0, r2
 8005912:	f000 f93a 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005916:	e003      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
      break;
 800591c:	e000      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800591e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a40      	ldr	r2, [pc, #256]	; (8005aa0 <TIM_Base_SetConfig+0x114>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059aa:	d00f      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a3d      	ldr	r2, [pc, #244]	; (8005aa4 <TIM_Base_SetConfig+0x118>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00b      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a3c      	ldr	r2, [pc, #240]	; (8005aa8 <TIM_Base_SetConfig+0x11c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a3b      	ldr	r2, [pc, #236]	; (8005aac <TIM_Base_SetConfig+0x120>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a3a      	ldr	r2, [pc, #232]	; (8005ab0 <TIM_Base_SetConfig+0x124>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d108      	bne.n	80059de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2f      	ldr	r2, [pc, #188]	; (8005aa0 <TIM_Base_SetConfig+0x114>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d02b      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d027      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2c      	ldr	r2, [pc, #176]	; (8005aa4 <TIM_Base_SetConfig+0x118>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d023      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <TIM_Base_SetConfig+0x11c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01f      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <TIM_Base_SetConfig+0x120>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01b      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a29      	ldr	r2, [pc, #164]	; (8005ab0 <TIM_Base_SetConfig+0x124>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d017      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a28      	ldr	r2, [pc, #160]	; (8005ab4 <TIM_Base_SetConfig+0x128>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a27      	ldr	r2, [pc, #156]	; (8005ab8 <TIM_Base_SetConfig+0x12c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00f      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a26      	ldr	r2, [pc, #152]	; (8005abc <TIM_Base_SetConfig+0x130>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00b      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a25      	ldr	r2, [pc, #148]	; (8005ac0 <TIM_Base_SetConfig+0x134>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a24      	ldr	r2, [pc, #144]	; (8005ac4 <TIM_Base_SetConfig+0x138>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a23      	ldr	r2, [pc, #140]	; (8005ac8 <TIM_Base_SetConfig+0x13c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d108      	bne.n	8005a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <TIM_Base_SetConfig+0x114>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_Base_SetConfig+0xf8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <TIM_Base_SetConfig+0x124>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d103      	bne.n	8005a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	615a      	str	r2, [r3, #20]
}
 8005a92:	bf00      	nop
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40010400 	.word	0x40010400
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	40014400 	.word	0x40014400
 8005abc:	40014800 	.word	0x40014800
 8005ac0:	40001800 	.word	0x40001800
 8005ac4:	40001c00 	.word	0x40001c00
 8005ac8:	40002000 	.word	0x40002000

08005acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f023 0201 	bic.w	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f023 030a 	bic.w	r3, r3, #10
 8005b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b087      	sub	sp, #28
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0210 	bic.w	r2, r3, #16
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	031b      	lsls	r3, r3, #12
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f043 0307 	orr.w	r3, r3, #7
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	609a      	str	r2, [r3, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	021a      	lsls	r2, r3, #8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	609a      	str	r2, [r3, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e05a      	b.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a21      	ldr	r2, [pc, #132]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d022      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c64:	d01d      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d018      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1b      	ldr	r2, [pc, #108]	; (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a18      	ldr	r2, [pc, #96]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a17      	ldr	r2, [pc, #92]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d10c      	bne.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00
 8005cec:	40010400 	.word	0x40010400
 8005cf0:	40014000 	.word	0x40014000
 8005cf4:	40001800 	.word	0x40001800

08005cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d38:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4b20      	ldr	r3, [pc, #128]	; (8005dc0 <FSMC_NORSRAM_Init+0xa0>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d4a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005d50:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005d56:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005d5c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005d62:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005d68:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005d6e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005d74:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005d7a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005d80:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005d86:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005d8c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d103      	bne.n	8005da4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	fff00080 	.word	0xfff00080

08005dc4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dde:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005de6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005df2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005dfa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005e02:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e0c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	3b02      	subs	r3, #2
 8005e14:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005e16:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6979      	ldr	r1, [r7, #20]
 8005e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e58:	d122      	bne.n	8005ea0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e62:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e76:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005e7e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005e86:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e8c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6979      	ldr	r1, [r7, #20]
 8005e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005e9e:	e005      	b.n	8005eac <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	cff00000 	.word	0xcff00000

08005ec0 <__libc_init_array>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	4d0d      	ldr	r5, [pc, #52]	; (8005ef8 <__libc_init_array+0x38>)
 8005ec4:	4c0d      	ldr	r4, [pc, #52]	; (8005efc <__libc_init_array+0x3c>)
 8005ec6:	1b64      	subs	r4, r4, r5
 8005ec8:	10a4      	asrs	r4, r4, #2
 8005eca:	2600      	movs	r6, #0
 8005ecc:	42a6      	cmp	r6, r4
 8005ece:	d109      	bne.n	8005ee4 <__libc_init_array+0x24>
 8005ed0:	4d0b      	ldr	r5, [pc, #44]	; (8005f00 <__libc_init_array+0x40>)
 8005ed2:	4c0c      	ldr	r4, [pc, #48]	; (8005f04 <__libc_init_array+0x44>)
 8005ed4:	f000 f820 	bl	8005f18 <_init>
 8005ed8:	1b64      	subs	r4, r4, r5
 8005eda:	10a4      	asrs	r4, r4, #2
 8005edc:	2600      	movs	r6, #0
 8005ede:	42a6      	cmp	r6, r4
 8005ee0:	d105      	bne.n	8005eee <__libc_init_array+0x2e>
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee8:	4798      	blx	r3
 8005eea:	3601      	adds	r6, #1
 8005eec:	e7ee      	b.n	8005ecc <__libc_init_array+0xc>
 8005eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef2:	4798      	blx	r3
 8005ef4:	3601      	adds	r6, #1
 8005ef6:	e7f2      	b.n	8005ede <__libc_init_array+0x1e>
 8005ef8:	08008ed0 	.word	0x08008ed0
 8005efc:	08008ed0 	.word	0x08008ed0
 8005f00:	08008ed0 	.word	0x08008ed0
 8005f04:	08008ed4 	.word	0x08008ed4

08005f08 <memset>:
 8005f08:	4402      	add	r2, r0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d100      	bne.n	8005f12 <memset+0xa>
 8005f10:	4770      	bx	lr
 8005f12:	f803 1b01 	strb.w	r1, [r3], #1
 8005f16:	e7f9      	b.n	8005f0c <memset+0x4>

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
