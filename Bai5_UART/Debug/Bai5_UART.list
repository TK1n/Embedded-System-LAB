
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000819c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003128  0800832c  0800832c  0001832c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b454  0800b454  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b454  0800b454  0001b454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b45c  0800b45c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b45c  0800b45c  0001b45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b460  0800b460  0001b460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000002e4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  20000360  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d70f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dcd  00000000  00000000  0003d7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00041588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  00042b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024829  00000000  00000000  00043f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c6fb  00000000  00000000  00068761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d371b  00000000  00000000  00084e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00158577  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d40  00000000  00000000  001585cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008314 	.word	0x08008314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08008314 	.word	0x08008314

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <button_init>:

uint16_t button_count[16];
uint16_t button_flag[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	2108      	movs	r1, #8
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <button_init+0x14>)
 80005a2:	f003 f9d5 	bl	8003950 <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40020c00 	.word	0x40020c00

080005b0 <button_Scan>:

void button_Scan(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2108      	movs	r1, #8
 80005ba:	4834      	ldr	r0, [pc, #208]	; (800068c <button_Scan+0xdc>)
 80005bc:	f003 f9c8 	bl	8003950 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2108      	movs	r1, #8
 80005c4:	4831      	ldr	r0, [pc, #196]	; (800068c <button_Scan+0xdc>)
 80005c6:	f003 f9c3 	bl	8003950 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005ca:	230a      	movs	r3, #10
 80005cc:	2202      	movs	r2, #2
 80005ce:	4930      	ldr	r1, [pc, #192]	; (8000690 <button_Scan+0xe0>)
 80005d0:	4830      	ldr	r0, [pc, #192]	; (8000694 <button_Scan+0xe4>)
 80005d2:	f005 f8fe 	bl	80057d2 <HAL_SPI_Receive>
	  int button_index = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005de:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	e04a      	b.n	800067c <button_Scan+0xcc>
		  if(i >= 0 && i <= 3){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db06      	blt.n	80005fa <button_Scan+0x4a>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	dc03      	bgt.n	80005fa <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3304      	adds	r3, #4
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	e018      	b.n	800062c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	dd07      	ble.n	8000610 <button_Scan+0x60>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b07      	cmp	r3, #7
 8000604:	dc04      	bgt.n	8000610 <button_Scan+0x60>
			  button_index = 7 - i;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f1c3 0307 	rsb	r3, r3, #7
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e00d      	b.n	800062c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b07      	cmp	r3, #7
 8000614:	dd06      	ble.n	8000624 <button_Scan+0x74>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b0b      	cmp	r3, #11
 800061a:	dc03      	bgt.n	8000624 <button_Scan+0x74>
			  button_index = i + 4;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3304      	adds	r3, #4
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e003      	b.n	800062c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f1c3 0317 	rsb	r3, r3, #23
 800062a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <button_Scan+0xe0>)
 800062e:	881a      	ldrh	r2, [r3, #0]
 8000630:	897b      	ldrh	r3, [r7, #10]
 8000632:	4013      	ands	r3, r2
 8000634:	b29b      	uxth	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d005      	beq.n	8000646 <button_Scan+0x96>
 800063a:	4a17      	ldr	r2, [pc, #92]	; (8000698 <button_Scan+0xe8>)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2100      	movs	r1, #0
 8000640:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000644:	e009      	b.n	800065a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <button_Scan+0xe8>)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064e:	3301      	adds	r3, #1
 8000650:	b299      	uxth	r1, r3
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <button_Scan+0xe8>)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  if (button_count[button_index] >= 1)
 800065a:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <button_Scan+0xe8>)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d004      	beq.n	8000670 <button_Scan+0xc0>
		  {
			  button_flag[button_index] = 1;
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <button_Scan+0xec>)
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2101      	movs	r1, #1
 800066c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  }
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000670:	897b      	ldrh	r3, [r7, #10]
 8000672:	085b      	lsrs	r3, r3, #1
 8000674:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3301      	adds	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b0f      	cmp	r3, #15
 8000680:	ddb1      	ble.n	80005e6 <button_Scan+0x36>
	  }
}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020c00 	.word	0x40020c00
 8000690:	20000098 	.word	0x20000098
 8000694:	20000200 	.word	0x20000200
 8000698:	200000c8 	.word	0x200000c8
 800069c:	200000e8 	.word	0x200000e8

080006a0 <ds3231_init>:
uint8_t ds3231_month;
uint8_t ds3231_year;
uint8_t state = IDLE;
uint8_t cnt = 3*200;

void ds3231_init(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	state = 10;
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <ds3231_init+0x84>)
 80006a6:	220a      	movs	r2, #10
 80006a8:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[0] = DEC2BCD(30); //second
 80006aa:	201e      	movs	r0, #30
 80006ac:	f002 fd2c 	bl	8003108 <DEC2BCD>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <ds3231_init+0x88>)
 80006b6:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80006b8:	2016      	movs	r0, #22
 80006ba:	f002 fd25 	bl	8003108 <DEC2BCD>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <ds3231_init+0x88>)
 80006c4:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80006c6:	2015      	movs	r0, #21
 80006c8:	f002 fd1e 	bl	8003108 <DEC2BCD>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <ds3231_init+0x88>)
 80006d2:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80006d4:	2006      	movs	r0, #6
 80006d6:	f002 fd17 	bl	8003108 <DEC2BCD>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <ds3231_init+0x88>)
 80006e0:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80006e2:	200f      	movs	r0, #15
 80006e4:	f002 fd10 	bl	8003108 <DEC2BCD>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <ds3231_init+0x88>)
 80006ee:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80006f0:	2009      	movs	r0, #9
 80006f2:	f002 fd09 	bl	8003108 <DEC2BCD>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <ds3231_init+0x88>)
 80006fc:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80006fe:	2017      	movs	r0, #23
 8000700:	f002 fd02 	bl	8003108 <DEC2BCD>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <ds3231_init+0x88>)
 800070a:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 800070c:	2332      	movs	r3, #50	; 0x32
 800070e:	2203      	movs	r2, #3
 8000710:	21d0      	movs	r1, #208	; 0xd0
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <ds3231_init+0x8c>)
 8000714:	f003 fd9a 	bl	800424c <HAL_I2C_IsDeviceReady>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d000      	beq.n	8000720 <ds3231_init+0x80>
		while(1);
 800071e:	e7fe      	b.n	800071e <ds3231_init+0x7e>
	};
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000110 	.word	0x20000110
 800072c:	20000168 	.word	0x20000168

08000730 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af04      	add	r7, sp, #16
 8000736:	4603      	mov	r3, r0
 8000738:	460a      	mov	r2, r1
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fce0 	bl	8003108 <DEC2BCD>
 8000748:	4603      	mov	r3, r0
 800074a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	b29a      	uxth	r2, r3
 8000750:	230a      	movs	r3, #10
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	f107 030f 	add.w	r3, r7, #15
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2301      	movs	r3, #1
 8000760:	21d0      	movs	r1, #208	; 0xd0
 8000762:	4803      	ldr	r0, [pc, #12]	; (8000770 <ds3231_Write+0x40>)
 8000764:	f003 fa52 	bl	8003c0c <HAL_I2C_Mem_Write>
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000168 	.word	0x20000168

08000774 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800077a:	230a      	movs	r3, #10
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2307      	movs	r3, #7
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <ds3231_ReadTime+0xa4>)
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	2200      	movs	r2, #0
 800078a:	21d0      	movs	r1, #208	; 0xd0
 800078c:	4823      	ldr	r0, [pc, #140]	; (800081c <ds3231_ReadTime+0xa8>)
 800078e:	f003 fb37 	bl	8003e00 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <ds3231_ReadTime+0xa4>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fc9c 	bl	80030d4 <BCD2DEC>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <ds3231_ReadTime+0xac>)
 80007a2:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <ds3231_ReadTime+0xa4>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fc93 	bl	80030d4 <BCD2DEC>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <ds3231_ReadTime+0xb0>)
 80007b4:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <ds3231_ReadTime+0xa4>)
 80007b8:	789b      	ldrb	r3, [r3, #2]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fc8a 	bl	80030d4 <BCD2DEC>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <ds3231_ReadTime+0xb4>)
 80007c6:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <ds3231_ReadTime+0xa4>)
 80007ca:	78db      	ldrb	r3, [r3, #3]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fc81 	bl	80030d4 <BCD2DEC>
 80007d2:	4603      	mov	r3, r0
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <ds3231_ReadTime+0xb8>)
 80007d8:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <ds3231_ReadTime+0xa4>)
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fc78 	bl	80030d4 <BCD2DEC>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <ds3231_ReadTime+0xbc>)
 80007ea:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <ds3231_ReadTime+0xa4>)
 80007ee:	795b      	ldrb	r3, [r3, #5]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fc6f 	bl	80030d4 <BCD2DEC>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <ds3231_ReadTime+0xc0>)
 80007fc:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <ds3231_ReadTime+0xa4>)
 8000800:	799b      	ldrb	r3, [r3, #6]
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fc66 	bl	80030d4 <BCD2DEC>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <ds3231_ReadTime+0xc4>)
 800080e:	701a      	strb	r2, [r3, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000110 	.word	0x20000110
 800081c:	20000168 	.word	0x20000168
 8000820:	20000108 	.word	0x20000108
 8000824:	2000010a 	.word	0x2000010a
 8000828:	2000010d 	.word	0x2000010d
 800082c:	2000010c 	.word	0x2000010c
 8000830:	2000010b 	.word	0x2000010b
 8000834:	2000010e 	.word	0x2000010e
 8000838:	20000109 	.word	0x20000109

0800083c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	; 0x38
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
 8000866:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000868:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <MX_FSMC_Init+0xec>)
 800086a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800086e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000870:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <MX_FSMC_Init+0xec>)
 8000872:	4a2e      	ldr	r2, [pc, #184]	; (800092c <MX_FSMC_Init+0xf0>)
 8000874:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000876:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_FSMC_Init+0xec>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_FSMC_Init+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_FSMC_Init+0xec>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <MX_FSMC_Init+0xec>)
 800088a:	2210      	movs	r2, #16
 800088c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_FSMC_Init+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_FSMC_Init+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_FSMC_Init+0xec>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_FSMC_Init+0xec>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_FSMC_Init+0xec>)
 80008a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_FSMC_Init+0xec>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_FSMC_Init+0xec>)
 80008b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_FSMC_Init+0xec>)
 80008be:	2200      	movs	r2, #0
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_FSMC_Init+0xec>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_FSMC_Init+0xec>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80008ce:	230f      	movs	r3, #15
 80008d0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80008d2:	230f      	movs	r3, #15
 80008d4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80008d6:	233c      	movs	r3, #60	; 0x3c
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80008de:	2310      	movs	r3, #16
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80008e2:	2311      	movs	r3, #17
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80008ea:	2308      	movs	r3, #8
 80008ec:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80008ee:	230f      	movs	r3, #15
 80008f0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008f2:	2309      	movs	r3, #9
 80008f4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008fa:	2310      	movs	r3, #16
 80008fc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008fe:	2311      	movs	r3, #17
 8000900:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000906:	463a      	mov	r2, r7
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <MX_FSMC_Init+0xec>)
 8000910:	f005 fb42 	bl	8005f98 <HAL_SRAM_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800091a:	f002 f8ff 	bl	8002b1c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800091e:	bf00      	nop
 8000920:	3738      	adds	r7, #56	; 0x38
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000118 	.word	0x20000118
 800092c:	a0000104 	.word	0xa0000104

08000930 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_FSMC_MspInit+0x88>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d131      	bne.n	80009b0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HAL_FSMC_MspInit+0x88>)
 800094e:	2201      	movs	r2, #1
 8000950:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_FSMC_MspInit+0x8c>)
 8000958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <HAL_FSMC_MspInit+0x8c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6393      	str	r3, [r2, #56]	; 0x38
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_FSMC_MspInit+0x8c>)
 8000964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800096e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000972:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000980:	230c      	movs	r3, #12
 8000982:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4619      	mov	r1, r3
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <HAL_FSMC_MspInit+0x90>)
 800098a:	f002 fe45 	bl	8003618 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800098e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000992:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80009a0:	230c      	movs	r3, #12
 80009a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <HAL_FSMC_MspInit+0x94>)
 80009aa:	f002 fe35 	bl	8003618 <HAL_GPIO_Init>
 80009ae:	e000      	b.n	80009b2 <HAL_FSMC_MspInit+0x82>
    return;
 80009b0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000009c 	.word	0x2000009c
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020c00 	.word	0x40020c00

080009c8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80009d0:	f7ff ffae 	bl	8000930 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	4b6f      	ldr	r3, [pc, #444]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a6e      	ldr	r2, [pc, #440]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 80009fc:	f043 0310 	orr.w	r3, r3, #16
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b6c      	ldr	r3, [pc, #432]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0310 	and.w	r3, r3, #16
 8000a0a:	61bb      	str	r3, [r7, #24]
 8000a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	4b68      	ldr	r3, [pc, #416]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a67      	ldr	r2, [pc, #412]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b65      	ldr	r3, [pc, #404]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b61      	ldr	r3, [pc, #388]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a60      	ldr	r2, [pc, #384]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b5e      	ldr	r3, [pc, #376]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b5a      	ldr	r3, [pc, #360]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a59      	ldr	r2, [pc, #356]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b57      	ldr	r3, [pc, #348]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b53      	ldr	r3, [pc, #332]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a52      	ldr	r2, [pc, #328]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b50      	ldr	r3, [pc, #320]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b4c      	ldr	r3, [pc, #304]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a4b      	ldr	r2, [pc, #300]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b49      	ldr	r3, [pc, #292]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b45      	ldr	r3, [pc, #276]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a44      	ldr	r2, [pc, #272]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2170      	movs	r1, #112	; 0x70
 8000aba:	483f      	ldr	r0, [pc, #252]	; (8000bb8 <MX_GPIO_Init+0x1dc>)
 8000abc:	f002 ff48 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	483d      	ldr	r0, [pc, #244]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000ac8:	f002 ff42 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	483b      	ldr	r0, [pc, #236]	; (8000bc0 <MX_GPIO_Init+0x1e4>)
 8000ad2:	f002 ff3d 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000adc:	4839      	ldr	r0, [pc, #228]	; (8000bc4 <MX_GPIO_Init+0x1e8>)
 8000ade:	f002 ff37 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	4838      	ldr	r0, [pc, #224]	; (8000bc8 <MX_GPIO_Init+0x1ec>)
 8000ae8:	f002 ff32 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000aec:	2370      	movs	r3, #112	; 0x70
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	482d      	ldr	r0, [pc, #180]	; (8000bb8 <MX_GPIO_Init+0x1dc>)
 8000b04:	f002 fd88 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4826      	ldr	r0, [pc, #152]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000b22:	f002 fd79 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000b26:	23c0      	movs	r3, #192	; 0xc0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <MX_GPIO_Init+0x1e8>)
 8000b3a:	f002 fd6d 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000b3e:	2330      	movs	r3, #48	; 0x30
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	481a      	ldr	r0, [pc, #104]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000b52:	f002 fd61 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000b56:	2340      	movs	r3, #64	; 0x40
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <MX_GPIO_Init+0x1e4>)
 8000b6e:	f002 fd53 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <MX_GPIO_Init+0x1e8>)
 8000b8c:	f002 fd44 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b90:	2308      	movs	r3, #8
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <MX_GPIO_Init+0x1ec>)
 8000ba8:	f002 fd36 	bl	8003618 <HAL_GPIO_Init>

}
 8000bac:	bf00      	nop
 8000bae:	3730      	adds	r7, #48	; 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40020800 	.word	0x40020800
 8000bc0:	40021800 	.word	0x40021800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020c00 	.word	0x40020c00

08000bcc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_I2C1_Init+0x50>)
 8000bd2:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <MX_I2C1_Init+0x54>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_I2C1_Init+0x50>)
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <MX_I2C1_Init+0x58>)
 8000bda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_I2C1_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_I2C1_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_I2C1_Init+0x50>)
 8000bea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_I2C1_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_I2C1_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_I2C1_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_I2C1_Init+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_I2C1_Init+0x50>)
 8000c0a:	f002 febb 	bl	8003984 <HAL_I2C_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c14:	f001 ff82 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000168 	.word	0x20000168
 8000c20:	40005400 	.word	0x40005400
 8000c24:	000186a0 	.word	0x000186a0

08000c28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <HAL_I2C_MspInit+0x84>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12b      	bne.n	8000ca2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c66:	23c0      	movs	r3, #192	; 0xc0
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6a:	2312      	movs	r3, #18
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c76:	2304      	movs	r3, #4
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <HAL_I2C_MspInit+0x8c>)
 8000c82:	f002 fcc9 	bl	8003618 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <LCD_WR_REG+0x1c>)
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	8013      	strh	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	600ffffe 	.word	0x600ffffe

08000cd8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <LCD_WR_DATA+0x1c>)
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	8053      	strh	r3, [r2, #2]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	600ffffe 	.word	0x600ffffe

08000cf8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <LCD_RD_DATA+0x20>)
 8000d00:	885b      	ldrh	r3, [r3, #2]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	b29b      	uxth	r3, r3
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	600ffffe 	.word	0x600ffffe

08000d1c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80bb      	strh	r3, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	807b      	strh	r3, [r7, #2]
 8000d36:	4613      	mov	r3, r2
 8000d38:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000d3a:	202a      	movs	r0, #42	; 0x2a
 8000d3c:	f7ff ffbc 	bl	8000cb8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	0a1b      	lsrs	r3, r3, #8
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ffc6 	bl	8000cd8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ffc0 	bl	8000cd8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	0a1b      	lsrs	r3, r3, #8
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffba 	bl	8000cd8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ffb4 	bl	8000cd8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d70:	202b      	movs	r0, #43	; 0x2b
 8000d72:	f7ff ffa1 	bl	8000cb8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d76:	88bb      	ldrh	r3, [r7, #4]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ffab 	bl	8000cd8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ffa5 	bl	8000cd8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d8e:	883b      	ldrh	r3, [r7, #0]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff9f 	bl	8000cd8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d9a:	883b      	ldrh	r3, [r7, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff99 	bl	8000cd8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000da6:	202c      	movs	r0, #44	; 0x2c
 8000da8:	f7ff ff86 	bl	8000cb8 <LCD_WR_REG>
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd90      	pop	{r4, r7, pc}

08000db4 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <lcd_Clear+0x70>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <lcd_Clear+0x70>)
 8000dd8:	885b      	ldrh	r3, [r3, #2]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff ff9b 	bl	8000d1c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	81fb      	strh	r3, [r7, #14]
 8000dea:	e011      	b.n	8000e10 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	81bb      	strh	r3, [r7, #12]
 8000df0:	e006      	b.n	8000e00 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff6f 	bl	8000cd8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000dfa:	89bb      	ldrh	r3, [r7, #12]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	81bb      	strh	r3, [r7, #12]
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <lcd_Clear+0x70>)
 8000e02:	885b      	ldrh	r3, [r3, #2]
 8000e04:	89ba      	ldrh	r2, [r7, #12]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d3f3      	bcc.n	8000df2 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000e0a:	89fb      	ldrh	r3, [r7, #14]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	81fb      	strh	r3, [r7, #14]
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <lcd_Clear+0x70>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	89fa      	ldrh	r2, [r7, #14]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3e8      	bcc.n	8000dec <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200001bc 	.word	0x200001bc

08000e28 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4623      	mov	r3, r4
 8000e38:	80fb      	strh	r3, [r7, #6]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	807b      	strh	r3, [r7, #2]
 8000e42:	4613      	mov	r3, r2
 8000e44:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	883b      	ldrh	r3, [r7, #0]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	88b9      	ldrh	r1, [r7, #4]
 8000e54:	88f8      	ldrh	r0, [r7, #6]
 8000e56:	f7ff ff61 	bl	8000d1c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	81fb      	strh	r3, [r7, #14]
 8000e5e:	e010      	b.n	8000e82 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	81bb      	strh	r3, [r7, #12]
 8000e64:	e006      	b.n	8000e74 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000e66:	8c3b      	ldrh	r3, [r7, #32]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff35 	bl	8000cd8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000e6e:	89bb      	ldrh	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	81bb      	strh	r3, [r7, #12]
 8000e74:	89ba      	ldrh	r2, [r7, #12]
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d3f4      	bcc.n	8000e66 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	81fb      	strh	r3, [r7, #14]
 8000e82:	89fa      	ldrh	r2, [r7, #14]
 8000e84:	883b      	ldrh	r3, [r7, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d3ea      	bcc.n	8000e60 <lcd_Fill+0x38>
		}
	}
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}

08000e94 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	80bb      	strh	r3, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	88b9      	ldrh	r1, [r7, #4]
 8000eac:	88f8      	ldrh	r0, [r7, #6]
 8000eae:	f7ff ff35 	bl	8000d1c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff0f 	bl	8000cd8 <LCD_WR_DATA>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4604      	mov	r4, r0
 8000ecc:	4608      	mov	r0, r1
 8000ece:	4611      	mov	r1, r2
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80bb      	strh	r3, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	70fb      	strb	r3, [r7, #3]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000eea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eee:	085b      	lsrs	r3, r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	08db      	lsrs	r3, r3, #3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	bf14      	ite	ne
 8000f06:	2301      	movne	r3, #1
 8000f08:	2300      	moveq	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	fb12 f303 	smulbb	r3, r2, r3
 8000f1a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	3b20      	subs	r3, #32
 8000f20:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b29c      	uxth	r4, r3
 8000f30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	88b9      	ldrh	r1, [r7, #4]
 8000f42:	88f8      	ldrh	r0, [r7, #6]
 8000f44:	4622      	mov	r2, r4
 8000f46:	f7ff fee9 	bl	8000d1c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	827b      	strh	r3, [r7, #18]
 8000f4e:	e07a      	b.n	8001046 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000f50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f54:	2b0c      	cmp	r3, #12
 8000f56:	d028      	beq.n	8000faa <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000f58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f5c:	2b10      	cmp	r3, #16
 8000f5e:	d108      	bne.n	8000f72 <lcd_ShowChar+0xae>
 8000f60:	78fa      	ldrb	r2, [r7, #3]
 8000f62:	8a7b      	ldrh	r3, [r7, #18]
 8000f64:	493c      	ldr	r1, [pc, #240]	; (8001058 <lcd_ShowChar+0x194>)
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	440a      	add	r2, r1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	75fb      	strb	r3, [r7, #23]
 8000f70:	e01b      	b.n	8000faa <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000f72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f76:	2b18      	cmp	r3, #24
 8000f78:	d10b      	bne.n	8000f92 <lcd_ShowChar+0xce>
 8000f7a:	78fa      	ldrb	r2, [r7, #3]
 8000f7c:	8a79      	ldrh	r1, [r7, #18]
 8000f7e:	4837      	ldr	r0, [pc, #220]	; (800105c <lcd_ShowChar+0x198>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4403      	add	r3, r0
 8000f8a:	440b      	add	r3, r1
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	75fb      	strb	r3, [r7, #23]
 8000f90:	e00b      	b.n	8000faa <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000f92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f96:	2b20      	cmp	r3, #32
 8000f98:	d15a      	bne.n	8001050 <lcd_ShowChar+0x18c>
 8000f9a:	78fa      	ldrb	r2, [r7, #3]
 8000f9c:	8a7b      	ldrh	r3, [r7, #18]
 8000f9e:	4930      	ldr	r1, [pc, #192]	; (8001060 <lcd_ShowChar+0x19c>)
 8000fa0:	0192      	lsls	r2, r2, #6
 8000fa2:	440a      	add	r2, r1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	75bb      	strb	r3, [r7, #22]
 8000fae:	e044      	b.n	800103a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000fb0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d120      	bne.n	8000ffa <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000fb8:	7dfa      	ldrb	r2, [r7, #23]
 8000fba:	7dbb      	ldrb	r3, [r7, #22]
 8000fbc:	fa42 f303 	asr.w	r3, r2, r3
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <lcd_ShowChar+0x10e>
 8000fc8:	883b      	ldrh	r3, [r7, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fe84 	bl	8000cd8 <LCD_WR_DATA>
 8000fd0:	e003      	b.n	8000fda <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000fd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe7f 	bl	8000cd8 <LCD_WR_DATA>
				m++;
 8000fda:	7d7b      	ldrb	r3, [r7, #21]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000fe0:	7d7b      	ldrb	r3, [r7, #21]
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fe8:	fb02 f201 	mul.w	r2, r2, r1
 8000fec:	1a9b      	subs	r3, r3, r2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d11f      	bne.n	8001034 <lcd_ShowChar+0x170>
				{
					m=0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	757b      	strb	r3, [r7, #21]
					break;
 8000ff8:	e022      	b.n	8001040 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000ffa:	7dfa      	ldrb	r2, [r7, #23]
 8000ffc:	7dbb      	ldrb	r3, [r7, #22]
 8000ffe:	fa42 f303 	asr.w	r3, r2, r3
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <lcd_ShowChar+0x152>
 800100a:	883a      	ldrh	r2, [r7, #0]
 800100c:	88b9      	ldrh	r1, [r7, #4]
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff3f 	bl	8000e94 <lcd_DrawPoint>
				x++;
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	3301      	adds	r3, #1
 800101a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800101c:	88fa      	ldrh	r2, [r7, #6]
 800101e:	8a3b      	ldrh	r3, [r7, #16]
 8001020:	1ad2      	subs	r2, r2, r3
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	429a      	cmp	r2, r3
 8001026:	d105      	bne.n	8001034 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001028:	8a3b      	ldrh	r3, [r7, #16]
 800102a:	80fb      	strh	r3, [r7, #6]
					y++;
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	3301      	adds	r3, #1
 8001030:	80bb      	strh	r3, [r7, #4]
					break;
 8001032:	e005      	b.n	8001040 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001034:	7dbb      	ldrb	r3, [r7, #22]
 8001036:	3301      	adds	r3, #1
 8001038:	75bb      	strb	r3, [r7, #22]
 800103a:	7dbb      	ldrb	r3, [r7, #22]
 800103c:	2b07      	cmp	r3, #7
 800103e:	d9b7      	bls.n	8000fb0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001040:	8a7b      	ldrh	r3, [r7, #18]
 8001042:	3301      	adds	r3, #1
 8001044:	827b      	strh	r3, [r7, #18]
 8001046:	8a7a      	ldrh	r2, [r7, #18]
 8001048:	89bb      	ldrh	r3, [r7, #12]
 800104a:	429a      	cmp	r2, r3
 800104c:	d380      	bcc.n	8000f50 <lcd_ShowChar+0x8c>
 800104e:	e000      	b.n	8001052 <lcd_ShowChar+0x18e>
		else return;
 8001050:	bf00      	nop
				}
			}
		}
	}
}
 8001052:	371c      	adds	r7, #28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	08008488 	.word	0x08008488
 800105c:	08008a78 	.word	0x08008a78
 8001060:	08009c48 	.word	0x08009c48

08001064 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001074:	2301      	movs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001078:	e004      	b.n	8001084 <mypow+0x20>
 800107a:	79fa      	ldrb	r2, [r7, #7]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	71ba      	strb	r2, [r7, #6]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f5      	bne.n	800107a <mypow+0x16>
	return result;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	4604      	mov	r4, r0
 80010a4:	4608      	mov	r0, r1
 80010a6:	4611      	mov	r1, r2
 80010a8:	461a      	mov	r2, r3
 80010aa:	4623      	mov	r3, r4
 80010ac:	80fb      	strh	r3, [r7, #6]
 80010ae:	4603      	mov	r3, r0
 80010b0:	80bb      	strh	r3, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	807b      	strh	r3, [r7, #2]
 80010b6:	4613      	mov	r3, r2
 80010b8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80010be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010c2:	085b      	lsrs	r3, r3, #1
 80010c4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e059      	b.n	8001180 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80010cc:	887c      	ldrh	r4, [r7, #2]
 80010ce:	787a      	ldrb	r2, [r7, #1]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	200a      	movs	r0, #10
 80010de:	f7ff ffc1 	bl	8001064 <mypow>
 80010e2:	4603      	mov	r3, r0
 80010e4:	fbb4 f1f3 	udiv	r1, r4, r3
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <lcd_ShowIntNum+0xf8>)
 80010ea:	fba3 2301 	umull	r2, r3, r3, r1
 80010ee:	08da      	lsrs	r2, r3, #3
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	1aca      	subs	r2, r1, r3
 80010fa:	4613      	mov	r3, r2
 80010fc:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d121      	bne.n	8001148 <lcd_ShowIntNum+0xac>
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	787b      	ldrb	r3, [r7, #1]
 8001108:	3b01      	subs	r3, #1
 800110a:	429a      	cmp	r2, r3
 800110c:	da1c      	bge.n	8001148 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800110e:	7b3b      	ldrb	r3, [r7, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d117      	bne.n	8001144 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	b29a      	uxth	r2, r3
 8001118:	7b7b      	ldrb	r3, [r7, #13]
 800111a:	b29b      	uxth	r3, r3
 800111c:	fb12 f303 	smulbb	r3, r2, r3
 8001120:	b29a      	uxth	r2, r3
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	4413      	add	r3, r2
 8001126:	b298      	uxth	r0, r3
 8001128:	8c3a      	ldrh	r2, [r7, #32]
 800112a:	88b9      	ldrh	r1, [r7, #4]
 800112c:	2300      	movs	r3, #0
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	4613      	mov	r3, r2
 800113c:	2220      	movs	r2, #32
 800113e:	f7ff fec1 	bl	8000ec4 <lcd_ShowChar>
				continue;
 8001142:	e01a      	b.n	800117a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001144:	2301      	movs	r3, #1
 8001146:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	b29a      	uxth	r2, r3
 800114c:	7b7b      	ldrb	r3, [r7, #13]
 800114e:	b29b      	uxth	r3, r3
 8001150:	fb12 f303 	smulbb	r3, r2, r3
 8001154:	b29a      	uxth	r2, r3
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	4413      	add	r3, r2
 800115a:	b298      	uxth	r0, r3
 800115c:	7b3b      	ldrb	r3, [r7, #12]
 800115e:	3330      	adds	r3, #48	; 0x30
 8001160:	b2da      	uxtb	r2, r3
 8001162:	8c3c      	ldrh	r4, [r7, #32]
 8001164:	88b9      	ldrh	r1, [r7, #4]
 8001166:	2300      	movs	r3, #0
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	4623      	mov	r3, r4
 8001176:	f7ff fea5 	bl	8000ec4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	3301      	adds	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	787b      	ldrb	r3, [r7, #1]
 8001184:	429a      	cmp	r2, r3
 8001186:	d3a1      	bcc.n	80010cc <lcd_ShowIntNum+0x30>
	}
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	cccccccd 	.word	0xcccccccd

08001198 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <lcd_SetDir+0x44>)
 80011b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011b8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <lcd_SetDir+0x44>)
 80011bc:	22f0      	movs	r2, #240	; 0xf0
 80011be:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80011c0:	e006      	b.n	80011d0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <lcd_SetDir+0x44>)
 80011c4:	22f0      	movs	r2, #240	; 0xf0
 80011c6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <lcd_SetDir+0x44>)
 80011ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011ce:	805a      	strh	r2, [r3, #2]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	200001bc 	.word	0x200001bc

080011e0 <lcd_init>:


void lcd_init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ea:	48aa      	ldr	r0, [pc, #680]	; (8001494 <lcd_init+0x2b4>)
 80011ec:	f002 fbb0 	bl	8003950 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f4:	f002 f848 	bl	8003288 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fe:	48a5      	ldr	r0, [pc, #660]	; (8001494 <lcd_init+0x2b4>)
 8001200:	f002 fba6 	bl	8003950 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001208:	f002 f83e 	bl	8003288 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff ffc3 	bl	8001198 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001212:	20d3      	movs	r0, #211	; 0xd3
 8001214:	f7ff fd50 	bl	8000cb8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001218:	f7ff fd6e 	bl	8000cf8 <LCD_RD_DATA>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	4b9d      	ldr	r3, [pc, #628]	; (8001498 <lcd_init+0x2b8>)
 8001222:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001224:	f7ff fd68 	bl	8000cf8 <LCD_RD_DATA>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b9a      	ldr	r3, [pc, #616]	; (8001498 <lcd_init+0x2b8>)
 800122e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001230:	f7ff fd62 	bl	8000cf8 <LCD_RD_DATA>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b97      	ldr	r3, [pc, #604]	; (8001498 <lcd_init+0x2b8>)
 800123a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800123c:	4b96      	ldr	r3, [pc, #600]	; (8001498 <lcd_init+0x2b8>)
 800123e:	889b      	ldrh	r3, [r3, #4]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b94      	ldr	r3, [pc, #592]	; (8001498 <lcd_init+0x2b8>)
 8001246:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001248:	f7ff fd56 	bl	8000cf8 <LCD_RD_DATA>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b91      	ldr	r3, [pc, #580]	; (8001498 <lcd_init+0x2b8>)
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	4313      	orrs	r3, r2
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b8f      	ldr	r3, [pc, #572]	; (8001498 <lcd_init+0x2b8>)
 800125a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800125c:	20cf      	movs	r0, #207	; 0xcf
 800125e:	f7ff fd2b 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fd38 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001268:	20c1      	movs	r0, #193	; 0xc1
 800126a:	f7ff fd35 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800126e:	2030      	movs	r0, #48	; 0x30
 8001270:	f7ff fd32 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001274:	20ed      	movs	r0, #237	; 0xed
 8001276:	f7ff fd1f 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f7ff fd2c 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001280:	2003      	movs	r0, #3
 8001282:	f7ff fd29 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001286:	2012      	movs	r0, #18
 8001288:	f7ff fd26 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800128c:	2081      	movs	r0, #129	; 0x81
 800128e:	f7ff fd23 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001292:	20e8      	movs	r0, #232	; 0xe8
 8001294:	f7ff fd10 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001298:	2085      	movs	r0, #133	; 0x85
 800129a:	f7ff fd1d 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800129e:	2010      	movs	r0, #16
 80012a0:	f7ff fd1a 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80012a4:	207a      	movs	r0, #122	; 0x7a
 80012a6:	f7ff fd17 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80012aa:	20cb      	movs	r0, #203	; 0xcb
 80012ac:	f7ff fd04 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80012b0:	2039      	movs	r0, #57	; 0x39
 80012b2:	f7ff fd11 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80012b6:	202c      	movs	r0, #44	; 0x2c
 80012b8:	f7ff fd0e 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fd0b 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80012c2:	2034      	movs	r0, #52	; 0x34
 80012c4:	f7ff fd08 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f7ff fd05 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80012ce:	20f7      	movs	r0, #247	; 0xf7
 80012d0:	f7ff fcf2 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80012d4:	2020      	movs	r0, #32
 80012d6:	f7ff fcff 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80012da:	20ea      	movs	r0, #234	; 0xea
 80012dc:	f7ff fcec 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fcf9 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fcf6 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80012ec:	20c0      	movs	r0, #192	; 0xc0
 80012ee:	f7ff fce3 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80012f2:	201b      	movs	r0, #27
 80012f4:	f7ff fcf0 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80012f8:	20c1      	movs	r0, #193	; 0xc1
 80012fa:	f7ff fcdd 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fcea 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001304:	20c5      	movs	r0, #197	; 0xc5
 8001306:	f7ff fcd7 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800130a:	2030      	movs	r0, #48	; 0x30
 800130c:	f7ff fce4 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001310:	2030      	movs	r0, #48	; 0x30
 8001312:	f7ff fce1 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001316:	20c7      	movs	r0, #199	; 0xc7
 8001318:	f7ff fcce 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800131c:	20b7      	movs	r0, #183	; 0xb7
 800131e:	f7ff fcdb 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001322:	2036      	movs	r0, #54	; 0x36
 8001324:	f7ff fcc8 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001328:	2008      	movs	r0, #8
 800132a:	f7ff fcd5 	bl	8000cd8 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800132e:	203a      	movs	r0, #58	; 0x3a
 8001330:	f7ff fcc2 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001334:	2055      	movs	r0, #85	; 0x55
 8001336:	f7ff fccf 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800133a:	20b1      	movs	r0, #177	; 0xb1
 800133c:	f7ff fcbc 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fcc9 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001346:	201a      	movs	r0, #26
 8001348:	f7ff fcc6 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800134c:	20b6      	movs	r0, #182	; 0xb6
 800134e:	f7ff fcb3 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001352:	200a      	movs	r0, #10
 8001354:	f7ff fcc0 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001358:	20a2      	movs	r0, #162	; 0xa2
 800135a:	f7ff fcbd 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800135e:	20f2      	movs	r0, #242	; 0xf2
 8001360:	f7ff fcaa 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff fcb7 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800136a:	2026      	movs	r0, #38	; 0x26
 800136c:	f7ff fca4 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff fcb1 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001376:	20e0      	movs	r0, #224	; 0xe0
 8001378:	f7ff fc9e 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800137c:	200f      	movs	r0, #15
 800137e:	f7ff fcab 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001382:	202a      	movs	r0, #42	; 0x2a
 8001384:	f7ff fca8 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001388:	2028      	movs	r0, #40	; 0x28
 800138a:	f7ff fca5 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800138e:	2008      	movs	r0, #8
 8001390:	f7ff fca2 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001394:	200e      	movs	r0, #14
 8001396:	f7ff fc9f 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800139a:	2008      	movs	r0, #8
 800139c:	f7ff fc9c 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80013a0:	2054      	movs	r0, #84	; 0x54
 80013a2:	f7ff fc99 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80013a6:	20a9      	movs	r0, #169	; 0xa9
 80013a8:	f7ff fc96 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80013ac:	2043      	movs	r0, #67	; 0x43
 80013ae:	f7ff fc93 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80013b2:	200a      	movs	r0, #10
 80013b4:	f7ff fc90 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013b8:	200f      	movs	r0, #15
 80013ba:	f7ff fc8d 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fc8a 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fc87 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fc84 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff fc81 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80013d6:	20e1      	movs	r0, #225	; 0xe1
 80013d8:	f7ff fc6e 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fc7b 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80013e2:	2015      	movs	r0, #21
 80013e4:	f7ff fc78 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80013e8:	2017      	movs	r0, #23
 80013ea:	f7ff fc75 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80013ee:	2007      	movs	r0, #7
 80013f0:	f7ff fc72 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80013f4:	2011      	movs	r0, #17
 80013f6:	f7ff fc6f 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80013fa:	2006      	movs	r0, #6
 80013fc:	f7ff fc6c 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001400:	202b      	movs	r0, #43	; 0x2b
 8001402:	f7ff fc69 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001406:	2056      	movs	r0, #86	; 0x56
 8001408:	f7ff fc66 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800140c:	203c      	movs	r0, #60	; 0x3c
 800140e:	f7ff fc63 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001412:	2005      	movs	r0, #5
 8001414:	f7ff fc60 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001418:	2010      	movs	r0, #16
 800141a:	f7ff fc5d 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800141e:	200f      	movs	r0, #15
 8001420:	f7ff fc5a 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001424:	203f      	movs	r0, #63	; 0x3f
 8001426:	f7ff fc57 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800142a:	203f      	movs	r0, #63	; 0x3f
 800142c:	f7ff fc54 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001430:	200f      	movs	r0, #15
 8001432:	f7ff fc51 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001436:	202b      	movs	r0, #43	; 0x2b
 8001438:	f7ff fc3e 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff fc4b 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff fc48 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff fc45 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800144e:	203f      	movs	r0, #63	; 0x3f
 8001450:	f7ff fc42 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001454:	202a      	movs	r0, #42	; 0x2a
 8001456:	f7ff fc2f 	bl	8000cb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff fc3c 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff fc39 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff fc36 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800146c:	20ef      	movs	r0, #239	; 0xef
 800146e:	f7ff fc33 	bl	8000cd8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001472:	2011      	movs	r0, #17
 8001474:	f7ff fc20 	bl	8000cb8 <LCD_WR_REG>
	HAL_Delay(120);
 8001478:	2078      	movs	r0, #120	; 0x78
 800147a:	f001 ff05 	bl	8003288 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800147e:	2029      	movs	r0, #41	; 0x29
 8001480:	f7ff fc1a 	bl	8000cb8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148a:	4804      	ldr	r0, [pc, #16]	; (800149c <lcd_init+0x2bc>)
 800148c:	f002 fa60 	bl	8003950 <HAL_GPIO_WritePin>
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40020800 	.word	0x40020800
 8001498:	200001bc 	.word	0x200001bc
 800149c:	40020000 	.word	0x40020000

080014a0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b08b      	sub	sp, #44	; 0x2c
 80014a4:	af04      	add	r7, sp, #16
 80014a6:	60ba      	str	r2, [r7, #8]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	81fb      	strh	r3, [r7, #14]
 80014ae:	460b      	mov	r3, r1
 80014b0:	81bb      	strh	r3, [r7, #12]
 80014b2:	4613      	mov	r3, r2
 80014b4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80014be:	e048      	b.n	8001552 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d145      	bne.n	8001552 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014c6:	89fa      	ldrh	r2, [r7, #14]
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <lcd_ShowStr+0xc4>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014d2:	085b      	lsrs	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	1acb      	subs	r3, r1, r3
 80014d8:	429a      	cmp	r2, r3
 80014da:	dc3f      	bgt.n	800155c <lcd_ShowStr+0xbc>
 80014dc:	89ba      	ldrh	r2, [r7, #12]
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <lcd_ShowStr+0xc4>)
 80014e0:	885b      	ldrh	r3, [r3, #2]
 80014e2:	4619      	mov	r1, r3
 80014e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014e8:	1acb      	subs	r3, r1, r3
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dc36      	bgt.n	800155c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b80      	cmp	r3, #128	; 0x80
 80014f4:	d902      	bls.n	80014fc <lcd_ShowStr+0x5c>
 80014f6:	2301      	movs	r3, #1
 80014f8:	75fb      	strb	r3, [r7, #23]
 80014fa:	e02a      	b.n	8001552 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b0d      	cmp	r3, #13
 8001502:	d10b      	bne.n	800151c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001504:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001508:	b29a      	uxth	r2, r3
 800150a:	89bb      	ldrh	r3, [r7, #12]
 800150c:	4413      	add	r3, r2
 800150e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001510:	8abb      	ldrh	r3, [r7, #20]
 8001512:	81fb      	strh	r3, [r7, #14]
					str++;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3301      	adds	r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	e017      	b.n	800154c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	88fc      	ldrh	r4, [r7, #6]
 8001522:	89b9      	ldrh	r1, [r7, #12]
 8001524:	89f8      	ldrh	r0, [r7, #14]
 8001526:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4623      	mov	r3, r4
 8001538:	f7ff fcc4 	bl	8000ec4 <lcd_ShowChar>
					x+=sizey/2;
 800153c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	b29a      	uxth	r2, r3
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	4413      	add	r3, r2
 800154a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	3301      	adds	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1b2      	bne.n	80014c0 <lcd_ShowStr+0x20>
 800155a:	e000      	b.n	800155e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800155c:	bf00      	nop
			}
		}
	}
}
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	200001bc 	.word	0x200001bc

08001568 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af04      	add	r7, sp, #16
 800156e:	60ba      	str	r2, [r7, #8]
 8001570:	461a      	mov	r2, r3
 8001572:	4603      	mov	r3, r0
 8001574:	81fb      	strh	r3, [r7, #14]
 8001576:	460b      	mov	r3, r1
 8001578:	81bb      	strh	r3, [r7, #12]
 800157a:	4613      	mov	r3, r2
 800157c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800157e:	68b8      	ldr	r0, [r7, #8]
 8001580:	f7fe fe30 	bl	80001e4 <strlen>
 8001584:	4603      	mov	r3, r0
 8001586:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <lcd_StrCenter+0x60>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	8afb      	ldrh	r3, [r7, #22]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	0fda      	lsrs	r2, r3, #31
 8001596:	4413      	add	r3, r2
 8001598:	105b      	asrs	r3, r3, #1
 800159a:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 800159c:	89fa      	ldrh	r2, [r7, #14]
 800159e:	8abb      	ldrh	r3, [r7, #20]
 80015a0:	4413      	add	r3, r2
 80015a2:	b298      	uxth	r0, r3
 80015a4:	88fa      	ldrh	r2, [r7, #6]
 80015a6:	89b9      	ldrh	r1, [r7, #12]
 80015a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	8c3b      	ldrh	r3, [r7, #32]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f7ff ff70 	bl	80014a0 <lcd_ShowStr>
}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200001bc 	.word	0x200001bc

080015cc <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2140      	movs	r1, #64	; 0x40
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <led7_init+0x14>)
 80015d6:	f002 f9bb 	bl	8003950 <HAL_GPIO_WritePin>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021800 	.word	0x40021800

080015e4 <led7_Scan>:

void led7_Scan(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <led7_Scan+0x104>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <led7_Scan+0x104>)
 80015f2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80015f4:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <led7_Scan+0x108>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a3d      	ldr	r2, [pc, #244]	; (80016f0 <led7_Scan+0x10c>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <led7_Scan+0x104>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21b      	sxth	r3, r3
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <led7_Scan+0x104>)
 800160e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001610:	4b36      	ldr	r3, [pc, #216]	; (80016ec <led7_Scan+0x108>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d847      	bhi.n	80016a8 <led7_Scan+0xc4>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <led7_Scan+0x3c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	0800164f 	.word	0x0800164f
 8001628:	0800166d 	.word	0x0800166d
 800162c:	0800168b 	.word	0x0800168b
	case 0:
		spi_buffer |= 0x00b0;
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <led7_Scan+0x104>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <led7_Scan+0x104>)
 800163c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <led7_Scan+0x104>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <led7_Scan+0x104>)
 800164a:	801a      	strh	r2, [r3, #0]
		break;
 800164c:	e02d      	b.n	80016aa <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <led7_Scan+0x104>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <led7_Scan+0x104>)
 800165a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <led7_Scan+0x104>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	f023 0320 	bic.w	r3, r3, #32
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <led7_Scan+0x104>)
 8001668:	801a      	strh	r2, [r3, #0]
		break;
 800166a:	e01e      	b.n	80016aa <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <led7_Scan+0x104>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <led7_Scan+0x104>)
 8001678:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <led7_Scan+0x104>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	f023 0310 	bic.w	r3, r3, #16
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <led7_Scan+0x104>)
 8001686:	801a      	strh	r2, [r3, #0]
		break;
 8001688:	e00f      	b.n	80016aa <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <led7_Scan+0x104>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <led7_Scan+0x104>)
 8001696:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <led7_Scan+0x104>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <led7_Scan+0x104>)
 80016a4:	801a      	strh	r2, [r3, #0]
		break;
 80016a6:	e000      	b.n	80016aa <led7_Scan+0xc6>
	default:
		break;
 80016a8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <led7_Scan+0x108>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	425a      	negs	r2, r3
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	bf58      	it	pl
 80016bc:	4253      	negpl	r3, r2
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <led7_Scan+0x108>)
 80016c0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2140      	movs	r1, #64	; 0x40
 80016c6:	480b      	ldr	r0, [pc, #44]	; (80016f4 <led7_Scan+0x110>)
 80016c8:	f002 f942 	bl	8003950 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80016cc:	2301      	movs	r3, #1
 80016ce:	2202      	movs	r2, #2
 80016d0:	4905      	ldr	r1, [pc, #20]	; (80016e8 <led7_Scan+0x104>)
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <led7_Scan+0x114>)
 80016d4:	f003 ff41 	bl	800555a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80016d8:	2201      	movs	r2, #1
 80016da:	2140      	movs	r1, #64	; 0x40
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <led7_Scan+0x110>)
 80016de:	f002 f937 	bl	8003950 <HAL_GPIO_WritePin>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008
 80016ec:	200000a0 	.word	0x200000a0
 80016f0:	20000004 	.word	0x20000004
 80016f4:	40021800 	.word	0x40021800
 80016f8:	20000200 	.word	0x20000200

080016fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001700:	f001 fd50 	bl	80031a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001704:	f000 f824 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001708:	f7ff f968 	bl	80009dc <MX_GPIO_Init>
  MX_TIM2_Init();
 800170c:	f001 fb88 	bl	8002e20 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001710:	f001 fa5a 	bl	8002bc8 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001714:	f7ff f892 	bl	800083c <MX_FSMC_Init>
  MX_I2C1_Init();
 8001718:	f7ff fa58 	bl	8000bcc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800171c:	f001 fc60 	bl	8002fe0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001720:	f000 f880 	bl	8001824 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fb45 	bl	8000db4 <lcd_Clear>
  updateTime();
 800172a:	f000 f947 	bl	80019bc <updateTime>
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 800172e:	bf00      	nop
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <main+0x50>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0fb      	beq.n	8001730 <main+0x34>
	  flag_timer2 = 0;
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <main+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800173e:	f7fe ff37 	bl	80005b0 <button_Scan>
//	   test_LedDebug();
	  ds3231_ReadTime();
 8001742:	f7ff f817 	bl	8000774 <ds3231_ReadTime>
//	   test_Uart();
    clock_mode();
 8001746:	f000 ff07 	bl	8002558 <clock_mode>
	  while(!flag_timer2);
 800174a:	e7f0      	b.n	800172e <main+0x32>
 800174c:	200000b0 	.word	0x200000b0

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b094      	sub	sp, #80	; 0x50
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f006 f9b0 	bl	8007ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <SystemClock_Config+0xcc>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a27      	ldr	r2, [pc, #156]	; (800181c <SystemClock_Config+0xcc>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <SystemClock_Config+0xcc>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <SystemClock_Config+0xd0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a21      	ldr	r2, [pc, #132]	; (8001820 <SystemClock_Config+0xd0>)
 800179a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <SystemClock_Config+0xd0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ac:	2302      	movs	r3, #2
 80017ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	2301      	movs	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b4:	2310      	movs	r3, #16
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b8:	2302      	movs	r3, #2
 80017ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017bc:	2300      	movs	r3, #0
 80017be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017c0:	2308      	movs	r3, #8
 80017c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017c4:	23a8      	movs	r3, #168	; 0xa8
 80017c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017cc:	2304      	movs	r3, #4
 80017ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 f9c3 	bl	8004b60 <HAL_RCC_OscConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017e0:	f001 f99c 	bl	8002b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e4:	230f      	movs	r3, #15
 80017e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e8:	2302      	movs	r3, #2
 80017ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80017f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2105      	movs	r1, #5
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fc24 	bl	8005050 <HAL_RCC_ClockConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800180e:	f001 f985 	bl	8002b1c <Error_Handler>
  }
}
 8001812:	bf00      	nop
 8001814:	3750      	adds	r7, #80	; 0x50
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40007000 	.word	0x40007000

08001824 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2120      	movs	r1, #32
 800182c:	480e      	ldr	r0, [pc, #56]	; (8001868 <system_init+0x44>)
 800182e:	f002 f88f 	bl	8003950 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2140      	movs	r1, #64	; 0x40
 8001836:	480c      	ldr	r0, [pc, #48]	; (8001868 <system_init+0x44>)
 8001838:	f002 f88a 	bl	8003950 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2110      	movs	r1, #16
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <system_init+0x44>)
 8001842:	f002 f885 	bl	8003950 <HAL_GPIO_WritePin>
	  timer_init();
 8001846:	f001 f96f 	bl	8002b28 <timer_init>
	  led7_init();
 800184a:	f7ff febf 	bl	80015cc <led7_init>
	  button_init();
 800184e:	f7fe fea3 	bl	8000598 <button_init>
	  lcd_init();
 8001852:	f7ff fcc5 	bl	80011e0 <lcd_init>
	  ds3231_init();
 8001856:	f7fe ff23 	bl	80006a0 <ds3231_init>
	  uart_init_rs232();
 800185a:	f001 fb53 	bl	8002f04 <uart_init_rs232>
	  setTimer2(50);
 800185e:	2032      	movs	r0, #50	; 0x32
 8001860:	f001 f96c 	bl	8002b3c <setTimer2>
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000

0800186c <isButtonUp>:
		uart_Rs232SendNum(ds3231_sec);
		uart_Rs232SendString("\n");
	}
}

uint8_t isButtonUp() {
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
    return (button_count[3] % 10 == 1) ? 1 : 0;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <isButtonUp+0x30>)
 8001872:	88da      	ldrh	r2, [r3, #6]
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <isButtonUp+0x34>)
 8001876:	fba3 1302 	umull	r1, r3, r3, r2
 800187a:	08d9      	lsrs	r1, r3, #3
 800187c:	460b      	mov	r3, r1
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b01      	cmp	r3, #1
 800188a:	bf0c      	ite	eq
 800188c:	2301      	moveq	r3, #1
 800188e:	2300      	movne	r3, #0
 8001890:	b2db      	uxtb	r3, r3
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	200000c8 	.word	0x200000c8
 80018a0:	cccccccd 	.word	0xcccccccd

080018a4 <display_lcd>:
uint8_t idx = 0;
//uint8_t update_arr[7];
//char time_features[7][10] = {"Seconds", "Minutes", "Hours", "Days", "Dates", "Months", "Years"};
//char message[30];

void display_lcd() {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af04      	add	r7, sp, #16
    switch (currentMode) {
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <display_lcd+0xfc>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d872      	bhi.n	8001998 <display_lcd+0xf4>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <display_lcd+0x14>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	080018c9 	.word	0x080018c9
 80018bc:	08001909 	.word	0x08001909
 80018c0:	08001939 	.word	0x08001939
 80018c4:	08001969 	.word	0x08001969
        case TIME_DISPLAY:
            lcd_Fill(0, 0, 240, 20, BLUE);
 80018c8:	231f      	movs	r3, #31
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2314      	movs	r3, #20
 80018ce:	22f0      	movs	r2, #240	; 0xf0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff faa8 	bl	8000e28 <lcd_Fill>
            lcd_StrCenter(0, 2, (uint8_t *)"This is now", RED, BLUE, 16, 1);
 80018d8:	2301      	movs	r3, #1
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2310      	movs	r3, #16
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	231f      	movs	r3, #31
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018e8:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <display_lcd+0x100>)
 80018ea:	2102      	movs	r1, #2
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7ff fe3b 	bl	8001568 <lcd_StrCenter>
            displayTime();  // Displays the current time
 80018f2:	f000 fab3 	bl	8001e5c <displayTime>
            timerMode = 0;
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <display_lcd+0x104>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
            adjustMode = 0;
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <display_lcd+0x108>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
            checkAlarm();
 8001902:	f000 fed7 	bl	80026b4 <checkAlarm>
            break;
 8001906:	e047      	b.n	8001998 <display_lcd+0xf4>

        case TIME_ADJUST:
            lcd_Fill(0, 0, 240, 20, BLUE);
 8001908:	231f      	movs	r3, #31
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2314      	movs	r3, #20
 800190e:	22f0      	movs	r2, #240	; 0xf0
 8001910:	2100      	movs	r1, #0
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff fa88 	bl	8000e28 <lcd_Fill>
            lcd_StrCenter(0, 2, (uint8_t *)"Please edit the time", RED, BLUE, 16, 1);
 8001918:	2301      	movs	r3, #1
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2310      	movs	r3, #16
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	231f      	movs	r3, #31
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001928:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <display_lcd+0x10c>)
 800192a:	2102      	movs	r1, #2
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fe1b 	bl	8001568 <lcd_StrCenter>
            adjustTime();  // Allows time adjustment
 8001932:	f000 fb11 	bl	8001f58 <adjustTime>
            break;
 8001936:	e02f      	b.n	8001998 <display_lcd+0xf4>

        case TIMER_MODE:
            lcd_Fill(0, 0, 240, 20, BLUE);
 8001938:	231f      	movs	r3, #31
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2314      	movs	r3, #20
 800193e:	22f0      	movs	r2, #240	; 0xf0
 8001940:	2100      	movs	r1, #0
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fa70 	bl	8000e28 <lcd_Fill>
            lcd_StrCenter(0, 2, (uint8_t *)"Please set timer", RED, BLUE, 16, 1);
 8001948:	2301      	movs	r3, #1
 800194a:	9302      	str	r3, [sp, #8]
 800194c:	2310      	movs	r3, #16
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	231f      	movs	r3, #31
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001958:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <display_lcd+0x110>)
 800195a:	2102      	movs	r1, #2
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff fe03 	bl	8001568 <lcd_StrCenter>
            setTimer();  // Sets the timer
 8001962:	f000 fc9b 	bl	800229c <setTimer>
            break;
 8001966:	e017      	b.n	8001998 <display_lcd+0xf4>
        case TIME_UPDATE:
        	lcd_Fill(0, 0, 240, 20, BLUE);
 8001968:	231f      	movs	r3, #31
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2314      	movs	r3, #20
 800196e:	22f0      	movs	r2, #240	; 0xf0
 8001970:	2100      	movs	r1, #0
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff fa58 	bl	8000e28 <lcd_Fill>
			lcd_StrCenter(0, 2, (uint8_t *)"Please update the time", RED, BLUE, 16, 1);
 8001978:	2301      	movs	r3, #1
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	2310      	movs	r3, #16
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	231f      	movs	r3, #31
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <display_lcd+0x114>)
 800198a:	2102      	movs	r1, #2
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fdeb 	bl	8001568 <lcd_StrCenter>
			update_time();  // Time_update
 8001992:	f000 fef9 	bl	8002788 <update_time>
//			uart_Rs232SendNum(cnt);
			break;
 8001996:	bf00      	nop
    }
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200000a4 	.word	0x200000a4
 80019a4:	08008354 	.word	0x08008354
 80019a8:	200000a5 	.word	0x200000a5
 80019ac:	200000a6 	.word	0x200000a6
 80019b0:	08008360 	.word	0x08008360
 80019b4:	08008378 	.word	0x08008378
 80019b8:	0800838c 	.word	0x0800838c

080019bc <updateTime>:

void updateTime(){
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 80019c0:	2117      	movs	r1, #23
 80019c2:	2006      	movs	r0, #6
 80019c4:	f7fe feb4 	bl	8000730 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 80019c8:	210a      	movs	r1, #10
 80019ca:	2005      	movs	r0, #5
 80019cc:	f7fe feb0 	bl	8000730 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 80019d0:	2114      	movs	r1, #20
 80019d2:	2004      	movs	r0, #4
 80019d4:	f7fe feac 	bl	8000730 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80019d8:	2106      	movs	r1, #6
 80019da:	2003      	movs	r0, #3
 80019dc:	f7fe fea8 	bl	8000730 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 20);
 80019e0:	2114      	movs	r1, #20
 80019e2:	2002      	movs	r0, #2
 80019e4:	f7fe fea4 	bl	8000730 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 11);
 80019e8:	210b      	movs	r1, #11
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7fe fea0 	bl	8000730 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 80019f0:	2117      	movs	r1, #23
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7fe fe9c 	bl	8000730 <ds3231_Write>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <displaySec>:
uint8_t day;
uint8_t date;
uint8_t month;
uint8_t year;

void displaySec(int num, int isBlink) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af04      	add	r7, sp, #16
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d031      	beq.n	8001a70 <displaySec+0x74>
	    counter = (counter + 1)%10;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <displaySec+0x98>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <displaySec+0x9c>)
 8001a14:	fb83 1302 	smull	r1, r3, r3, r2
 8001a18:	1099      	asrs	r1, r3, #2
 8001a1a:	17d3      	asrs	r3, r2, #31
 8001a1c:	1ac9      	subs	r1, r1, r3
 8001a1e:	460b      	mov	r3, r1
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	1ad1      	subs	r1, r2, r3
 8001a28:	b2ca      	uxtb	r2, r1
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <displaySec+0x98>)
 8001a2c:	701a      	strb	r2, [r3, #0]
	    if(counter < 5) {
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <displaySec+0x98>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d80d      	bhi.n	8001a52 <displaySec+0x56>
//	    	lcd_ShowStr(150, 100, "  ", 2, BLACK, BLACK, 24);
	    	lcd_ShowIntNum(150, 100, num, 2, BLACK, BLACK, 24);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	2318      	movs	r3, #24
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	2300      	movs	r3, #0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2302      	movs	r3, #2
 8001a48:	2164      	movs	r1, #100	; 0x64
 8001a4a:	2096      	movs	r0, #150	; 0x96
 8001a4c:	f7ff fb26 	bl	800109c <lcd_ShowIntNum>
	    }
	}
	else {
		lcd_ShowIntNum(150, 100, num, 2, GREEN, BLACK, 24);
	}
}
 8001a50:	e01c      	b.n	8001a8c <displaySec+0x90>
	    	lcd_ShowIntNum(150, 100, num, 2, GREEN, BLACK, 24);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	2318      	movs	r3, #24
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2302      	movs	r3, #2
 8001a66:	2164      	movs	r1, #100	; 0x64
 8001a68:	2096      	movs	r0, #150	; 0x96
 8001a6a:	f7ff fb17 	bl	800109c <lcd_ShowIntNum>
}
 8001a6e:	e00d      	b.n	8001a8c <displaySec+0x90>
		lcd_ShowIntNum(150, 100, num, 2, GREEN, BLACK, 24);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	2318      	movs	r3, #24
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2302      	movs	r3, #2
 8001a84:	2164      	movs	r1, #100	; 0x64
 8001a86:	2096      	movs	r0, #150	; 0x96
 8001a88:	f7ff fb08 	bl	800109c <lcd_ShowIntNum>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200000a7 	.word	0x200000a7
 8001a98:	66666667 	.word	0x66666667

08001a9c <displayMin>:

void displayMin(int num, int isBlink) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af04      	add	r7, sp, #16
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d031      	beq.n	8001b10 <displayMin+0x74>
		counter = (counter + 1)%10;
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <displayMin+0x98>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <displayMin+0x9c>)
 8001ab4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ab8:	1099      	asrs	r1, r3, #2
 8001aba:	17d3      	asrs	r3, r2, #31
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	460b      	mov	r3, r1
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	1ad1      	subs	r1, r2, r3
 8001ac8:	b2ca      	uxtb	r2, r1
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <displayMin+0x98>)
 8001acc:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <displayMin+0x98>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d80d      	bhi.n	8001af2 <displayMin+0x56>
//			lcd_ShowStr(110, 100, "  ", 2, GREEN, BLACK, 24);
			lcd_ShowIntNum(110, 100, num, 2, BLACK, BLACK, 24);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	2318      	movs	r3, #24
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	2164      	movs	r1, #100	; 0x64
 8001aea:	206e      	movs	r0, #110	; 0x6e
 8001aec:	f7ff fad6 	bl	800109c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(110, 100, num, 2, GREEN, BLACK, 24);
	}
}
 8001af0:	e01c      	b.n	8001b2c <displayMin+0x90>
			lcd_ShowIntNum(110, 100, num, 2, GREEN, BLACK, 24);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	2318      	movs	r3, #24
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	2300      	movs	r3, #0
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2302      	movs	r3, #2
 8001b06:	2164      	movs	r1, #100	; 0x64
 8001b08:	206e      	movs	r0, #110	; 0x6e
 8001b0a:	f7ff fac7 	bl	800109c <lcd_ShowIntNum>
}
 8001b0e:	e00d      	b.n	8001b2c <displayMin+0x90>
		lcd_ShowIntNum(110, 100, num, 2, GREEN, BLACK, 24);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2318      	movs	r3, #24
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2302      	movs	r3, #2
 8001b24:	2164      	movs	r1, #100	; 0x64
 8001b26:	206e      	movs	r0, #110	; 0x6e
 8001b28:	f7ff fab8 	bl	800109c <lcd_ShowIntNum>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200000a7 	.word	0x200000a7
 8001b38:	66666667 	.word	0x66666667

08001b3c <displayHour>:

void displayHour(int num, int isBlink) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af04      	add	r7, sp, #16
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d031      	beq.n	8001bb0 <displayHour+0x74>
		counter = (counter + 1)%10;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <displayHour+0x98>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <displayHour+0x9c>)
 8001b54:	fb83 1302 	smull	r1, r3, r3, r2
 8001b58:	1099      	asrs	r1, r3, #2
 8001b5a:	17d3      	asrs	r3, r2, #31
 8001b5c:	1ac9      	subs	r1, r1, r3
 8001b5e:	460b      	mov	r3, r1
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	1ad1      	subs	r1, r2, r3
 8001b68:	b2ca      	uxtb	r2, r1
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <displayHour+0x98>)
 8001b6c:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <displayHour+0x98>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d80d      	bhi.n	8001b92 <displayHour+0x56>
			lcd_ShowIntNum(70, 100, num, 2, BLACK, BLACK, 24);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	2318      	movs	r3, #24
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	2300      	movs	r3, #0
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2302      	movs	r3, #2
 8001b88:	2164      	movs	r1, #100	; 0x64
 8001b8a:	2046      	movs	r0, #70	; 0x46
 8001b8c:	f7ff fa86 	bl	800109c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(70, 100, num, 2, GREEN, BLACK, 24);
	}
}
 8001b90:	e01c      	b.n	8001bcc <displayHour+0x90>
			lcd_ShowIntNum(70, 100, num, 2, GREEN, BLACK, 24);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	2318      	movs	r3, #24
 8001b98:	9302      	str	r3, [sp, #8]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	2164      	movs	r1, #100	; 0x64
 8001ba8:	2046      	movs	r0, #70	; 0x46
 8001baa:	f7ff fa77 	bl	800109c <lcd_ShowIntNum>
}
 8001bae:	e00d      	b.n	8001bcc <displayHour+0x90>
		lcd_ShowIntNum(70, 100, num, 2, GREEN, BLACK, 24);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2318      	movs	r3, #24
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	2164      	movs	r1, #100	; 0x64
 8001bc6:	2046      	movs	r0, #70	; 0x46
 8001bc8:	f7ff fa68 	bl	800109c <lcd_ShowIntNum>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200000a7 	.word	0x200000a7
 8001bd8:	66666667 	.word	0x66666667

08001bdc <displayDay>:


void displayDay(int num, int isBlink) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af04      	add	r7, sp, #16
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d031      	beq.n	8001c50 <displayDay+0x74>
		counter = (counter + 1)%10;
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <displayDay+0x98>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <displayDay+0x9c>)
 8001bf4:	fb83 1302 	smull	r1, r3, r3, r2
 8001bf8:	1099      	asrs	r1, r3, #2
 8001bfa:	17d3      	asrs	r3, r2, #31
 8001bfc:	1ac9      	subs	r1, r1, r3
 8001bfe:	460b      	mov	r3, r1
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	1ad1      	subs	r1, r2, r3
 8001c08:	b2ca      	uxtb	r2, r1
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <displayDay+0x98>)
 8001c0c:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <displayDay+0x98>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d80d      	bhi.n	8001c32 <displayDay+0x56>
			lcd_ShowIntNum(20, 130, num, 2, BLACK, BLACK, 24);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	2318      	movs	r3, #24
 8001c1c:	9302      	str	r3, [sp, #8]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	2300      	movs	r3, #0
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2302      	movs	r3, #2
 8001c28:	2182      	movs	r1, #130	; 0x82
 8001c2a:	2014      	movs	r0, #20
 8001c2c:	f7ff fa36 	bl	800109c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(20, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001c30:	e01c      	b.n	8001c6c <displayDay+0x90>
			lcd_ShowIntNum(20, 130, num, 2, YELLOW, BLACK, 24);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	2318      	movs	r3, #24
 8001c38:	9302      	str	r3, [sp, #8]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2302      	movs	r3, #2
 8001c46:	2182      	movs	r1, #130	; 0x82
 8001c48:	2014      	movs	r0, #20
 8001c4a:	f7ff fa27 	bl	800109c <lcd_ShowIntNum>
}
 8001c4e:	e00d      	b.n	8001c6c <displayDay+0x90>
		lcd_ShowIntNum(20, 130, num, 2, YELLOW, BLACK, 24);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	2318      	movs	r3, #24
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2302      	movs	r3, #2
 8001c64:	2182      	movs	r1, #130	; 0x82
 8001c66:	2014      	movs	r0, #20
 8001c68:	f7ff fa18 	bl	800109c <lcd_ShowIntNum>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200000a7 	.word	0x200000a7
 8001c78:	66666667 	.word	0x66666667

08001c7c <displayDate>:

void displayDate(int num, int isBlink) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af04      	add	r7, sp, #16
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d031      	beq.n	8001cf0 <displayDate+0x74>
		counter = (counter + 1)%10;
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <displayDate+0x98>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <displayDate+0x9c>)
 8001c94:	fb83 1302 	smull	r1, r3, r3, r2
 8001c98:	1099      	asrs	r1, r3, #2
 8001c9a:	17d3      	asrs	r3, r2, #31
 8001c9c:	1ac9      	subs	r1, r1, r3
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	1ad1      	subs	r1, r2, r3
 8001ca8:	b2ca      	uxtb	r2, r1
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <displayDate+0x98>)
 8001cac:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <displayDate+0x98>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d80d      	bhi.n	8001cd2 <displayDate+0x56>
			lcd_ShowIntNum(70, 130, num, 2, BLACK, BLACK, 24);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	2318      	movs	r3, #24
 8001cbc:	9302      	str	r3, [sp, #8]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	2182      	movs	r1, #130	; 0x82
 8001cca:	2046      	movs	r0, #70	; 0x46
 8001ccc:	f7ff f9e6 	bl	800109c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001cd0:	e01c      	b.n	8001d0c <displayDate+0x90>
			lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	2318      	movs	r3, #24
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	2182      	movs	r1, #130	; 0x82
 8001ce8:	2046      	movs	r0, #70	; 0x46
 8001cea:	f7ff f9d7 	bl	800109c <lcd_ShowIntNum>
}
 8001cee:	e00d      	b.n	8001d0c <displayDate+0x90>
		lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	2318      	movs	r3, #24
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2302      	movs	r3, #2
 8001d04:	2182      	movs	r1, #130	; 0x82
 8001d06:	2046      	movs	r0, #70	; 0x46
 8001d08:	f7ff f9c8 	bl	800109c <lcd_ShowIntNum>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200000a7 	.word	0x200000a7
 8001d18:	66666667 	.word	0x66666667

08001d1c <displayMonth>:

void displayMonth(int num, int isBlink) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af04      	add	r7, sp, #16
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d031      	beq.n	8001d90 <displayMonth+0x74>
		counter = (counter + 1)%10;
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <displayMonth+0x98>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <displayMonth+0x9c>)
 8001d34:	fb83 1302 	smull	r1, r3, r3, r2
 8001d38:	1099      	asrs	r1, r3, #2
 8001d3a:	17d3      	asrs	r3, r2, #31
 8001d3c:	1ac9      	subs	r1, r1, r3
 8001d3e:	460b      	mov	r3, r1
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	1ad1      	subs	r1, r2, r3
 8001d48:	b2ca      	uxtb	r2, r1
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <displayMonth+0x98>)
 8001d4c:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <displayMonth+0x98>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d80d      	bhi.n	8001d72 <displayMonth+0x56>
			lcd_ShowIntNum(110, 130, num, 2, BLACK, BLACK, 24);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	2318      	movs	r3, #24
 8001d5c:	9302      	str	r3, [sp, #8]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	2300      	movs	r3, #0
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	2182      	movs	r1, #130	; 0x82
 8001d6a:	206e      	movs	r0, #110	; 0x6e
 8001d6c:	f7ff f996 	bl	800109c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(110, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001d70:	e01c      	b.n	8001dac <displayMonth+0x90>
			lcd_ShowIntNum(110, 130, num, 2, YELLOW, BLACK, 24);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	2318      	movs	r3, #24
 8001d78:	9302      	str	r3, [sp, #8]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2302      	movs	r3, #2
 8001d86:	2182      	movs	r1, #130	; 0x82
 8001d88:	206e      	movs	r0, #110	; 0x6e
 8001d8a:	f7ff f987 	bl	800109c <lcd_ShowIntNum>
}
 8001d8e:	e00d      	b.n	8001dac <displayMonth+0x90>
		lcd_ShowIntNum(110, 130, num, 2, YELLOW, BLACK, 24);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	2318      	movs	r3, #24
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2302      	movs	r3, #2
 8001da4:	2182      	movs	r1, #130	; 0x82
 8001da6:	206e      	movs	r0, #110	; 0x6e
 8001da8:	f7ff f978 	bl	800109c <lcd_ShowIntNum>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200000a7 	.word	0x200000a7
 8001db8:	66666667 	.word	0x66666667

08001dbc <displayYear>:

void displayYear(int num, int isBlink) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d031      	beq.n	8001e30 <displayYear+0x74>
		counter = (counter + 1)%10;
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <displayYear+0x98>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <displayYear+0x9c>)
 8001dd4:	fb83 1302 	smull	r1, r3, r3, r2
 8001dd8:	1099      	asrs	r1, r3, #2
 8001dda:	17d3      	asrs	r3, r2, #31
 8001ddc:	1ac9      	subs	r1, r1, r3
 8001dde:	460b      	mov	r3, r1
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	1ad1      	subs	r1, r2, r3
 8001de8:	b2ca      	uxtb	r2, r1
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <displayYear+0x98>)
 8001dec:	701a      	strb	r2, [r3, #0]
		if(counter < 5) {
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <displayYear+0x98>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d80d      	bhi.n	8001e12 <displayYear+0x56>
			lcd_ShowIntNum(150, 130, num, 2, BLACK, BLACK, 24);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	2318      	movs	r3, #24
 8001dfc:	9302      	str	r3, [sp, #8]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	2300      	movs	r3, #0
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2302      	movs	r3, #2
 8001e08:	2182      	movs	r1, #130	; 0x82
 8001e0a:	2096      	movs	r0, #150	; 0x96
 8001e0c:	f7ff f946 	bl	800109c <lcd_ShowIntNum>
		}
	}
	else {
		lcd_ShowIntNum(150, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001e10:	e01c      	b.n	8001e4c <displayYear+0x90>
			lcd_ShowIntNum(150, 130, num, 2, YELLOW, BLACK, 24);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	2318      	movs	r3, #24
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2302      	movs	r3, #2
 8001e26:	2182      	movs	r1, #130	; 0x82
 8001e28:	2096      	movs	r0, #150	; 0x96
 8001e2a:	f7ff f937 	bl	800109c <lcd_ShowIntNum>
}
 8001e2e:	e00d      	b.n	8001e4c <displayYear+0x90>
		lcd_ShowIntNum(150, 130, num, 2, YELLOW, BLACK, 24);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	2318      	movs	r3, #24
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2302      	movs	r3, #2
 8001e44:	2182      	movs	r1, #130	; 0x82
 8001e46:	2096      	movs	r0, #150	; 0x96
 8001e48:	f7ff f928 	bl	800109c <lcd_ShowIntNum>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200000a7 	.word	0x200000a7
 8001e58:	66666667 	.word	0x66666667

08001e5c <displayTime>:
	lcd_ShowIntNum(110, 130, month, 2, YELLOW, BLACK, 24);
	lcd_ShowIntNum(150, 130, year, 2, YELLOW, BLACK, 24);
}


void displayTime(){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <displayTime+0xe0>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	2318      	movs	r3, #24
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2302      	movs	r3, #2
 8001e78:	2164      	movs	r1, #100	; 0x64
 8001e7a:	2046      	movs	r0, #70	; 0x46
 8001e7c:	f7ff f90e 	bl	800109c <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001e80:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <displayTime+0xe4>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	2318      	movs	r3, #24
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2302      	movs	r3, #2
 8001e96:	2164      	movs	r1, #100	; 0x64
 8001e98:	206e      	movs	r0, #110	; 0x6e
 8001e9a:	f7ff f8ff 	bl	800109c <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <displayTime+0xe8>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	2318      	movs	r3, #24
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	2164      	movs	r1, #100	; 0x64
 8001eb6:	2096      	movs	r0, #150	; 0x96
 8001eb8:	f7ff f8f0 	bl	800109c <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <displayTime+0xec>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	2318      	movs	r3, #24
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	2182      	movs	r1, #130	; 0x82
 8001ed4:	2014      	movs	r0, #20
 8001ed6:	f7ff f8e1 	bl	800109c <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <displayTime+0xf0>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	2318      	movs	r3, #24
 8001ee2:	9302      	str	r3, [sp, #8]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2302      	movs	r3, #2
 8001ef0:	2182      	movs	r1, #130	; 0x82
 8001ef2:	2046      	movs	r0, #70	; 0x46
 8001ef4:	f7ff f8d2 	bl	800109c <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <displayTime+0xf4>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	2318      	movs	r3, #24
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	2300      	movs	r3, #0
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	2182      	movs	r1, #130	; 0x82
 8001f10:	206e      	movs	r0, #110	; 0x6e
 8001f12:	f7ff f8c3 	bl	800109c <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <displayTime+0xf8>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	2318      	movs	r3, #24
 8001f1e:	9302      	str	r3, [sp, #8]
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	2182      	movs	r1, #130	; 0x82
 8001f2e:	2096      	movs	r0, #150	; 0x96
 8001f30:	f7ff f8b4 	bl	800109c <lcd_ShowIntNum>
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000010d 	.word	0x2000010d
 8001f40:	2000010a 	.word	0x2000010a
 8001f44:	20000108 	.word	0x20000108
 8001f48:	2000010c 	.word	0x2000010c
 8001f4c:	2000010b 	.word	0x2000010b
 8001f50:	2000010e 	.word	0x2000010e
 8001f54:	20000109 	.word	0x20000109

08001f58 <adjustTime>:

void adjustTime() {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0

    // Check for button presses
//	uart_Rs232SendNum(counter);
//	uart_Rs232SendNum(flag_timer2);
	if (flag_timer2) {
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <adjustTime+0x16c>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <adjustTime+0x18>
		counter++;
 8001f64:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <adjustTime+0x170>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <adjustTime+0x170>)
 8001f6e:	701a      	strb	r2, [r3, #0]
	}
    if (isButtonUp() && flag == 0) {
 8001f70:	f7ff fc7c 	bl	800186c <isButtonUp>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80d2 	beq.w	8002120 <adjustTime+0x1c8>
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <adjustTime+0x174>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 80cd 	bne.w	8002120 <adjustTime+0x1c8>

        // Increment current field
    	if (adjustMode == 0) {
 8001f86:	4b52      	ldr	r3, [pc, #328]	; (80020d0 <adjustTime+0x178>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d112      	bne.n	8001fb4 <adjustTime+0x5c>
//			}
//			else if (counter == 10) {
//				lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
//				counter = 0;
//			}
			sec = (sec + 1) % 60;
 8001f8e:	4b51      	ldr	r3, [pc, #324]	; (80020d4 <adjustTime+0x17c>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	4b50      	ldr	r3, [pc, #320]	; (80020d8 <adjustTime+0x180>)
 8001f96:	fb83 1302 	smull	r1, r3, r3, r2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	1159      	asrs	r1, r3, #5
 8001f9e:	17d3      	asrs	r3, r2, #31
 8001fa0:	1ac9      	subs	r1, r1, r3
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	1a5b      	subs	r3, r3, r1
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	1ad1      	subs	r1, r2, r3
 8001fac:	b2ca      	uxtb	r2, r1
 8001fae:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <adjustTime+0x17c>)
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e0b5      	b.n	8002120 <adjustTime+0x1c8>
        } else if (adjustMode == 1) {
 8001fb4:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <adjustTime+0x178>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d112      	bne.n	8001fe2 <adjustTime+0x8a>
//			}
//        	else if (counter == 10) {
//				lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
//				counter = 0;
//			}
            min = (min + 1) % 60;
 8001fbc:	4b47      	ldr	r3, [pc, #284]	; (80020dc <adjustTime+0x184>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	4b45      	ldr	r3, [pc, #276]	; (80020d8 <adjustTime+0x180>)
 8001fc4:	fb83 1302 	smull	r1, r3, r3, r2
 8001fc8:	4413      	add	r3, r2
 8001fca:	1159      	asrs	r1, r3, #5
 8001fcc:	17d3      	asrs	r3, r2, #31
 8001fce:	1ac9      	subs	r1, r1, r3
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a5b      	subs	r3, r3, r1
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	1ad1      	subs	r1, r2, r3
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <adjustTime+0x184>)
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e09e      	b.n	8002120 <adjustTime+0x1c8>
        } else if (adjustMode == 2) {
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <adjustTime+0x178>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d111      	bne.n	800200e <adjustTime+0xb6>
//			}
//        	else if (counter == 10) {
//				lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
//				counter = 0;
//			}
            hours = (hours + 1) % 24;
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <adjustTime+0x188>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <adjustTime+0x18c>)
 8001ff2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ff6:	1099      	asrs	r1, r3, #2
 8001ff8:	17d3      	asrs	r3, r2, #31
 8001ffa:	1ac9      	subs	r1, r1, r3
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	440b      	add	r3, r1
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	1ad1      	subs	r1, r2, r3
 8002006:	b2ca      	uxtb	r2, r1
 8002008:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <adjustTime+0x188>)
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e088      	b.n	8002120 <adjustTime+0x1c8>
        } else if (adjustMode == 3) {
 800200e:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <adjustTime+0x178>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d139      	bne.n	800208a <adjustTime+0x132>
//        	if (day = 0) {
//        		day = 7;
//        	} else if (day = 1) {
//        		day = 8;
//        	}
        	date = (date + 1) % 30;
 8002016:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <adjustTime+0x190>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <adjustTime+0x180>)
 800201e:	fb83 1302 	smull	r1, r3, r3, r2
 8002022:	4413      	add	r3, r2
 8002024:	1119      	asrs	r1, r3, #4
 8002026:	17d3      	asrs	r3, r2, #31
 8002028:	1ac9      	subs	r1, r1, r3
 800202a:	460b      	mov	r3, r1
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a5b      	subs	r3, r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	1ad1      	subs	r1, r2, r3
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <adjustTime+0x190>)
 8002038:	701a      	strb	r2, [r3, #0]
			if (!date) {
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <adjustTime+0x190>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <adjustTime+0xf0>
				date = 30;}
 8002042:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <adjustTime+0x190>)
 8002044:	221e      	movs	r2, #30
 8002046:	701a      	strb	r2, [r3, #0]
			day = (day + 1) % 7;
 8002048:	4b28      	ldr	r3, [pc, #160]	; (80020ec <adjustTime+0x194>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <adjustTime+0x198>)
 8002050:	fb83 1302 	smull	r1, r3, r3, r2
 8002054:	4413      	add	r3, r2
 8002056:	1099      	asrs	r1, r3, #2
 8002058:	17d3      	asrs	r3, r2, #31
 800205a:	1ac9      	subs	r1, r1, r3
 800205c:	460b      	mov	r3, r1
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	1a5b      	subs	r3, r3, r1
 8002062:	1ad1      	subs	r1, r2, r3
 8002064:	b2ca      	uxtb	r2, r1
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <adjustTime+0x194>)
 8002068:	701a      	strb	r2, [r3, #0]
			if (day == 0) {
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <adjustTime+0x194>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <adjustTime+0x122>
				day = 7;}
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <adjustTime+0x194>)
 8002074:	2207      	movs	r2, #7
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e052      	b.n	8002120 <adjustTime+0x1c8>
			else if (day == 1) {
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <adjustTime+0x194>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d14e      	bne.n	8002120 <adjustTime+0x1c8>
				day = 8;}
 8002082:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <adjustTime+0x194>)
 8002084:	2208      	movs	r2, #8
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	e04a      	b.n	8002120 <adjustTime+0x1c8>
        } else if (adjustMode == 4) {
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <adjustTime+0x178>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b04      	cmp	r3, #4
 8002090:	d132      	bne.n	80020f8 <adjustTime+0x1a0>
//			}
//        	else if (counter == 10) {
//				lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
//				counter = 0;
//			}
        	month = (month + 1) % 12;
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <adjustTime+0x19c>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <adjustTime+0x18c>)
 800209a:	fb83 1302 	smull	r1, r3, r3, r2
 800209e:	1059      	asrs	r1, r3, #1
 80020a0:	17d3      	asrs	r3, r2, #31
 80020a2:	1ac9      	subs	r1, r1, r3
 80020a4:	460b      	mov	r3, r1
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	440b      	add	r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	1ad1      	subs	r1, r2, r3
 80020ae:	b2ca      	uxtb	r2, r1
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <adjustTime+0x19c>)
 80020b2:	701a      	strb	r2, [r3, #0]
        	if (!month) {
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <adjustTime+0x19c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d131      	bne.n	8002120 <adjustTime+0x1c8>
        		month = 12;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <adjustTime+0x19c>)
 80020be:	220c      	movs	r2, #12
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e02d      	b.n	8002120 <adjustTime+0x1c8>
 80020c4:	200000b0 	.word	0x200000b0
 80020c8:	200000a7 	.word	0x200000a7
 80020cc:	200001f6 	.word	0x200001f6
 80020d0:	200000a6 	.word	0x200000a6
 80020d4:	200001fa 	.word	0x200001fa
 80020d8:	88888889 	.word	0x88888889
 80020dc:	200001f8 	.word	0x200001f8
 80020e0:	200001fd 	.word	0x200001fd
 80020e4:	2aaaaaab 	.word	0x2aaaaaab
 80020e8:	200001fc 	.word	0x200001fc
 80020ec:	200001fb 	.word	0x200001fb
 80020f0:	92492493 	.word	0x92492493
 80020f4:	200001f7 	.word	0x200001f7
        	}
        }else if (adjustMode == 5) {
 80020f8:	4b5c      	ldr	r3, [pc, #368]	; (800226c <adjustTime+0x314>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d10f      	bne.n	8002120 <adjustTime+0x1c8>
//			}
//        	else if (counter == 10) {
//				lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
//				counter = 0;
//			}
        	year = (year + 1) % 100;
 8002100:	4b5b      	ldr	r3, [pc, #364]	; (8002270 <adjustTime+0x318>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	4a5b      	ldr	r2, [pc, #364]	; (8002274 <adjustTime+0x31c>)
 8002108:	fb82 1203 	smull	r1, r2, r2, r3
 800210c:	1151      	asrs	r1, r2, #5
 800210e:	17da      	asrs	r2, r3, #31
 8002110:	1a8a      	subs	r2, r1, r2
 8002112:	2164      	movs	r1, #100	; 0x64
 8002114:	fb01 f202 	mul.w	r2, r1, r2
 8002118:	1a9a      	subs	r2, r3, r2
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	4b54      	ldr	r3, [pc, #336]	; (8002270 <adjustTime+0x318>)
 800211e:	701a      	strb	r2, [r3, #0]
//
//
//
//	}

    if (button_count[12] == 1) {  // Button to cycle fields
 8002120:	4b55      	ldr	r3, [pc, #340]	; (8002278 <adjustTime+0x320>)
 8002122:	8b1b      	ldrh	r3, [r3, #24]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d13c      	bne.n	80021a2 <adjustTime+0x24a>
		adjustMode = (adjustMode + 1) % 6;  // Cycle through hours, minutes, seconds
 8002128:	4b50      	ldr	r3, [pc, #320]	; (800226c <adjustTime+0x314>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	4b53      	ldr	r3, [pc, #332]	; (800227c <adjustTime+0x324>)
 8002130:	fb83 3102 	smull	r3, r1, r3, r2
 8002134:	17d3      	asrs	r3, r2, #31
 8002136:	1ac9      	subs	r1, r1, r3
 8002138:	460b      	mov	r3, r1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	440b      	add	r3, r1
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	1ad1      	subs	r1, r2, r3
 8002142:	b2ca      	uxtb	r2, r1
 8002144:	4b49      	ldr	r3, [pc, #292]	; (800226c <adjustTime+0x314>)
 8002146:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8002148:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <adjustTime+0x328>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
		ds3231_Write(ADDRESS_YEAR, year);
 800214e:	4b48      	ldr	r3, [pc, #288]	; (8002270 <adjustTime+0x318>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4619      	mov	r1, r3
 8002154:	2006      	movs	r0, #6
 8002156:	f7fe faeb 	bl	8000730 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, month);
 800215a:	4b4a      	ldr	r3, [pc, #296]	; (8002284 <adjustTime+0x32c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	2005      	movs	r0, #5
 8002162:	f7fe fae5 	bl	8000730 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, date);
 8002166:	4b48      	ldr	r3, [pc, #288]	; (8002288 <adjustTime+0x330>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	2004      	movs	r0, #4
 800216e:	f7fe fadf 	bl	8000730 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, day);
 8002172:	4b46      	ldr	r3, [pc, #280]	; (800228c <adjustTime+0x334>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	2003      	movs	r0, #3
 800217a:	f7fe fad9 	bl	8000730 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, hours);
 800217e:	4b44      	ldr	r3, [pc, #272]	; (8002290 <adjustTime+0x338>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	2002      	movs	r0, #2
 8002186:	f7fe fad3 	bl	8000730 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, min);
 800218a:	4b42      	ldr	r3, [pc, #264]	; (8002294 <adjustTime+0x33c>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	4619      	mov	r1, r3
 8002190:	2001      	movs	r0, #1
 8002192:	f7fe facd 	bl	8000730 <ds3231_Write>
		ds3231_Write(ADDRESS_SEC, sec);
 8002196:	4b40      	ldr	r3, [pc, #256]	; (8002298 <adjustTime+0x340>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4619      	mov	r1, r3
 800219c:	2000      	movs	r0, #0
 800219e:	f7fe fac7 	bl	8000730 <ds3231_Write>

	}
//    editTime(hours, min, sec, day, date, month, year);
	displaySec(sec, adjustMode == 0);
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <adjustTime+0x340>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <adjustTime+0x314>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4619      	mov	r1, r3
 80021b8:	4610      	mov	r0, r2
 80021ba:	f7ff fc1f 	bl	80019fc <displaySec>
	displayMin(min, adjustMode == 1);
 80021be:	4b35      	ldr	r3, [pc, #212]	; (8002294 <adjustTime+0x33c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <adjustTime+0x314>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f7ff fc61 	bl	8001a9c <displayMin>
	displayHour(hours, adjustMode == 2);
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <adjustTime+0x338>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <adjustTime+0x314>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7ff fca3 	bl	8001b3c <displayHour>
	displayDay(day, adjustMode == 3);
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <adjustTime+0x334>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <adjustTime+0x314>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b03      	cmp	r3, #3
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7ff fce5 	bl	8001bdc <displayDay>
	displayDate(date, adjustMode == 3);
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <adjustTime+0x330>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <adjustTime+0x314>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b03      	cmp	r3, #3
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7ff fd27 	bl	8001c7c <displayDate>
	displayMonth(month, adjustMode == 4);
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <adjustTime+0x32c>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <adjustTime+0x314>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b04      	cmp	r3, #4
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f7ff fd69 	bl	8001d1c <displayMonth>
	displayYear(year, adjustMode == 5);
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <adjustTime+0x318>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <adjustTime+0x314>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b05      	cmp	r3, #5
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7ff fdab 	bl	8001dbc <displayYear>
    // Move to the next field when another button is pressed

}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200000a6 	.word	0x200000a6
 8002270:	200001f9 	.word	0x200001f9
 8002274:	51eb851f 	.word	0x51eb851f
 8002278:	200000c8 	.word	0x200000c8
 800227c:	2aaaaaab 	.word	0x2aaaaaab
 8002280:	200000a7 	.word	0x200000a7
 8002284:	200001f7 	.word	0x200001f7
 8002288:	200001fc 	.word	0x200001fc
 800228c:	200001fb 	.word	0x200001fb
 8002290:	200001fd 	.word	0x200001fd
 8002294:	200001f8 	.word	0x200001f8
 8002298:	200001fa 	.word	0x200001fa

0800229c <setTimer>:
uint8_t timer_date = 0;
uint8_t timer_month = 0;
uint8_t timer_year = 0;
  // 0 = hours, 1 = minutes, 2 = seconds

void setTimer() {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
    // Increment or decrement the current field
	if (flag_timer2){
 80022a0:	4b9e      	ldr	r3, [pc, #632]	; (800251c <setTimer+0x280>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <setTimer+0x18>
		counter++;
 80022a8:	4b9d      	ldr	r3, [pc, #628]	; (8002520 <setTimer+0x284>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	4b9b      	ldr	r3, [pc, #620]	; (8002520 <setTimer+0x284>)
 80022b2:	701a      	strb	r2, [r3, #0]
	}
    if (isButtonUp()) {
 80022b4:	f7ff fada 	bl	800186c <isButtonUp>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80b3 	beq.w	8002426 <setTimer+0x18a>
    	if (timerMode == 0) {
 80022c0:	4b98      	ldr	r3, [pc, #608]	; (8002524 <setTimer+0x288>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d112      	bne.n	80022ee <setTimer+0x52>
//    		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
    		timer_seconds = (timer_seconds + 1) % 60;
 80022c8:	4b97      	ldr	r3, [pc, #604]	; (8002528 <setTimer+0x28c>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	4b97      	ldr	r3, [pc, #604]	; (800252c <setTimer+0x290>)
 80022d0:	fb83 1302 	smull	r1, r3, r3, r2
 80022d4:	4413      	add	r3, r2
 80022d6:	1159      	asrs	r1, r3, #5
 80022d8:	17d3      	asrs	r3, r2, #31
 80022da:	1ac9      	subs	r1, r1, r3
 80022dc:	460b      	mov	r3, r1
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a5b      	subs	r3, r3, r1
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	1ad1      	subs	r1, r2, r3
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	4b8f      	ldr	r3, [pc, #572]	; (8002528 <setTimer+0x28c>)
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e09b      	b.n	8002426 <setTimer+0x18a>
		} else if (timerMode == 1) {
 80022ee:	4b8d      	ldr	r3, [pc, #564]	; (8002524 <setTimer+0x288>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d112      	bne.n	800231c <setTimer+0x80>
			timer_minutes = (timer_minutes + 1) % 60;
 80022f6:	4b8e      	ldr	r3, [pc, #568]	; (8002530 <setTimer+0x294>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	4b8b      	ldr	r3, [pc, #556]	; (800252c <setTimer+0x290>)
 80022fe:	fb83 1302 	smull	r1, r3, r3, r2
 8002302:	4413      	add	r3, r2
 8002304:	1159      	asrs	r1, r3, #5
 8002306:	17d3      	asrs	r3, r2, #31
 8002308:	1ac9      	subs	r1, r1, r3
 800230a:	460b      	mov	r3, r1
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	1a5b      	subs	r3, r3, r1
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	1ad1      	subs	r1, r2, r3
 8002314:	b2ca      	uxtb	r2, r1
 8002316:	4b86      	ldr	r3, [pc, #536]	; (8002530 <setTimer+0x294>)
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e084      	b.n	8002426 <setTimer+0x18a>
		} else if (timerMode == 2) {
 800231c:	4b81      	ldr	r3, [pc, #516]	; (8002524 <setTimer+0x288>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d111      	bne.n	8002348 <setTimer+0xac>
			timer_hours = (timer_hours + 1) % 24;
 8002324:	4b83      	ldr	r3, [pc, #524]	; (8002534 <setTimer+0x298>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	4b83      	ldr	r3, [pc, #524]	; (8002538 <setTimer+0x29c>)
 800232c:	fb83 1302 	smull	r1, r3, r3, r2
 8002330:	1099      	asrs	r1, r3, #2
 8002332:	17d3      	asrs	r3, r2, #31
 8002334:	1ac9      	subs	r1, r1, r3
 8002336:	460b      	mov	r3, r1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	440b      	add	r3, r1
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	1ad1      	subs	r1, r2, r3
 8002340:	b2ca      	uxtb	r2, r1
 8002342:	4b7c      	ldr	r3, [pc, #496]	; (8002534 <setTimer+0x298>)
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e06e      	b.n	8002426 <setTimer+0x18a>
		} else if (timerMode == 3) {
 8002348:	4b76      	ldr	r3, [pc, #472]	; (8002524 <setTimer+0x288>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d139      	bne.n	80023c4 <setTimer+0x128>
			timer_date = (timer_date + 1) % 30;
 8002350:	4b7a      	ldr	r3, [pc, #488]	; (800253c <setTimer+0x2a0>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	4b75      	ldr	r3, [pc, #468]	; (800252c <setTimer+0x290>)
 8002358:	fb83 1302 	smull	r1, r3, r3, r2
 800235c:	4413      	add	r3, r2
 800235e:	1119      	asrs	r1, r3, #4
 8002360:	17d3      	asrs	r3, r2, #31
 8002362:	1ac9      	subs	r1, r1, r3
 8002364:	460b      	mov	r3, r1
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a5b      	subs	r3, r3, r1
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	1ad1      	subs	r1, r2, r3
 800236e:	b2ca      	uxtb	r2, r1
 8002370:	4b72      	ldr	r3, [pc, #456]	; (800253c <setTimer+0x2a0>)
 8002372:	701a      	strb	r2, [r3, #0]
			if (!timer_date) {
 8002374:	4b71      	ldr	r3, [pc, #452]	; (800253c <setTimer+0x2a0>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <setTimer+0xe6>
				timer_date = 30;}
 800237c:	4b6f      	ldr	r3, [pc, #444]	; (800253c <setTimer+0x2a0>)
 800237e:	221e      	movs	r2, #30
 8002380:	701a      	strb	r2, [r3, #0]
			timer_day = (timer_day + 1) % 7;
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <setTimer+0x2a4>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	4b6e      	ldr	r3, [pc, #440]	; (8002544 <setTimer+0x2a8>)
 800238a:	fb83 1302 	smull	r1, r3, r3, r2
 800238e:	4413      	add	r3, r2
 8002390:	1099      	asrs	r1, r3, #2
 8002392:	17d3      	asrs	r3, r2, #31
 8002394:	1ac9      	subs	r1, r1, r3
 8002396:	460b      	mov	r3, r1
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	1a5b      	subs	r3, r3, r1
 800239c:	1ad1      	subs	r1, r2, r3
 800239e:	b2ca      	uxtb	r2, r1
 80023a0:	4b67      	ldr	r3, [pc, #412]	; (8002540 <setTimer+0x2a4>)
 80023a2:	701a      	strb	r2, [r3, #0]
			if (timer_day == 0) {
 80023a4:	4b66      	ldr	r3, [pc, #408]	; (8002540 <setTimer+0x2a4>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <setTimer+0x118>
				timer_day = 7;}
 80023ac:	4b64      	ldr	r3, [pc, #400]	; (8002540 <setTimer+0x2a4>)
 80023ae:	2207      	movs	r2, #7
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e038      	b.n	8002426 <setTimer+0x18a>
			else if (timer_day == 1) {
 80023b4:	4b62      	ldr	r3, [pc, #392]	; (8002540 <setTimer+0x2a4>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d134      	bne.n	8002426 <setTimer+0x18a>
				timer_day = 8;}
 80023bc:	4b60      	ldr	r3, [pc, #384]	; (8002540 <setTimer+0x2a4>)
 80023be:	2208      	movs	r2, #8
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e030      	b.n	8002426 <setTimer+0x18a>
		} else if (timerMode == 4) {
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <setTimer+0x288>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d118      	bne.n	80023fe <setTimer+0x162>
			timer_month = (timer_month + 1) % 12;
 80023cc:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <setTimer+0x2ac>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	4b59      	ldr	r3, [pc, #356]	; (8002538 <setTimer+0x29c>)
 80023d4:	fb83 1302 	smull	r1, r3, r3, r2
 80023d8:	1059      	asrs	r1, r3, #1
 80023da:	17d3      	asrs	r3, r2, #31
 80023dc:	1ac9      	subs	r1, r1, r3
 80023de:	460b      	mov	r3, r1
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	440b      	add	r3, r1
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	1ad1      	subs	r1, r2, r3
 80023e8:	b2ca      	uxtb	r2, r1
 80023ea:	4b57      	ldr	r3, [pc, #348]	; (8002548 <setTimer+0x2ac>)
 80023ec:	701a      	strb	r2, [r3, #0]
			if (!timer_month) {
 80023ee:	4b56      	ldr	r3, [pc, #344]	; (8002548 <setTimer+0x2ac>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d117      	bne.n	8002426 <setTimer+0x18a>
				timer_month = 12;}
 80023f6:	4b54      	ldr	r3, [pc, #336]	; (8002548 <setTimer+0x2ac>)
 80023f8:	220c      	movs	r2, #12
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e013      	b.n	8002426 <setTimer+0x18a>
		}else if (timerMode == 5) {
 80023fe:	4b49      	ldr	r3, [pc, #292]	; (8002524 <setTimer+0x288>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d10f      	bne.n	8002426 <setTimer+0x18a>
			timer_year = (timer_year + 1) % 100;
 8002406:	4b51      	ldr	r3, [pc, #324]	; (800254c <setTimer+0x2b0>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	4a50      	ldr	r2, [pc, #320]	; (8002550 <setTimer+0x2b4>)
 800240e:	fb82 1203 	smull	r1, r2, r2, r3
 8002412:	1151      	asrs	r1, r2, #5
 8002414:	17da      	asrs	r2, r3, #31
 8002416:	1a8a      	subs	r2, r1, r2
 8002418:	2164      	movs	r1, #100	; 0x64
 800241a:	fb01 f202 	mul.w	r2, r1, r2
 800241e:	1a9a      	subs	r2, r3, r2
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <setTimer+0x2b0>)
 8002424:	701a      	strb	r2, [r3, #0]
    }
    }


    if (button_count[12] == 1) {  // Button to cycle fields
 8002426:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <setTimer+0x2b8>)
 8002428:	8b1b      	ldrh	r3, [r3, #24]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d112      	bne.n	8002454 <setTimer+0x1b8>
    	timerMode = (timerMode + 1) % 6;  // Cycle through hours, minutes, seconds
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <setTimer+0x288>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	4b40      	ldr	r3, [pc, #256]	; (8002538 <setTimer+0x29c>)
 8002436:	fb83 3102 	smull	r3, r1, r3, r2
 800243a:	17d3      	asrs	r3, r2, #31
 800243c:	1ac9      	subs	r1, r1, r3
 800243e:	460b      	mov	r3, r1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	440b      	add	r3, r1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	1ad1      	subs	r1, r2, r3
 8002448:	b2ca      	uxtb	r2, r1
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <setTimer+0x288>)
 800244c:	701a      	strb	r2, [r3, #0]
    	counter = 0;
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <setTimer+0x284>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
//		ds3231_Write(ADDRESS_DATE, timer_date);
//		ds3231_Write(ADDRESS_DAY, timer_day);
	}

//    editTime(timer_hours, timer_minutes, timer_seconds, timer_day, timer_date, timer_month, timer_year);
    displaySec(timer_seconds, timerMode == 0);
 8002454:	4b34      	ldr	r3, [pc, #208]	; (8002528 <setTimer+0x28c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b32      	ldr	r3, [pc, #200]	; (8002524 <setTimer+0x288>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f7ff fac6 	bl	80019fc <displaySec>
	displayMin(timer_minutes, timerMode == 1);
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <setTimer+0x294>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <setTimer+0x288>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b01      	cmp	r3, #1
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f7ff fb08 	bl	8001a9c <displayMin>
	displayHour(timer_hours, timerMode == 2);
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <setTimer+0x298>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <setTimer+0x288>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b02      	cmp	r3, #2
 8002498:	bf0c      	ite	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	2300      	movne	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f7ff fb4a 	bl	8001b3c <displayHour>
	displayDay(timer_day, timerMode == 3);
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <setTimer+0x2a4>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <setTimer+0x288>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f7ff fb8c 	bl	8001bdc <displayDay>
	displayDate(timer_date, timerMode == 3);
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <setTimer+0x2a0>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <setTimer+0x288>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f7ff fbce 	bl	8001c7c <displayDate>
	displayMonth(timer_month, timerMode == 4);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <setTimer+0x2ac>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <setTimer+0x288>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f7ff fc10 	bl	8001d1c <displayMonth>
	displayYear(timer_year, timerMode == 5);
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <setTimer+0x2b0>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <setTimer+0x288>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b05      	cmp	r3, #5
 8002508:	bf0c      	ite	eq
 800250a:	2301      	moveq	r3, #1
 800250c:	2300      	movne	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	4619      	mov	r1, r3
 8002512:	4610      	mov	r0, r2
 8002514:	f7ff fc52 	bl	8001dbc <displayYear>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200000b0 	.word	0x200000b0
 8002520:	200000a7 	.word	0x200000a7
 8002524:	200000a5 	.word	0x200000a5
 8002528:	200000ab 	.word	0x200000ab
 800252c:	88888889 	.word	0x88888889
 8002530:	200000aa 	.word	0x200000aa
 8002534:	200000a9 	.word	0x200000a9
 8002538:	2aaaaaab 	.word	0x2aaaaaab
 800253c:	200000ad 	.word	0x200000ad
 8002540:	200000ac 	.word	0x200000ac
 8002544:	92492493 	.word	0x92492493
 8002548:	200000ae 	.word	0x200000ae
 800254c:	200000af 	.word	0x200000af
 8002550:	51eb851f 	.word	0x51eb851f
 8002554:	200000c8 	.word	0x200000c8

08002558 <clock_mode>:

void clock_mode(uint32_t currentMillis) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
    // Check if button is pressed and if debounce period has passed
    if (button_count[0] == 1 ) {
 8002560:	4b38      	ldr	r3, [pc, #224]	; (8002644 <clock_mode+0xec>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d167      	bne.n	8002638 <clock_mode+0xe0>
        // Cycle through modes
//    	currentMode++;
    	currentMode = (currentMode + 1) % 4;
 8002568:	4b37      	ldr	r3, [pc, #220]	; (8002648 <clock_mode+0xf0>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	425a      	negs	r2, r3
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	f002 0203 	and.w	r2, r2, #3
 8002578:	bf58      	it	pl
 800257a:	4253      	negpl	r3, r2
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <clock_mode+0xf0>)
 8002580:	701a      	strb	r2, [r3, #0]
//    	if (currentMode == TIME_UPDATE)
//    		currentMode = TIME_DISPLAY;
    	if (currentMode == TIME_ADJUST){
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <clock_mode+0xf0>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d13d      	bne.n	8002606 <clock_mode+0xae>
        counter = 0;
 800258a:	4b30      	ldr	r3, [pc, #192]	; (800264c <clock_mode+0xf4>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
    		ds3231_ReadTime();
 8002590:	f7fe f8f0 	bl	8000774 <ds3231_ReadTime>
    		hours = ds3231_hours;
 8002594:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <clock_mode+0xf8>)
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <clock_mode+0xfc>)
 800259a:	701a      	strb	r2, [r3, #0]
			min = ds3231_min;
 800259c:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <clock_mode+0x100>)
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <clock_mode+0x104>)
 80025a2:	701a      	strb	r2, [r3, #0]
			sec = ds3231_sec;
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <clock_mode+0x108>)
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <clock_mode+0x10c>)
 80025aa:	701a      	strb	r2, [r3, #0]
			day = ds3231_day;
 80025ac:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <clock_mode+0x110>)
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	4b2e      	ldr	r3, [pc, #184]	; (800266c <clock_mode+0x114>)
 80025b2:	701a      	strb	r2, [r3, #0]
			date = ds3231_date;
 80025b4:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <clock_mode+0x118>)
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <clock_mode+0x11c>)
 80025ba:	701a      	strb	r2, [r3, #0]
			month = ds3231_month;
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <clock_mode+0x120>)
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	4b2e      	ldr	r3, [pc, #184]	; (800267c <clock_mode+0x124>)
 80025c2:	701a      	strb	r2, [r3, #0]
			year = ds3231_year;
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <clock_mode+0x128>)
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <clock_mode+0x12c>)
 80025ca:	701a      	strb	r2, [r3, #0]
			timer_hours = ds3231_hours;
 80025cc:	4b20      	ldr	r3, [pc, #128]	; (8002650 <clock_mode+0xf8>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <clock_mode+0x130>)
 80025d2:	701a      	strb	r2, [r3, #0]
			timer_minutes = ds3231_min;
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <clock_mode+0x100>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	4b2c      	ldr	r3, [pc, #176]	; (800268c <clock_mode+0x134>)
 80025da:	701a      	strb	r2, [r3, #0]
			timer_seconds = ds3231_sec;
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <clock_mode+0x108>)
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <clock_mode+0x138>)
 80025e2:	701a      	strb	r2, [r3, #0]
			timer_day = ds3231_day;
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <clock_mode+0x110>)
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <clock_mode+0x13c>)
 80025ea:	701a      	strb	r2, [r3, #0]
			timer_date = ds3231_date;
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <clock_mode+0x118>)
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	4b29      	ldr	r3, [pc, #164]	; (8002698 <clock_mode+0x140>)
 80025f2:	701a      	strb	r2, [r3, #0]
			timer_month = ds3231_month;
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <clock_mode+0x120>)
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <clock_mode+0x144>)
 80025fa:	701a      	strb	r2, [r3, #0]
			timer_year = ds3231_year;
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <clock_mode+0x128>)
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <clock_mode+0x148>)
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e018      	b.n	8002638 <clock_mode+0xe0>

    	}
    	else if (currentMode == TIMER_MODE){
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <clock_mode+0xf0>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d103      	bne.n	8002616 <clock_mode+0xbe>
    		counter = 0;
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <clock_mode+0xf4>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e010      	b.n	8002638 <clock_mode+0xe0>
    	}
      else if (currentMode == TIME_UPDATE){
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <clock_mode+0xf0>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d10c      	bne.n	8002638 <clock_mode+0xe0>
//    	printf("%d", cnt);
    	UART_flag = 0;
 800261e:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <clock_mode+0x14c>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
    	cnt_uart = 0;
 8002624:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <clock_mode+0x150>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
        cnt = 3 * 200;
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <clock_mode+0x154>)
 800262c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002630:	801a      	strh	r2, [r3, #0]
        idx = 0;
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <clock_mode+0x158>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
//    		timer_hours = ds3231_hours;
//    		timer_minutes = ds3231_min;
//    		timer_seconds = ds3231_sec;
//    	}
    }
    display_lcd();
 8002638:	f7ff f934 	bl	80018a4 <display_lcd>

}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200000c8 	.word	0x200000c8
 8002648:	200000a4 	.word	0x200000a4
 800264c:	200000a7 	.word	0x200000a7
 8002650:	2000010d 	.word	0x2000010d
 8002654:	200001fd 	.word	0x200001fd
 8002658:	2000010a 	.word	0x2000010a
 800265c:	200001f8 	.word	0x200001f8
 8002660:	20000108 	.word	0x20000108
 8002664:	200001fa 	.word	0x200001fa
 8002668:	2000010c 	.word	0x2000010c
 800266c:	200001fb 	.word	0x200001fb
 8002670:	2000010b 	.word	0x2000010b
 8002674:	200001fc 	.word	0x200001fc
 8002678:	2000010e 	.word	0x2000010e
 800267c:	200001f7 	.word	0x200001f7
 8002680:	20000109 	.word	0x20000109
 8002684:	200001f9 	.word	0x200001f9
 8002688:	200000a9 	.word	0x200000a9
 800268c:	200000aa 	.word	0x200000aa
 8002690:	200000ab 	.word	0x200000ab
 8002694:	200000ac 	.word	0x200000ac
 8002698:	200000ad 	.word	0x200000ad
 800269c:	200000ae 	.word	0x200000ae
 80026a0:	200000af 	.word	0x200000af
 80026a4:	200000bc 	.word	0x200000bc
 80026a8:	20000305 	.word	0x20000305
 80026ac:	20000001 	.word	0x20000001
 80026b0:	200000a8 	.word	0x200000a8

080026b4 <checkAlarm>:

// Alarm checking function for Timer Mode
void checkAlarm() {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af04      	add	r7, sp, #16
    if(ds3231_year == timer_year &&
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <checkAlarm+0x98>)
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <checkAlarm+0x9c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d13f      	bne.n	8002746 <checkAlarm+0x92>
       ds3231_month == timer_month &&
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <checkAlarm+0xa0>)
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <checkAlarm+0xa4>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
    if(ds3231_year == timer_year &&
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d139      	bne.n	8002746 <checkAlarm+0x92>
	   ds3231_date == timer_date &&
 80026d2:	4b22      	ldr	r3, [pc, #136]	; (800275c <checkAlarm+0xa8>)
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <checkAlarm+0xac>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
       ds3231_month == timer_month &&
 80026da:	429a      	cmp	r2, r3
 80026dc:	d133      	bne.n	8002746 <checkAlarm+0x92>
	   ds3231_day == timer_day &&
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <checkAlarm+0xb0>)
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	4b21      	ldr	r3, [pc, #132]	; (8002768 <checkAlarm+0xb4>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
	   ds3231_date == timer_date &&
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d12d      	bne.n	8002746 <checkAlarm+0x92>
       ds3231_hours == timer_hours &&
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <checkAlarm+0xb8>)
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <checkAlarm+0xbc>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
	   ds3231_day == timer_day &&
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d127      	bne.n	8002746 <checkAlarm+0x92>
	   ds3231_min == timer_minutes &&
 80026f6:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <checkAlarm+0xc0>)
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <checkAlarm+0xc4>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
       ds3231_hours == timer_hours &&
 80026fe:	429a      	cmp	r2, r3
 8002700:	d121      	bne.n	8002746 <checkAlarm+0x92>
	   ds3231_sec >= timer_seconds &&
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <checkAlarm+0xc8>)
 8002704:	781a      	ldrb	r2, [r3, #0]
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <checkAlarm+0xcc>)
 8002708:	781b      	ldrb	r3, [r3, #0]
	   ds3231_min == timer_minutes &&
 800270a:	429a      	cmp	r2, r3
 800270c:	d31b      	bcc.n	8002746 <checkAlarm+0x92>
	   ds3231_sec < timer_seconds+5){
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <checkAlarm+0xcc>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	3304      	adds	r3, #4
 8002714:	4a19      	ldr	r2, [pc, #100]	; (800277c <checkAlarm+0xc8>)
 8002716:	7812      	ldrb	r2, [r2, #0]
	   ds3231_sec >= timer_seconds &&
 8002718:	4293      	cmp	r3, r2
 800271a:	db14      	blt.n	8002746 <checkAlarm+0x92>
    	lcd_Fill(0, 0, 240, 20, BLUE);
 800271c:	231f      	movs	r3, #31
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2314      	movs	r3, #20
 8002722:	22f0      	movs	r2, #240	; 0xf0
 8002724:	2100      	movs	r1, #0
 8002726:	2000      	movs	r0, #0
 8002728:	f7fe fb7e 	bl	8000e28 <lcd_Fill>
		lcd_StrCenter(0, 2, (uint8_t *)"Alarm !!!!!!!!!!! ", RED, BLUE, 16, 1);
 800272c:	2301      	movs	r3, #1
 800272e:	9302      	str	r3, [sp, #8]
 8002730:	2310      	movs	r3, #16
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	231f      	movs	r3, #31
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <checkAlarm+0xd0>)
 800273e:	2102      	movs	r1, #2
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe ff11 	bl	8001568 <lcd_StrCenter>
    }
//    timer_hours = ds3231_hours;
//	timer_minutes = ds3231_min;
//	timer_seconds = ds3231_sec;
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000109 	.word	0x20000109
 8002750:	200000af 	.word	0x200000af
 8002754:	2000010e 	.word	0x2000010e
 8002758:	200000ae 	.word	0x200000ae
 800275c:	2000010b 	.word	0x2000010b
 8002760:	200000ad 	.word	0x200000ad
 8002764:	2000010c 	.word	0x2000010c
 8002768:	200000ac 	.word	0x200000ac
 800276c:	2000010d 	.word	0x2000010d
 8002770:	200000a9 	.word	0x200000a9
 8002774:	2000010a 	.word	0x2000010a
 8002778:	200000aa 	.word	0x200000aa
 800277c:	20000108 	.word	0x20000108
 8002780:	200000ab 	.word	0x200000ab
 8002784:	080083a4 	.word	0x080083a4

08002788 <update_time>:

//uint8_t str2dec(uint8_t)

void update_time() {
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b0a0      	sub	sp, #128	; 0x80
 800278c:	af04      	add	r7, sp, #16
uint8_t update_arr[7];
uint8_t val;
char time_features[7][10] = {"Seconds", "Minutes", "Hours", "Days", "Dates", "Months", "Years"};
 800278e:	4a9a      	ldr	r2, [pc, #616]	; (80029f8 <update_time+0x270>)
 8002790:	f107 0320 	add.w	r3, r7, #32
 8002794:	4611      	mov	r1, r2
 8002796:	2246      	movs	r2, #70	; 0x46
 8002798:	4618      	mov	r0, r3
 800279a:	f005 f985 	bl	8007aa8 <memcpy>
char message[30];

//	uart_Rs232SendNum(cnt);
	while (1) {
        if (flag_timer2) {
 800279e:	4b97      	ldr	r3, [pc, #604]	; (80029fc <update_time+0x274>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d062      	beq.n	800286c <update_time+0xe4>
             flag_timer2 = 0;
 80027a6:	4b95      	ldr	r3, [pc, #596]	; (80029fc <update_time+0x274>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	801a      	strh	r2, [r3, #0]
//            	uart_Rs232SendNum(idx);
//				uart_Rs232SendString("\r\n");
//				uart_Rs232SendString(time_features[idx]);
//				uart_Rs232SendString("\r\n");
//            }
            if (cnt % 200 == 0) {
 80027ac:	4b94      	ldr	r3, [pc, #592]	; (8002a00 <update_time+0x278>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	4a94      	ldr	r2, [pc, #592]	; (8002a04 <update_time+0x27c>)
 80027b2:	fba2 1203 	umull	r1, r2, r2, r3
 80027b6:	0992      	lsrs	r2, r2, #6
 80027b8:	21c8      	movs	r1, #200	; 0xc8
 80027ba:	fb01 f202 	mul.w	r2, r1, r2
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d12f      	bne.n	8002826 <update_time+0x9e>
                // Concatenate "Updating " with the current time feature
                sprintf(message, "Updating %s ...", time_features[idx]);
 80027c6:	4b90      	ldr	r3, [pc, #576]	; (8002a08 <update_time+0x280>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	f107 0220 	add.w	r2, r7, #32
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	441a      	add	r2, r3
 80027da:	463b      	mov	r3, r7
 80027dc:	498b      	ldr	r1, [pc, #556]	; (8002a0c <update_time+0x284>)
 80027de:	4618      	mov	r0, r3
 80027e0:	f005 f978 	bl	8007ad4 <siprintf>
                lcd_ShowStr(20, 30, (uint8_t *)message, WHITE, RED, 24, 0);
 80027e4:	463a      	mov	r2, r7
 80027e6:	2300      	movs	r3, #0
 80027e8:	9302      	str	r3, [sp, #8]
 80027ea:	2318      	movs	r3, #24
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f8:	211e      	movs	r1, #30
 80027fa:	2014      	movs	r0, #20
 80027fc:	f7fe fe50 	bl	80014a0 <lcd_ShowStr>
//                lcd_StrCenter(0, 2, (uint8_t *)message, RED, BLUE, 16, 1);

                // Send the time feature with "Updating" message via UART
                sprintf(message, "\r\n%s: ", time_features[idx]);
 8002800:	4b81      	ldr	r3, [pc, #516]	; (8002a08 <update_time+0x280>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	f107 0220 	add.w	r2, r7, #32
 800280a:	460b      	mov	r3, r1
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	441a      	add	r2, r3
 8002814:	463b      	mov	r3, r7
 8002816:	497e      	ldr	r1, [pc, #504]	; (8002a10 <update_time+0x288>)
 8002818:	4618      	mov	r0, r3
 800281a:	f005 f95b 	bl	8007ad4 <siprintf>
                uart_Rs232SendString((uint8_t *)message);
 800281e:	463b      	mov	r3, r7
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fb7d 	bl	8002f20 <uart_Rs232SendString>
            }
            cnt--;
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <update_time+0x278>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	4b74      	ldr	r3, [pc, #464]	; (8002a00 <update_time+0x278>)
 8002830:	801a      	strh	r2, [r3, #0]
            if (cnt == 0) {
 8002832:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <update_time+0x278>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d118      	bne.n	800286c <update_time+0xe4>
            	strcpy(message, "                   ");
 800283a:	463b      	mov	r3, r7
 800283c:	4a75      	ldr	r2, [pc, #468]	; (8002a14 <update_time+0x28c>)
 800283e:	461c      	mov	r4, r3
 8002840:	4615      	mov	r5, r2
 8002842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002846:	682b      	ldr	r3, [r5, #0]
 8002848:	6023      	str	r3, [r4, #0]
				lcd_ShowStr(20, 30, message, WHITE, BLACK, 24, 0);
 800284a:	463a      	mov	r2, r7
 800284c:	2300      	movs	r3, #0
 800284e:	9302      	str	r3, [sp, #8]
 8002850:	2318      	movs	r3, #24
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	2300      	movs	r3, #0
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800285c:	211e      	movs	r1, #30
 800285e:	2014      	movs	r0, #20
 8002860:	f7fe fe1e 	bl	80014a0 <lcd_ShowStr>
                currentMode = TIME_DISPLAY;
 8002864:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <update_time+0x290>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
                break;
 800286a:	e148      	b.n	8002afe <update_time+0x376>
//                // Cycle through modes
//        //    	currentMode++;
//            	currentMode = (currentMode + 1) % 4;
//            	break;
//        }
            if (UART_flag) {
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <update_time+0x294>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80fb 	beq.w	8002a6c <update_time+0x2e4>
            	UART_flag = 0;
 8002876:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <update_time+0x294>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
//            	uart_Rs232SendString("\r\n");
//            	uart_Rs232SendNum(val);
//            	uart_Rs232SendString("\r\n");
//            	uart_Rs232SendNum(rx_msg);
//            	uart_Rs232SendString("\r\n");
                if ((strcmp(time_features[idx], "Seconds") == 0 && (rx_msg < 0 || rx_msg > 60)) ||
 800287c:	4b62      	ldr	r3, [pc, #392]	; (8002a08 <update_time+0x280>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	f107 0220 	add.w	r2, r7, #32
 8002886:	460b      	mov	r3, r1
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	4963      	ldr	r1, [pc, #396]	; (8002a20 <update_time+0x298>)
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fc9c 	bl	80001d0 <strcmp>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d104      	bne.n	80028a8 <update_time+0x120>
 800289e:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <update_time+0x29c>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b3c      	cmp	r3, #60	; 0x3c
 80028a4:	f200 808a 	bhi.w	80029bc <update_time+0x234>
                    (strcmp(time_features[idx], "Minutes") == 0 && (rx_msg < 0 || rx_msg > 60)) ||
 80028a8:	4b57      	ldr	r3, [pc, #348]	; (8002a08 <update_time+0x280>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f107 0220 	add.w	r2, r7, #32
 80028b2:	460b      	mov	r3, r1
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	495a      	ldr	r1, [pc, #360]	; (8002a28 <update_time+0x2a0>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fc86 	bl	80001d0 <strcmp>
 80028c4:	4603      	mov	r3, r0
                if ((strcmp(time_features[idx], "Seconds") == 0 && (rx_msg < 0 || rx_msg > 60)) ||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <update_time+0x14a>
                    (strcmp(time_features[idx], "Minutes") == 0 && (rx_msg < 0 || rx_msg > 60)) ||
 80028ca:	4b56      	ldr	r3, [pc, #344]	; (8002a24 <update_time+0x29c>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b3c      	cmp	r3, #60	; 0x3c
 80028d0:	d874      	bhi.n	80029bc <update_time+0x234>
                    (strcmp(time_features[idx], "Hours") == 0 && (rx_msg < 0 || rx_msg > 24)) ||
 80028d2:	4b4d      	ldr	r3, [pc, #308]	; (8002a08 <update_time+0x280>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	4619      	mov	r1, r3
 80028d8:	f107 0220 	add.w	r2, r7, #32
 80028dc:	460b      	mov	r3, r1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	4951      	ldr	r1, [pc, #324]	; (8002a2c <update_time+0x2a4>)
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fc71 	bl	80001d0 <strcmp>
 80028ee:	4603      	mov	r3, r0
                    (strcmp(time_features[idx], "Minutes") == 0 && (rx_msg < 0 || rx_msg > 60)) ||
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <update_time+0x174>
                    (strcmp(time_features[idx], "Hours") == 0 && (rx_msg < 0 || rx_msg > 24)) ||
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <update_time+0x29c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b18      	cmp	r3, #24
 80028fa:	d85f      	bhi.n	80029bc <update_time+0x234>
                    (strcmp(time_features[idx], "Days") == 0 && (rx_msg < 1 || rx_msg > 8)) ||
 80028fc:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <update_time+0x280>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4619      	mov	r1, r3
 8002902:	f107 0220 	add.w	r2, r7, #32
 8002906:	460b      	mov	r3, r1
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	4947      	ldr	r1, [pc, #284]	; (8002a30 <update_time+0x2a8>)
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fc5c 	bl	80001d0 <strcmp>
 8002918:	4603      	mov	r3, r0
                    (strcmp(time_features[idx], "Hours") == 0 && (rx_msg < 0 || rx_msg > 24)) ||
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <update_time+0x1a6>
                    (strcmp(time_features[idx], "Days") == 0 && (rx_msg < 1 || rx_msg > 8)) ||
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <update_time+0x29c>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d04a      	beq.n	80029bc <update_time+0x234>
 8002926:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <update_time+0x29c>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b08      	cmp	r3, #8
 800292c:	d846      	bhi.n	80029bc <update_time+0x234>
                    (strcmp(time_features[idx], "Dates") == 0 && (rx_msg < 1 || rx_msg > 30)) ||
 800292e:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <update_time+0x280>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	f107 0220 	add.w	r2, r7, #32
 8002938:	460b      	mov	r3, r1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	493c      	ldr	r1, [pc, #240]	; (8002a34 <update_time+0x2ac>)
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fc43 	bl	80001d0 <strcmp>
 800294a:	4603      	mov	r3, r0
                    (strcmp(time_features[idx], "Days") == 0 && (rx_msg < 1 || rx_msg > 8)) ||
 800294c:	2b00      	cmp	r3, #0
 800294e:	d107      	bne.n	8002960 <update_time+0x1d8>
                    (strcmp(time_features[idx], "Dates") == 0 && (rx_msg < 1 || rx_msg > 30)) ||
 8002950:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <update_time+0x29c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d031      	beq.n	80029bc <update_time+0x234>
 8002958:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <update_time+0x29c>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b1e      	cmp	r3, #30
 800295e:	d82d      	bhi.n	80029bc <update_time+0x234>
                    (strcmp(time_features[idx], "Months") == 0 && (rx_msg < 1 || rx_msg > 12)) ||
 8002960:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <update_time+0x280>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	4619      	mov	r1, r3
 8002966:	f107 0220 	add.w	r2, r7, #32
 800296a:	460b      	mov	r3, r1
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	4930      	ldr	r1, [pc, #192]	; (8002a38 <update_time+0x2b0>)
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fc2a 	bl	80001d0 <strcmp>
 800297c:	4603      	mov	r3, r0
                    (strcmp(time_features[idx], "Dates") == 0 && (rx_msg < 1 || rx_msg > 30)) ||
 800297e:	2b00      	cmp	r3, #0
 8002980:	d107      	bne.n	8002992 <update_time+0x20a>
                    (strcmp(time_features[idx], "Months") == 0 && (rx_msg < 1 || rx_msg > 12)) ||
 8002982:	4b28      	ldr	r3, [pc, #160]	; (8002a24 <update_time+0x29c>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d018      	beq.n	80029bc <update_time+0x234>
 800298a:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <update_time+0x29c>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d814      	bhi.n	80029bc <update_time+0x234>
                    (strcmp(time_features[idx], "Years") == 0 && (rx_msg < 0 || rx_msg > 99))) {
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <update_time+0x280>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	f107 0220 	add.w	r2, r7, #32
 800299c:	460b      	mov	r3, r1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	4925      	ldr	r1, [pc, #148]	; (8002a3c <update_time+0x2b4>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fc11 	bl	80001d0 <strcmp>
 80029ae:	4603      	mov	r3, r0
                    (strcmp(time_features[idx], "Months") == 0 && (rx_msg < 1 || rx_msg > 12)) ||
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d147      	bne.n	8002a44 <update_time+0x2bc>
                    (strcmp(time_features[idx], "Years") == 0 && (rx_msg < 0 || rx_msg > 99))) {
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <update_time+0x29c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b63      	cmp	r3, #99	; 0x63
 80029ba:	d943      	bls.n	8002a44 <update_time+0x2bc>

                        // Display and send an "Invalid value" message
                        strcpy(message, "Invalid value\r\n");
 80029bc:	463b      	mov	r3, r7
 80029be:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <update_time+0x2b8>)
 80029c0:	461c      	mov	r4, r3
 80029c2:	4613      	mov	r3, r2
 80029c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//                      lcd_ShowStr(20, 30, message, WHITE, RED, 24, 0);
                        lcd_StrCenter(0, 2, (uint8_t *)message, RED, BLUE, 16, 1);
 80029ca:	463a      	mov	r2, r7
 80029cc:	2301      	movs	r3, #1
 80029ce:	9302      	str	r3, [sp, #8]
 80029d0:	2310      	movs	r3, #16
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	231f      	movs	r3, #31
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029dc:	2102      	movs	r1, #2
 80029de:	2000      	movs	r0, #0
 80029e0:	f7fe fdc2 	bl	8001568 <lcd_StrCenter>
                        uart_Rs232SendString(message);
 80029e4:	463b      	mov	r3, r7
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa9a 	bl	8002f20 <uart_Rs232SendString>
                        cnt = 3 * 200;
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <update_time+0x278>)
 80029ee:	f44f 7216 	mov.w	r2, #600	; 0x258
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e03a      	b.n	8002a6c <update_time+0x2e4>
 80029f6:	bf00      	nop
 80029f8:	0800842c 	.word	0x0800842c
 80029fc:	200000b0 	.word	0x200000b0
 8002a00:	20000001 	.word	0x20000001
 8002a04:	51eb851f 	.word	0x51eb851f
 8002a08:	200000a8 	.word	0x200000a8
 8002a0c:	080083b8 	.word	0x080083b8
 8002a10:	080083c8 	.word	0x080083c8
 8002a14:	080083d0 	.word	0x080083d0
 8002a18:	200000a4 	.word	0x200000a4
 8002a1c:	200000bc 	.word	0x200000bc
 8002a20:	080083e4 	.word	0x080083e4
 8002a24:	20000304 	.word	0x20000304
 8002a28:	080083ec 	.word	0x080083ec
 8002a2c:	080083f4 	.word	0x080083f4
 8002a30:	080083fc 	.word	0x080083fc
 8002a34:	08008404 	.word	0x08008404
 8002a38:	0800840c 	.word	0x0800840c
 8002a3c:	08008414 	.word	0x08008414
 8002a40:	0800841c 	.word	0x0800841c
                }
                else {
                  update_arr[idx] = rx_msg;
 8002a44:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <update_time+0x380>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <update_time+0x384>)
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a52:	440b      	add	r3, r1
 8002a54:	f803 2c08 	strb.w	r2, [r3, #-8]
                  cnt = 3 * 200;
 8002a58:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <update_time+0x388>)
 8002a5a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002a5e:	801a      	strh	r2, [r3, #0]
                  idx++;
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <update_time+0x380>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <update_time+0x380>)
 8002a6a:	701a      	strb	r2, [r3, #0]
                }
            }

            if (idx == 7) {
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <update_time+0x380>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b07      	cmp	r3, #7
 8002a72:	f47f ae94 	bne.w	800279e <update_time+0x16>
            	strcpy(message, "                   ");
 8002a76:	463b      	mov	r3, r7
 8002a78:	4a26      	ldr	r2, [pc, #152]	; (8002b14 <update_time+0x38c>)
 8002a7a:	461c      	mov	r4, r3
 8002a7c:	4615      	mov	r5, r2
 8002a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a82:	682b      	ldr	r3, [r5, #0]
 8002a84:	6023      	str	r3, [r4, #0]
              lcd_ShowStr(20, 30, message, WHITE, BLACK, 24, 0);
 8002a86:	463a      	mov	r2, r7
 8002a88:	2300      	movs	r3, #0
 8002a8a:	9302      	str	r3, [sp, #8]
 8002a8c:	2318      	movs	r3, #24
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	2300      	movs	r3, #0
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a98:	211e      	movs	r1, #30
 8002a9a:	2014      	movs	r0, #20
 8002a9c:	f7fe fd00 	bl	80014a0 <lcd_ShowStr>
              ds3231_Write(ADDRESS_YEAR, update_arr[6]);
 8002aa0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	2006      	movs	r0, #6
 8002aa8:	f7fd fe42 	bl	8000730 <ds3231_Write>
              ds3231_Write(ADDRESS_MONTH, update_arr[5]);
 8002aac:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	2005      	movs	r0, #5
 8002ab4:	f7fd fe3c 	bl	8000730 <ds3231_Write>
              ds3231_Write(ADDRESS_DATE, update_arr[4]);
 8002ab8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002abc:	4619      	mov	r1, r3
 8002abe:	2004      	movs	r0, #4
 8002ac0:	f7fd fe36 	bl	8000730 <ds3231_Write>
              ds3231_Write(ADDRESS_DAY, update_arr[3]);
 8002ac4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002ac8:	4619      	mov	r1, r3
 8002aca:	2003      	movs	r0, #3
 8002acc:	f7fd fe30 	bl	8000730 <ds3231_Write>
              ds3231_Write(ADDRESS_HOUR, update_arr[2]);
 8002ad0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	2002      	movs	r0, #2
 8002ad8:	f7fd fe2a 	bl	8000730 <ds3231_Write>
              ds3231_Write(ADDRESS_MIN, update_arr[1]);
 8002adc:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f7fd fe24 	bl	8000730 <ds3231_Write>
              ds3231_Write(ADDRESS_SEC, update_arr[0]);
 8002ae8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002aec:	4619      	mov	r1, r3
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fd fe1e 	bl	8000730 <ds3231_Write>
              ds3231_ReadTime();
 8002af4:	f7fd fe3e 	bl	8000774 <ds3231_ReadTime>
//				timer_seconds = ds3231_sec;
//				timer_day = ds3231_day;
//				timer_date = ds3231_date;
//				timer_month = ds3231_month;
//				timer_year = ds3231_year;
				currentMode = TIME_DISPLAY;
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <update_time+0x390>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
				break;
            }
	}
}
 8002afe:	bf00      	nop
 8002b00:	3770      	adds	r7, #112	; 0x70
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bdb0      	pop	{r4, r5, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200000a8 	.word	0x200000a8
 8002b0c:	20000304 	.word	0x20000304
 8002b10:	20000001 	.word	0x20000001
 8002b14:	080083d0 	.word	0x080083d0
 8002b18:	200000a4 	.word	0x200000a4

08002b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
}
 8002b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <Error_Handler+0x8>
	...

08002b28 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <timer_init+0x10>)
 8002b2e:	f003 fac7 	bl	80060c0 <HAL_TIM_Base_Start_IT>
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000258 	.word	0x20000258

08002b3c <setTimer2>:

void setTimer2(uint16_t duration){
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <setTimer2+0x2c>)
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <setTimer2+0x2c>)
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <setTimer2+0x30>)
 8002b52:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <setTimer2+0x34>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	200000b4 	.word	0x200000b4
 8002b6c:	200000b2 	.word	0x200000b2
 8002b70:	200000b0 	.word	0x200000b0

08002b74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d116      	bne.n	8002bb4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d010      	beq.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b98:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002baa:	881a      	ldrh	r2, [r3, #0]
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002bae:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002bb0:	f7fe fd18 	bl	80015e4 <led7_Scan>
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	200000b2 	.word	0x200000b2
 8002bc0:	200000b0 	.word	0x200000b0
 8002bc4:	200000b4 	.word	0x200000b4

08002bc8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002bcc:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <MX_SPI1_Init+0x68>)
 8002bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bda:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002c14:	220a      	movs	r2, #10
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c18:	4804      	ldr	r0, [pc, #16]	; (8002c2c <MX_SPI1_Init+0x64>)
 8002c1a:	f002 fc15 	bl	8005448 <HAL_SPI_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c24:	f7ff ff7a 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000200 	.word	0x20000200
 8002c30:	40013000 	.word	0x40013000

08002c34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_SPI_MspInit+0x84>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d12b      	bne.n	8002cae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c64:	6453      	str	r3, [r2, #68]	; 0x44
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c8e:	2338      	movs	r3, #56	; 0x38
 8002c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c9e:	2305      	movs	r3, #5
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <HAL_SPI_MspInit+0x8c>)
 8002caa:	f000 fcb5 	bl	8003618 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40013000 	.word	0x40013000
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40020400 	.word	0x40020400

08002cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	4a0f      	ldr	r2, [pc, #60]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a08      	ldr	r2, [pc, #32]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_MspInit+0x4c>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800

08002d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <NMI_Handler+0x4>

08002d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1e:	e7fe      	b.n	8002d1e <HardFault_Handler+0x4>

08002d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <MemManage_Handler+0x4>

08002d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2a:	e7fe      	b.n	8002d2a <BusFault_Handler+0x4>

08002d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d30:	e7fe      	b.n	8002d30 <UsageFault_Handler+0x4>

08002d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d60:	f000 fa72 	bl	8003248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <TIM2_IRQHandler+0x10>)
 8002d6e:	f003 fa17 	bl	80061a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000258 	.word	0x20000258

08002d7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <USART1_IRQHandler+0x10>)
 8002d82:	f003 fedf 	bl	8006b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000308 	.word	0x20000308

08002d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d98:	4a14      	ldr	r2, [pc, #80]	; (8002dec <_sbrk+0x5c>)
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <_sbrk+0x60>)
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <_sbrk+0x64>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <_sbrk+0x64>)
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <_sbrk+0x68>)
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <_sbrk+0x64>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d207      	bcs.n	8002dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc0:	f004 fe48 	bl	8007a54 <__errno>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	e009      	b.n	8002de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <_sbrk+0x64>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <_sbrk+0x64>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <_sbrk+0x64>)
 8002de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20020000 	.word	0x20020000
 8002df0:	00000400 	.word	0x00000400
 8002df4:	200000b8 	.word	0x200000b8
 8002df8:	20000360 	.word	0x20000360

08002dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <SystemInit+0x20>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <SystemInit+0x20>)
 8002e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e26:	f107 0308 	add.w	r3, r7, #8
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e34:	463b      	mov	r3, r7
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e46:	f240 3247 	movw	r2, #839	; 0x347
 8002e4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e54:	2263      	movs	r2, #99	; 0x63
 8002e56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e58:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e64:	4813      	ldr	r0, [pc, #76]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e66:	f003 f8db 	bl	8006020 <HAL_TIM_Base_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e70:	f7ff fe54 	bl	8002b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	4619      	mov	r1, r3
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e82:	f003 fa95 	bl	80063b0 <HAL_TIM_ConfigClockSource>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e8c:	f7ff fe46 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e90:	2300      	movs	r3, #0
 8002e92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e98:	463b      	mov	r3, r7
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e9e:	f003 fcb1 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ea8:	f7ff fe38 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002eac:	bf00      	nop
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000258 	.word	0x20000258

08002eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec8:	d115      	bne.n	8002ef6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_TIM_Base_MspInit+0x48>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <HAL_TIM_Base_MspInit+0x48>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_TIM_Base_MspInit+0x48>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	201c      	movs	r0, #28
 8002eec:	f000 facb 	bl	8003486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ef0:	201c      	movs	r0, #28
 8002ef2:	f000 fae4 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800

08002f04 <uart_init_rs232>:
uint8_t rx_msg;
uint8_t cnt_uart;
uint8_t msg[100];
uint8_t UART_flag = 0;

void uart_init_rs232(){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4903      	ldr	r1, [pc, #12]	; (8002f18 <uart_init_rs232+0x14>)
 8002f0c:	4803      	ldr	r0, [pc, #12]	; (8002f1c <uart_init_rs232+0x18>)
 8002f0e:	f003 fde8 	bl	8006ae2 <HAL_UART_Receive_IT>
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000306 	.word	0x20000306
 8002f1c:	20000308 	.word	0x20000308

08002f20 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4907      	ldr	r1, [pc, #28]	; (8002f48 <uart_Rs232SendString+0x28>)
 8002f2c:	4807      	ldr	r0, [pc, #28]	; (8002f4c <uart_Rs232SendString+0x2c>)
 8002f2e:	f004 fdd1 	bl	8007ad4 <siprintf>
 8002f32:	4603      	mov	r3, r0
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	230a      	movs	r3, #10
 8002f38:	4904      	ldr	r1, [pc, #16]	; (8002f4c <uart_Rs232SendString+0x2c>)
 8002f3a:	4805      	ldr	r0, [pc, #20]	; (8002f50 <uart_Rs232SendString+0x30>)
 8002f3c:	f003 fd3f 	bl	80069be <HAL_UART_Transmit>
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	08008474 	.word	0x08008474
 8002f4c:	200002a0 	.word	0x200002a0
 8002f50:	20000308 	.word	0x20000308

08002f54 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <HAL_UART_RxCpltCallback+0x74>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d12c      	bne.n	8002fc0 <HAL_UART_RxCpltCallback+0x6c>
		// can be modified

//		strcpy(rx_msg, receive_buffer1);
//		rx_msg = receive_buffer1;
//		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
		cnt_uart = (cnt_uart + 1)%2;
 8002f66:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_UART_RxCpltCallback+0x78>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	bfb8      	it	lt
 8002f74:	425b      	neglt	r3, r3
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_UART_RxCpltCallback+0x78>)
 8002f7a:	701a      	strb	r2, [r3, #0]
		if (!cnt_uart) {
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_UART_RxCpltCallback+0x78>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d112      	bne.n	8002faa <HAL_UART_RxCpltCallback+0x56>
			UART_flag = 1;
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_UART_RxCpltCallback+0x7c>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
			rx_msg = rx_msg*10 + receive_buffer1 - 48;
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_UART_RxCpltCallback+0x80>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	0092      	lsls	r2, r2, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_UART_RxCpltCallback+0x84>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	3b30      	subs	r3, #48	; 0x30
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_UART_RxCpltCallback+0x80>)
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e005      	b.n	8002fb6 <HAL_UART_RxCpltCallback+0x62>
		}
		else rx_msg = receive_buffer1 - 48;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_UART_RxCpltCallback+0x84>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	3b30      	subs	r3, #48	; 0x30
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_UART_RxCpltCallback+0x80>)
 8002fb4:	701a      	strb	r2, [r3, #0]

		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4907      	ldr	r1, [pc, #28]	; (8002fd8 <HAL_UART_RxCpltCallback+0x84>)
 8002fba:	4808      	ldr	r0, [pc, #32]	; (8002fdc <HAL_UART_RxCpltCallback+0x88>)
 8002fbc:	f003 fd91 	bl	8006ae2 <HAL_UART_Receive_IT>
	}
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40011000 	.word	0x40011000
 8002fcc:	20000305 	.word	0x20000305
 8002fd0:	200000bc 	.word	0x200000bc
 8002fd4:	20000304 	.word	0x20000304
 8002fd8:	20000306 	.word	0x20000306
 8002fdc:	20000308 	.word	0x20000308

08002fe0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_USART1_UART_Init+0x4c>)
 8002fe6:	4a12      	ldr	r2, [pc, #72]	; (8003030 <MX_USART1_UART_Init+0x50>)
 8002fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <MX_USART1_UART_Init+0x4c>)
 8002fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <MX_USART1_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <MX_USART1_UART_Init+0x4c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <MX_USART1_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <MX_USART1_UART_Init+0x4c>)
 8003006:	220c      	movs	r2, #12
 8003008:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <MX_USART1_UART_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <MX_USART1_UART_Init+0x4c>)
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <MX_USART1_UART_Init+0x4c>)
 8003018:	f003 fc84 	bl	8006924 <HAL_UART_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003022:	f7ff fd7b 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000308 	.word	0x20000308
 8003030:	40011000 	.word	0x40011000

08003034 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_UART_MspInit+0x94>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d134      	bne.n	80030c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <HAL_UART_MspInit+0x98>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <HAL_UART_MspInit+0x98>)
 8003060:	f043 0310 	orr.w	r3, r3, #16
 8003064:	6453      	str	r3, [r2, #68]	; 0x44
 8003066:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_UART_MspInit+0x98>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_UART_MspInit+0x98>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a14      	ldr	r2, [pc, #80]	; (80030cc <HAL_UART_MspInit+0x98>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_UART_MspInit+0x98>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800308e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030a0:	2307      	movs	r3, #7
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	4619      	mov	r1, r3
 80030aa:	4809      	ldr	r0, [pc, #36]	; (80030d0 <HAL_UART_MspInit+0x9c>)
 80030ac:	f000 fab4 	bl	8003618 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	2025      	movs	r0, #37	; 0x25
 80030b6:	f000 f9e6 	bl	8003486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030ba:	2025      	movs	r0, #37	; 0x25
 80030bc:	f000 f9ff 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80030c0:	bf00      	nop
 80030c2:	3728      	adds	r7, #40	; 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40011000 	.word	0x40011000
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40020000 	.word	0x40020000

080030d4 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	4a0d      	ldr	r2, [pc, #52]	; (800314c <DEC2BCD+0x44>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	08db      	lsrs	r3, r3, #3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	b258      	sxtb	r0, r3
 8003122:	79fa      	ldrb	r2, [r7, #7]
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <DEC2BCD+0x44>)
 8003126:	fba3 1302 	umull	r1, r3, r3, r2
 800312a:	08d9      	lsrs	r1, r3, #3
 800312c:	460b      	mov	r3, r1
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	b25b      	sxtb	r3, r3
 800313a:	4303      	orrs	r3, r0
 800313c:	b25b      	sxtb	r3, r3
 800313e:	b2db      	uxtb	r3, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	cccccccd 	.word	0xcccccccd

08003150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003154:	480d      	ldr	r0, [pc, #52]	; (800318c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003156:	490e      	ldr	r1, [pc, #56]	; (8003190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800315c:	e002      	b.n	8003164 <LoopCopyDataInit>

0800315e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003162:	3304      	adds	r3, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003168:	d3f9      	bcc.n	800315e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800316c:	4c0b      	ldr	r4, [pc, #44]	; (800319c <LoopFillZerobss+0x26>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003170:	e001      	b.n	8003176 <LoopFillZerobss>

08003172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003174:	3204      	adds	r2, #4

08003176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003178:	d3fb      	bcc.n	8003172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800317a:	f7ff fe3f 	bl	8002dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317e:	f004 fc6f 	bl	8007a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003182:	f7fe fabb 	bl	80016fc <main>
  bx  lr    
 8003186:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003190:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003194:	0800b464 	.word	0x0800b464
  ldr r2, =_sbss
 8003198:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800319c:	20000360 	.word	0x20000360

080031a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC_IRQHandler>
	...

080031a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_Init+0x40>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_Init+0x40>)
 80031ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_Init+0x40>)
 80031ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_Init+0x40>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031cc:	2003      	movs	r0, #3
 80031ce:	f000 f94f 	bl	8003470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d2:	200f      	movs	r0, #15
 80031d4:	f000 f808 	bl	80031e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d8:	f7ff fd74 	bl	8002cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00

080031e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_InitTick+0x54>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_InitTick+0x58>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f967 	bl	80034da <HAL_SYSTICK_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e00e      	b.n	8003234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	d80a      	bhi.n	8003232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800321c:	2200      	movs	r2, #0
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	f000 f92f 	bl	8003486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <HAL_InitTick+0x5c>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	2000000c 	.word	0x2000000c
 8003240:	20000014 	.word	0x20000014
 8003244:	20000010 	.word	0x20000010

08003248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_IncTick+0x20>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_IncTick+0x24>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4413      	add	r3, r2
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_IncTick+0x24>)
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000014 	.word	0x20000014
 800326c:	2000034c 	.word	0x2000034c

08003270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_GetTick+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	2000034c 	.word	0x2000034c

08003288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff ffee 	bl	8003270 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d005      	beq.n	80032ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_Delay+0x44>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ae:	bf00      	nop
 80032b0:	f7ff ffde 	bl	8003270 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d8f7      	bhi.n	80032b0 <HAL_Delay+0x28>
  {
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000014 	.word	0x20000014

080032d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ec:	4013      	ands	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003302:	4a04      	ldr	r2, [pc, #16]	; (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	60d3      	str	r3, [r2, #12]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <__NVIC_GetPriorityGrouping+0x18>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 0307 	and.w	r3, r3, #7
}
 8003326:	4618      	mov	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	2b00      	cmp	r3, #0
 8003344:	db0b      	blt.n	800335e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	4907      	ldr	r1, [pc, #28]	; (800336c <__NVIC_EnableIRQ+0x38>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2001      	movs	r0, #1
 8003356:	fa00 f202 	lsl.w	r2, r0, r2
 800335a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000e100 	.word	0xe000e100

08003370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003380:	2b00      	cmp	r3, #0
 8003382:	db0a      	blt.n	800339a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	490c      	ldr	r1, [pc, #48]	; (80033bc <__NVIC_SetPriority+0x4c>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	440b      	add	r3, r1
 8003394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003398:	e00a      	b.n	80033b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4908      	ldr	r1, [pc, #32]	; (80033c0 <__NVIC_SetPriority+0x50>)
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	3b04      	subs	r3, #4
 80033a8:	0112      	lsls	r2, r2, #4
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	440b      	add	r3, r1
 80033ae:	761a      	strb	r2, [r3, #24]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000e100 	.word	0xe000e100
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f1c3 0307 	rsb	r3, r3, #7
 80033de:	2b04      	cmp	r3, #4
 80033e0:	bf28      	it	cs
 80033e2:	2304      	movcs	r3, #4
 80033e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3304      	adds	r3, #4
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d902      	bls.n	80033f4 <NVIC_EncodePriority+0x30>
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3b03      	subs	r3, #3
 80033f2:	e000      	b.n	80033f6 <NVIC_EncodePriority+0x32>
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	f04f 32ff 	mov.w	r2, #4294967295
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	401a      	ands	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800340c:	f04f 31ff 	mov.w	r1, #4294967295
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43d9      	mvns	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	4313      	orrs	r3, r2
         );
}
 800341e:	4618      	mov	r0, r3
 8003420:	3724      	adds	r7, #36	; 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800343c:	d301      	bcc.n	8003442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343e:	2301      	movs	r3, #1
 8003440:	e00f      	b.n	8003462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <SysTick_Config+0x40>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800344a:	210f      	movs	r1, #15
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	f7ff ff8e 	bl	8003370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <SysTick_Config+0x40>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345a:	4b04      	ldr	r3, [pc, #16]	; (800346c <SysTick_Config+0x40>)
 800345c:	2207      	movs	r2, #7
 800345e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	e000e010 	.word	0xe000e010

08003470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff29 	bl	80032d0 <__NVIC_SetPriorityGrouping>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	4603      	mov	r3, r0
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003498:	f7ff ff3e 	bl	8003318 <__NVIC_GetPriorityGrouping>
 800349c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	6978      	ldr	r0, [r7, #20]
 80034a4:	f7ff ff8e 	bl	80033c4 <NVIC_EncodePriority>
 80034a8:	4602      	mov	r2, r0
 80034aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff5d 	bl	8003370 <__NVIC_SetPriority>
}
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff31 	bl	8003334 <__NVIC_EnableIRQ>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ffa2 	bl	800342c <SysTick_Config>
 80034e8:	4603      	mov	r3, r0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7ff feb6 	bl	8003270 <HAL_GetTick>
 8003504:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d008      	beq.n	8003524 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e052      	b.n	80035ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0216 	bic.w	r2, r2, #22
 8003532:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003542:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <HAL_DMA_Abort+0x62>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0208 	bic.w	r2, r2, #8
 8003562:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003574:	e013      	b.n	800359e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003576:	f7ff fe7b 	bl	8003270 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b05      	cmp	r3, #5
 8003582:	d90c      	bls.n	800359e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2203      	movs	r2, #3
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e015      	b.n	80035ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e4      	bne.n	8003576 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	223f      	movs	r2, #63	; 0x3f
 80035b2:	409a      	lsls	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d004      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e00c      	b.n	800360a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2205      	movs	r2, #5
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e16b      	b.n	800390c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	f040 815a 	bne.w	8003906 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d005      	beq.n	800366a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003666:	2b02      	cmp	r3, #2
 8003668:	d130      	bne.n	80036cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 0201 	and.w	r2, r3, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d017      	beq.n	8003708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d123      	bne.n	800375c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	220f      	movs	r2, #15
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	08da      	lsrs	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3208      	adds	r2, #8
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0203 	and.w	r2, r3, #3
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80b4 	beq.w	8003906 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	4b60      	ldr	r3, [pc, #384]	; (8003924 <HAL_GPIO_Init+0x30c>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	4a5f      	ldr	r2, [pc, #380]	; (8003924 <HAL_GPIO_Init+0x30c>)
 80037a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ac:	6453      	str	r3, [r2, #68]	; 0x44
 80037ae:	4b5d      	ldr	r3, [pc, #372]	; (8003924 <HAL_GPIO_Init+0x30c>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ba:	4a5b      	ldr	r2, [pc, #364]	; (8003928 <HAL_GPIO_Init+0x310>)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	220f      	movs	r2, #15
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a52      	ldr	r2, [pc, #328]	; (800392c <HAL_GPIO_Init+0x314>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02b      	beq.n	800383e <HAL_GPIO_Init+0x226>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a51      	ldr	r2, [pc, #324]	; (8003930 <HAL_GPIO_Init+0x318>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d025      	beq.n	800383a <HAL_GPIO_Init+0x222>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a50      	ldr	r2, [pc, #320]	; (8003934 <HAL_GPIO_Init+0x31c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01f      	beq.n	8003836 <HAL_GPIO_Init+0x21e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4f      	ldr	r2, [pc, #316]	; (8003938 <HAL_GPIO_Init+0x320>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d019      	beq.n	8003832 <HAL_GPIO_Init+0x21a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4e      	ldr	r2, [pc, #312]	; (800393c <HAL_GPIO_Init+0x324>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_GPIO_Init+0x216>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4d      	ldr	r2, [pc, #308]	; (8003940 <HAL_GPIO_Init+0x328>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00d      	beq.n	800382a <HAL_GPIO_Init+0x212>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4c      	ldr	r2, [pc, #304]	; (8003944 <HAL_GPIO_Init+0x32c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <HAL_GPIO_Init+0x20e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <HAL_GPIO_Init+0x330>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_GPIO_Init+0x20a>
 800381e:	2307      	movs	r3, #7
 8003820:	e00e      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003822:	2308      	movs	r3, #8
 8003824:	e00c      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003826:	2306      	movs	r3, #6
 8003828:	e00a      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800382a:	2305      	movs	r3, #5
 800382c:	e008      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800382e:	2304      	movs	r3, #4
 8003830:	e006      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003832:	2303      	movs	r3, #3
 8003834:	e004      	b.n	8003840 <HAL_GPIO_Init+0x228>
 8003836:	2302      	movs	r3, #2
 8003838:	e002      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_GPIO_Init+0x228>
 800383e:	2300      	movs	r3, #0
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	f002 0203 	and.w	r2, r2, #3
 8003846:	0092      	lsls	r2, r2, #2
 8003848:	4093      	lsls	r3, r2
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003850:	4935      	ldr	r1, [pc, #212]	; (8003928 <HAL_GPIO_Init+0x310>)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	3302      	adds	r3, #2
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_GPIO_Init+0x334>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003882:	4a32      	ldr	r2, [pc, #200]	; (800394c <HAL_GPIO_Init+0x334>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003888:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_GPIO_Init+0x334>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ac:	4a27      	ldr	r2, [pc, #156]	; (800394c <HAL_GPIO_Init+0x334>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038b2:	4b26      	ldr	r3, [pc, #152]	; (800394c <HAL_GPIO_Init+0x334>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038d6:	4a1d      	ldr	r2, [pc, #116]	; (800394c <HAL_GPIO_Init+0x334>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038dc:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_GPIO_Init+0x334>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003900:	4a12      	ldr	r2, [pc, #72]	; (800394c <HAL_GPIO_Init+0x334>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3301      	adds	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b0f      	cmp	r3, #15
 8003910:	f67f ae90 	bls.w	8003634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3724      	adds	r7, #36	; 0x24
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	40013800 	.word	0x40013800
 800392c:	40020000 	.word	0x40020000
 8003930:	40020400 	.word	0x40020400
 8003934:	40020800 	.word	0x40020800
 8003938:	40020c00 	.word	0x40020c00
 800393c:	40021000 	.word	0x40021000
 8003940:	40021400 	.word	0x40021400
 8003944:	40021800 	.word	0x40021800
 8003948:	40021c00 	.word	0x40021c00
 800394c:	40013c00 	.word	0x40013c00

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003960:	787b      	ldrb	r3, [r7, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800396c:	e003      	b.n	8003976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e12b      	b.n	8003bee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd f93c 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039e8:	f001 fd06 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 80039ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4a81      	ldr	r2, [pc, #516]	; (8003bf8 <HAL_I2C_Init+0x274>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d807      	bhi.n	8003a08 <HAL_I2C_Init+0x84>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a80      	ldr	r2, [pc, #512]	; (8003bfc <HAL_I2C_Init+0x278>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	bf94      	ite	ls
 8003a00:	2301      	movls	r3, #1
 8003a02:	2300      	movhi	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	e006      	b.n	8003a16 <HAL_I2C_Init+0x92>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a7d      	ldr	r2, [pc, #500]	; (8003c00 <HAL_I2C_Init+0x27c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	bf94      	ite	ls
 8003a10:	2301      	movls	r3, #1
 8003a12:	2300      	movhi	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0e7      	b.n	8003bee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a78      	ldr	r2, [pc, #480]	; (8003c04 <HAL_I2C_Init+0x280>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	0c9b      	lsrs	r3, r3, #18
 8003a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	; (8003bf8 <HAL_I2C_Init+0x274>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d802      	bhi.n	8003a58 <HAL_I2C_Init+0xd4>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	3301      	adds	r3, #1
 8003a56:	e009      	b.n	8003a6c <HAL_I2C_Init+0xe8>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	4a69      	ldr	r2, [pc, #420]	; (8003c08 <HAL_I2C_Init+0x284>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	495c      	ldr	r1, [pc, #368]	; (8003bf8 <HAL_I2C_Init+0x274>)
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	d819      	bhi.n	8003ac0 <HAL_I2C_Init+0x13c>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1e59      	subs	r1, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a9a:	1c59      	adds	r1, r3, #1
 8003a9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_I2C_Init+0x138>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1e59      	subs	r1, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aba:	e051      	b.n	8003b60 <HAL_I2C_Init+0x1dc>
 8003abc:	2304      	movs	r3, #4
 8003abe:	e04f      	b.n	8003b60 <HAL_I2C_Init+0x1dc>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d111      	bne.n	8003aec <HAL_I2C_Init+0x168>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1e58      	subs	r0, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	440b      	add	r3, r1
 8003ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e012      	b.n	8003b12 <HAL_I2C_Init+0x18e>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1e58      	subs	r0, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	0099      	lsls	r1, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_I2C_Init+0x196>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e022      	b.n	8003b60 <HAL_I2C_Init+0x1dc>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10e      	bne.n	8003b40 <HAL_I2C_Init+0x1bc>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1e58      	subs	r0, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6859      	ldr	r1, [r3, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	440b      	add	r3, r1
 8003b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3e:	e00f      	b.n	8003b60 <HAL_I2C_Init+0x1dc>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1e58      	subs	r0, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	0099      	lsls	r1, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b56:	3301      	adds	r3, #1
 8003b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	6809      	ldr	r1, [r1, #0]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6911      	ldr	r1, [r2, #16]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68d2      	ldr	r2, [r2, #12]
 8003b9a:	4311      	orrs	r1, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	000186a0 	.word	0x000186a0
 8003bfc:	001e847f 	.word	0x001e847f
 8003c00:	003d08ff 	.word	0x003d08ff
 8003c04:	431bde83 	.word	0x431bde83
 8003c08:	10624dd3 	.word	0x10624dd3

08003c0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	4608      	mov	r0, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	813b      	strh	r3, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c26:	f7ff fb23 	bl	8003270 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	f040 80d9 	bne.w	8003dec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	2319      	movs	r3, #25
 8003c40:	2201      	movs	r2, #1
 8003c42:	496d      	ldr	r1, [pc, #436]	; (8003df8 <HAL_I2C_Mem_Write+0x1ec>)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fdad 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0cc      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2C_Mem_Write+0x56>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e0c5      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d007      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2221      	movs	r2, #33	; 0x21
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2240      	movs	r2, #64	; 0x40
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a4d      	ldr	r2, [pc, #308]	; (8003dfc <HAL_I2C_Mem_Write+0x1f0>)
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cca:	88f8      	ldrh	r0, [r7, #6]
 8003ccc:	893a      	ldrh	r2, [r7, #8]
 8003cce:	8979      	ldrh	r1, [r7, #10]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	4603      	mov	r3, r0
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fbe4 	bl	80044a8 <I2C_RequestMemoryWrite>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d052      	beq.n	8003d8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e081      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fe2e 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d107      	bne.n	8003d12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e06b      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d11b      	bne.n	8003d8c <HAL_I2C_Mem_Write+0x180>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d017      	beq.n	8003d8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1aa      	bne.n	8003cea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fe1a 	bl	80049d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d107      	bne.n	8003dbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e016      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	00100002 	.word	0x00100002
 8003dfc:	ffff0000 	.word	0xffff0000

08003e00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08c      	sub	sp, #48	; 0x30
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	817b      	strh	r3, [r7, #10]
 8003e12:	460b      	mov	r3, r1
 8003e14:	813b      	strh	r3, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e1a:	f7ff fa29 	bl	8003270 <HAL_GetTick>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	f040 8208 	bne.w	800423e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2319      	movs	r3, #25
 8003e34:	2201      	movs	r2, #1
 8003e36:	497b      	ldr	r1, [pc, #492]	; (8004024 <HAL_I2C_Mem_Read+0x224>)
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fcb3 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	e1fb      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x56>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e1f4      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d007      	beq.n	8003e7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2222      	movs	r2, #34	; 0x22
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2240      	movs	r2, #64	; 0x40
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a5b      	ldr	r2, [pc, #364]	; (8004028 <HAL_I2C_Mem_Read+0x228>)
 8003ebc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ebe:	88f8      	ldrh	r0, [r7, #6]
 8003ec0:	893a      	ldrh	r2, [r7, #8]
 8003ec2:	8979      	ldrh	r1, [r7, #10]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	4603      	mov	r3, r0
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fb80 	bl	80045d4 <I2C_RequestMemoryRead>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e1b0      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d113      	bne.n	8003f0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	623b      	str	r3, [r7, #32]
 8003efa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e184      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d11b      	bne.n	8003f4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e164      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d11b      	bne.n	8003f8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	e144      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fa4:	e138      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	f200 80f1 	bhi.w	8004192 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d123      	bne.n	8004000 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fd49 	bl	8004a54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e139      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffe:	e10b      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b02      	cmp	r3, #2
 8004006:	d14e      	bne.n	80040a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	2200      	movs	r2, #0
 8004010:	4906      	ldr	r1, [pc, #24]	; (800402c <HAL_I2C_Mem_Read+0x22c>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fbc6 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e10e      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
 8004022:	bf00      	nop
 8004024:	00100002 	.word	0x00100002
 8004028:	ffff0000 	.word	0xffff0000
 800402c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a4:	e0b8      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2200      	movs	r2, #0
 80040ae:	4966      	ldr	r1, [pc, #408]	; (8004248 <HAL_I2C_Mem_Read+0x448>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fb77 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0bf      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	2200      	movs	r2, #0
 800410a:	494f      	ldr	r1, [pc, #316]	; (8004248 <HAL_I2C_Mem_Read+0x448>)
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fb49 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e091      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004190:	e042      	b.n	8004218 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004194:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fc5c 	bl	8004a54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e04c      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d118      	bne.n	8004218 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f aec2 	bne.w	8003fa6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3728      	adds	r7, #40	; 0x28
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	00010004 	.word	0x00010004

0800424c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	460b      	mov	r3, r1
 800425a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800425c:	f7ff f808 	bl	8003270 <HAL_GetTick>
 8004260:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004262:	2301      	movs	r3, #1
 8004264:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	f040 8111 	bne.w	8004496 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2319      	movs	r3, #25
 800427a:	2201      	movs	r2, #1
 800427c:	4988      	ldr	r1, [pc, #544]	; (80044a0 <HAL_I2C_IsDeviceReady+0x254>)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fa90 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
 800428c:	e104      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_I2C_IsDeviceReady+0x50>
 8004298:	2302      	movs	r3, #2
 800429a:	e0fd      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d007      	beq.n	80042c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2224      	movs	r2, #36	; 0x24
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a70      	ldr	r2, [pc, #448]	; (80044a4 <HAL_I2C_IsDeviceReady+0x258>)
 80042e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fa4e 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431c:	d103      	bne.n	8004326 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0b6      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800432a:	897b      	ldrh	r3, [r7, #10]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004338:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800433a:	f7fe ff99 	bl	8003270 <HAL_GetTick>
 800433e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800436e:	e025      	b.n	80043bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004370:	f7fe ff7e 	bl	8003270 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d302      	bcc.n	8004386 <HAL_I2C_IsDeviceReady+0x13a>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	22a0      	movs	r2, #160	; 0xa0
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b02      	cmp	r3, #2
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2ba0      	cmp	r3, #160	; 0xa0
 80043c6:	d005      	beq.n	80043d4 <HAL_I2C_IsDeviceReady+0x188>
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <HAL_I2C_IsDeviceReady+0x188>
 80043ce:	7dbb      	ldrb	r3, [r7, #22]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0cd      	beq.n	8004370 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d129      	bne.n	800443e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	2319      	movs	r3, #25
 8004416:	2201      	movs	r2, #1
 8004418:	4921      	ldr	r1, [pc, #132]	; (80044a0 <HAL_I2C_IsDeviceReady+0x254>)
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f9c2 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e036      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e02c      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004456:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2319      	movs	r3, #25
 800445e:	2201      	movs	r2, #1
 8004460:	490f      	ldr	r1, [pc, #60]	; (80044a0 <HAL_I2C_IsDeviceReady+0x254>)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f99e 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e012      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	3301      	adds	r3, #1
 8004476:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	f4ff af32 	bcc.w	80042e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	00100002 	.word	0x00100002
 80044a4:	ffff0000 	.word	0xffff0000

080044a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	4608      	mov	r0, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	817b      	strh	r3, [r7, #10]
 80044ba:	460b      	mov	r3, r1
 80044bc:	813b      	strh	r3, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	2200      	movs	r2, #0
 80044da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f960 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00d      	beq.n	8004506 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f8:	d103      	bne.n	8004502 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e05f      	b.n	80045c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004506:	897b      	ldrh	r3, [r7, #10]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004514:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	6a3a      	ldr	r2, [r7, #32]
 800451a:	492d      	ldr	r1, [pc, #180]	; (80045d0 <I2C_RequestMemoryWrite+0x128>)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f998 	bl	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e04c      	b.n	80045c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004544:	6a39      	ldr	r1, [r7, #32]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fa02 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00d      	beq.n	800456e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	2b04      	cmp	r3, #4
 8004558:	d107      	bne.n	800456a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004568:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e02b      	b.n	80045c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d105      	bne.n	8004580 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004574:	893b      	ldrh	r3, [r7, #8]
 8004576:	b2da      	uxtb	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	611a      	str	r2, [r3, #16]
 800457e:	e021      	b.n	80045c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004580:	893b      	ldrh	r3, [r7, #8]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	b29b      	uxth	r3, r3
 8004586:	b2da      	uxtb	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004590:	6a39      	ldr	r1, [r7, #32]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f9dc 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d107      	bne.n	80045b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e005      	b.n	80045c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ba:	893b      	ldrh	r3, [r7, #8]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	00010002 	.word	0x00010002

080045d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	4608      	mov	r0, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	461a      	mov	r2, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	817b      	strh	r3, [r7, #10]
 80045e6:	460b      	mov	r3, r1
 80045e8:	813b      	strh	r3, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	2200      	movs	r2, #0
 8004616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f8c2 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00d      	beq.n	8004642 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004634:	d103      	bne.n	800463e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e0aa      	b.n	8004798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004642:	897b      	ldrh	r3, [r7, #10]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	6a3a      	ldr	r2, [r7, #32]
 8004656:	4952      	ldr	r1, [pc, #328]	; (80047a0 <I2C_RequestMemoryRead+0x1cc>)
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f8fa 	bl	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e097      	b.n	8004798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004680:	6a39      	ldr	r1, [r7, #32]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f964 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00d      	beq.n	80046aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	2b04      	cmp	r3, #4
 8004694:	d107      	bne.n	80046a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e076      	b.n	8004798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d105      	bne.n	80046bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b0:	893b      	ldrh	r3, [r7, #8]
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	611a      	str	r2, [r3, #16]
 80046ba:	e021      	b.n	8004700 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046bc:	893b      	ldrh	r3, [r7, #8]
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	6a39      	ldr	r1, [r7, #32]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f93e 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d107      	bne.n	80046f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e050      	b.n	8004798 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046f6:	893b      	ldrh	r3, [r7, #8]
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004702:	6a39      	ldr	r1, [r7, #32]
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f923 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b04      	cmp	r3, #4
 8004716:	d107      	bne.n	8004728 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004726:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e035      	b.n	8004798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800473a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	2200      	movs	r2, #0
 8004744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f82b 	bl	80047a4 <I2C_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00d      	beq.n	8004770 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004762:	d103      	bne.n	800476c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e013      	b.n	8004798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004770:	897b      	ldrh	r3, [r7, #10]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	4906      	ldr	r1, [pc, #24]	; (80047a0 <I2C_RequestMemoryRead+0x1cc>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f863 	bl	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	00010002 	.word	0x00010002

080047a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047b4:	e025      	b.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d021      	beq.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047be:	f7fe fd57 	bl	8003270 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d116      	bne.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f043 0220 	orr.w	r2, r3, #32
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e023      	b.n	800484a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d10d      	bne.n	8004828 <I2C_WaitOnFlagUntilTimeout+0x84>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	43da      	mvns	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	e00c      	b.n	8004842 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	43da      	mvns	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d0b6      	beq.n	80047b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004860:	e051      	b.n	8004906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004870:	d123      	bne.n	80048ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004880:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800488a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f043 0204 	orr.w	r2, r3, #4
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e046      	b.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d021      	beq.n	8004906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c2:	f7fe fcd5 	bl	8003270 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d116      	bne.n	8004906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f043 0220 	orr.w	r2, r3, #32
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e020      	b.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	0c1b      	lsrs	r3, r3, #16
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10c      	bne.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	43da      	mvns	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	bf14      	ite	ne
 8004922:	2301      	movne	r3, #1
 8004924:	2300      	moveq	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e00b      	b.n	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	43da      	mvns	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4013      	ands	r3, r2
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf14      	ite	ne
 800493c:	2301      	movne	r3, #1
 800493e:	2300      	moveq	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d18d      	bne.n	8004862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800495c:	e02d      	b.n	80049ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f8ce 	bl	8004b00 <I2C_IsAcknowledgeFailed>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e02d      	b.n	80049ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d021      	beq.n	80049ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fe fc7b 	bl	8003270 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d116      	bne.n	80049ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f043 0220 	orr.w	r2, r3, #32
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e007      	b.n	80049ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b80      	cmp	r3, #128	; 0x80
 80049c6:	d1ca      	bne.n	800495e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049de:	e02d      	b.n	8004a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f88d 	bl	8004b00 <I2C_IsAcknowledgeFailed>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e02d      	b.n	8004a4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d021      	beq.n	8004a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f8:	f7fe fc3a 	bl	8003270 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d302      	bcc.n	8004a0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d116      	bne.n	8004a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e007      	b.n	8004a4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d1ca      	bne.n	80049e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a60:	e042      	b.n	8004ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d119      	bne.n	8004aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0210 	mvn.w	r2, #16
 8004a78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e029      	b.n	8004af8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa4:	f7fe fbe4 	bl	8003270 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d116      	bne.n	8004ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d1b5      	bne.n	8004a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b16:	d11b      	bne.n	8004b50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	f043 0204 	orr.w	r2, r3, #4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e264      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d075      	beq.n	8004c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b7e:	4ba3      	ldr	r3, [pc, #652]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d00c      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b8a:	4ba0      	ldr	r3, [pc, #640]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d112      	bne.n	8004bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b96:	4b9d      	ldr	r3, [pc, #628]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba2:	d10b      	bne.n	8004bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	4b99      	ldr	r3, [pc, #612]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05b      	beq.n	8004c68 <HAL_RCC_OscConfig+0x108>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d157      	bne.n	8004c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e23f      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x74>
 8004bc6:	4b91      	ldr	r3, [pc, #580]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a90      	ldr	r2, [pc, #576]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e01d      	b.n	8004c10 <HAL_RCC_OscConfig+0xb0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x98>
 8004bde:	4b8b      	ldr	r3, [pc, #556]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a8a      	ldr	r2, [pc, #552]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	4b88      	ldr	r3, [pc, #544]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a87      	ldr	r2, [pc, #540]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0xb0>
 8004bf8:	4b84      	ldr	r3, [pc, #528]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a83      	ldr	r2, [pc, #524]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b81      	ldr	r3, [pc, #516]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a80      	ldr	r2, [pc, #512]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d013      	beq.n	8004c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fe fb2a 	bl	8003270 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fe fb26 	bl	8003270 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e204      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b76      	ldr	r3, [pc, #472]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0xc0>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe fb16 	bl	8003270 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fe fb12 	bl	8003270 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1f0      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5a:	4b6c      	ldr	r3, [pc, #432]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0xe8>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d063      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c76:	4b65      	ldr	r3, [pc, #404]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c82:	4b62      	ldr	r3, [pc, #392]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d11c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c8e:	4b5f      	ldr	r3, [pc, #380]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	4b5c      	ldr	r3, [pc, #368]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x152>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e1c4      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb2:	4b56      	ldr	r3, [pc, #344]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4952      	ldr	r1, [pc, #328]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc6:	e03a      	b.n	8004d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d020      	beq.n	8004d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd0:	4b4f      	ldr	r3, [pc, #316]	; (8004e10 <HAL_RCC_OscConfig+0x2b0>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd6:	f7fe facb 	bl	8003270 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cde:	f7fe fac7 	bl	8003270 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1a5      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	4b46      	ldr	r3, [pc, #280]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfc:	4b43      	ldr	r3, [pc, #268]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4940      	ldr	r1, [pc, #256]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]
 8004d10:	e015      	b.n	8004d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d12:	4b3f      	ldr	r3, [pc, #252]	; (8004e10 <HAL_RCC_OscConfig+0x2b0>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fe faaa 	bl	8003270 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d20:	f7fe faa6 	bl	8003270 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e184      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d32:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d030      	beq.n	8004dac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d016      	beq.n	8004d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d52:	4b30      	ldr	r3, [pc, #192]	; (8004e14 <HAL_RCC_OscConfig+0x2b4>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d58:	f7fe fa8a 	bl	8003270 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d60:	f7fe fa86 	bl	8003270 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e164      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d72:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x200>
 8004d7e:	e015      	b.n	8004dac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d80:	4b24      	ldr	r3, [pc, #144]	; (8004e14 <HAL_RCC_OscConfig+0x2b4>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d86:	f7fe fa73 	bl	8003270 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d8e:	f7fe fa6f 	bl	8003270 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e14d      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f0      	bne.n	8004d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80a0 	beq.w	8004efa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10f      	bne.n	8004dea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <HAL_RCC_OscConfig+0x2ac>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	60bb      	str	r3, [r7, #8]
 8004de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de6:	2301      	movs	r3, #1
 8004de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_RCC_OscConfig+0x2b8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d121      	bne.n	8004e3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <HAL_RCC_OscConfig+0x2b8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a07      	ldr	r2, [pc, #28]	; (8004e18 <HAL_RCC_OscConfig+0x2b8>)
 8004dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e02:	f7fe fa35 	bl	8003270 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e08:	e011      	b.n	8004e2e <HAL_RCC_OscConfig+0x2ce>
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	42470000 	.word	0x42470000
 8004e14:	42470e80 	.word	0x42470e80
 8004e18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1c:	f7fe fa28 	bl	8003270 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e106      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2e:	4b85      	ldr	r3, [pc, #532]	; (8005044 <HAL_RCC_OscConfig+0x4e4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d106      	bne.n	8004e50 <HAL_RCC_OscConfig+0x2f0>
 8004e42:	4b81      	ldr	r3, [pc, #516]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	4a80      	ldr	r2, [pc, #512]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4e:	e01c      	b.n	8004e8a <HAL_RCC_OscConfig+0x32a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	d10c      	bne.n	8004e72 <HAL_RCC_OscConfig+0x312>
 8004e58:	4b7b      	ldr	r3, [pc, #492]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5c:	4a7a      	ldr	r2, [pc, #488]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004e5e:	f043 0304 	orr.w	r3, r3, #4
 8004e62:	6713      	str	r3, [r2, #112]	; 0x70
 8004e64:	4b78      	ldr	r3, [pc, #480]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	4a77      	ldr	r2, [pc, #476]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e70:	e00b      	b.n	8004e8a <HAL_RCC_OscConfig+0x32a>
 8004e72:	4b75      	ldr	r3, [pc, #468]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	4a74      	ldr	r2, [pc, #464]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7e:	4b72      	ldr	r3, [pc, #456]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	4a71      	ldr	r2, [pc, #452]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004e84:	f023 0304 	bic.w	r3, r3, #4
 8004e88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d015      	beq.n	8004ebe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fe f9ed 	bl	8003270 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e9a:	f7fe f9e9 	bl	8003270 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e0c5      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb0:	4b65      	ldr	r3, [pc, #404]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0ee      	beq.n	8004e9a <HAL_RCC_OscConfig+0x33a>
 8004ebc:	e014      	b.n	8004ee8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebe:	f7fe f9d7 	bl	8003270 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec4:	e00a      	b.n	8004edc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec6:	f7fe f9d3 	bl	8003270 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e0af      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004edc:	4b5a      	ldr	r3, [pc, #360]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1ee      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d105      	bne.n	8004efa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eee:	4b56      	ldr	r3, [pc, #344]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	4a55      	ldr	r2, [pc, #340]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 809b 	beq.w	800503a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f04:	4b50      	ldr	r3, [pc, #320]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 030c 	and.w	r3, r3, #12
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d05c      	beq.n	8004fca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d141      	bne.n	8004f9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f18:	4b4c      	ldr	r3, [pc, #304]	; (800504c <HAL_RCC_OscConfig+0x4ec>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1e:	f7fe f9a7 	bl	8003270 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f26:	f7fe f9a3 	bl	8003270 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e081      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f38:	4b43      	ldr	r3, [pc, #268]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f0      	bne.n	8004f26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	019b      	lsls	r3, r3, #6
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	4937      	ldr	r1, [pc, #220]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f6e:	4b37      	ldr	r3, [pc, #220]	; (800504c <HAL_RCC_OscConfig+0x4ec>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fe f97c 	bl	8003270 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fe f978 	bl	8003270 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e056      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8e:	4b2e      	ldr	r3, [pc, #184]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x41c>
 8004f9a:	e04e      	b.n	800503a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9c:	4b2b      	ldr	r3, [pc, #172]	; (800504c <HAL_RCC_OscConfig+0x4ec>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa2:	f7fe f965 	bl	8003270 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fe f961 	bl	8003270 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e03f      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbc:	4b22      	ldr	r3, [pc, #136]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x44a>
 8004fc8:	e037      	b.n	800503a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e032      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fd6:	4b1c      	ldr	r3, [pc, #112]	; (8005048 <HAL_RCC_OscConfig+0x4e8>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d028      	beq.n	8005036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d121      	bne.n	8005036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d11a      	bne.n	8005036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005006:	4013      	ands	r3, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800500c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800500e:	4293      	cmp	r3, r2
 8005010:	d111      	bne.n	8005036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	3b01      	subs	r3, #1
 8005020:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005022:	429a      	cmp	r2, r3
 8005024:	d107      	bne.n	8005036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d001      	beq.n	800503a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40007000 	.word	0x40007000
 8005048:	40023800 	.word	0x40023800
 800504c:	42470060 	.word	0x42470060

08005050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0cc      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005064:	4b68      	ldr	r3, [pc, #416]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d90c      	bls.n	800508c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005072:	4b65      	ldr	r3, [pc, #404]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507a:	4b63      	ldr	r3, [pc, #396]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0b8      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d020      	beq.n	80050da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a4:	4b59      	ldr	r3, [pc, #356]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4a58      	ldr	r2, [pc, #352]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050bc:	4b53      	ldr	r3, [pc, #332]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	4a52      	ldr	r2, [pc, #328]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c8:	4b50      	ldr	r3, [pc, #320]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	494d      	ldr	r1, [pc, #308]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d044      	beq.n	8005170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d107      	bne.n	80050fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ee:	4b47      	ldr	r3, [pc, #284]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d119      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d003      	beq.n	800510e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800510a:	2b03      	cmp	r3, #3
 800510c:	d107      	bne.n	800511e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510e:	4b3f      	ldr	r3, [pc, #252]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e06f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511e:	4b3b      	ldr	r3, [pc, #236]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e067      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800512e:	4b37      	ldr	r3, [pc, #220]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f023 0203 	bic.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4934      	ldr	r1, [pc, #208]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005140:	f7fe f896 	bl	8003270 <HAL_GetTick>
 8005144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	e00a      	b.n	800515e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005148:	f7fe f892 	bl	8003270 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e04f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515e:	4b2b      	ldr	r3, [pc, #172]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 020c 	and.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	429a      	cmp	r2, r3
 800516e:	d1eb      	bne.n	8005148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005170:	4b25      	ldr	r3, [pc, #148]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d20c      	bcs.n	8005198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b22      	ldr	r3, [pc, #136]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b20      	ldr	r3, [pc, #128]	; (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e032      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4916      	ldr	r1, [pc, #88]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	490e      	ldr	r1, [pc, #56]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051d6:	f000 f821 	bl	800521c <HAL_RCC_GetSysClockFreq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b0b      	ldr	r3, [pc, #44]	; (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	490a      	ldr	r1, [pc, #40]	; (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 80051e8:	5ccb      	ldrb	r3, [r1, r3]
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	4a09      	ldr	r2, [pc, #36]	; (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80051f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <HAL_RCC_ClockConfig+0x1c8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fd fff6 	bl	80031e8 <HAL_InitTick>

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40023c00 	.word	0x40023c00
 800520c:	40023800 	.word	0x40023800
 8005210:	0800b408 	.word	0x0800b408
 8005214:	2000000c 	.word	0x2000000c
 8005218:	20000010 	.word	0x20000010

0800521c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800521c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	2300      	movs	r3, #0
 800522e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005234:	4b67      	ldr	r3, [pc, #412]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 030c 	and.w	r3, r3, #12
 800523c:	2b08      	cmp	r3, #8
 800523e:	d00d      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x40>
 8005240:	2b08      	cmp	r3, #8
 8005242:	f200 80bd 	bhi.w	80053c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x34>
 800524a:	2b04      	cmp	r3, #4
 800524c:	d003      	beq.n	8005256 <HAL_RCC_GetSysClockFreq+0x3a>
 800524e:	e0b7      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005250:	4b61      	ldr	r3, [pc, #388]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005252:	60bb      	str	r3, [r7, #8]
       break;
 8005254:	e0b7      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005256:	4b61      	ldr	r3, [pc, #388]	; (80053dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005258:	60bb      	str	r3, [r7, #8]
      break;
 800525a:	e0b4      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800525c:	4b5d      	ldr	r3, [pc, #372]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005264:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005266:	4b5b      	ldr	r3, [pc, #364]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d04d      	beq.n	800530e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005272:	4b58      	ldr	r3, [pc, #352]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	461a      	mov	r2, r3
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	ea02 0800 	and.w	r8, r2, r0
 800528a:	ea03 0901 	and.w	r9, r3, r1
 800528e:	4640      	mov	r0, r8
 8005290:	4649      	mov	r1, r9
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	014b      	lsls	r3, r1, #5
 800529c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052a0:	0142      	lsls	r2, r0, #5
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	ebb0 0008 	subs.w	r0, r0, r8
 80052aa:	eb61 0109 	sbc.w	r1, r1, r9
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	018b      	lsls	r3, r1, #6
 80052b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052bc:	0182      	lsls	r2, r0, #6
 80052be:	1a12      	subs	r2, r2, r0
 80052c0:	eb63 0301 	sbc.w	r3, r3, r1
 80052c4:	f04f 0000 	mov.w	r0, #0
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	00d9      	lsls	r1, r3, #3
 80052ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d2:	00d0      	lsls	r0, r2, #3
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	eb12 0208 	adds.w	r2, r2, r8
 80052dc:	eb43 0309 	adc.w	r3, r3, r9
 80052e0:	f04f 0000 	mov.w	r0, #0
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	0259      	lsls	r1, r3, #9
 80052ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80052ee:	0250      	lsls	r0, r2, #9
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	f7fa ffce 	bl	80002a0 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4613      	mov	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	e04a      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530e:	4b31      	ldr	r3, [pc, #196]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	099b      	lsrs	r3, r3, #6
 8005314:	461a      	mov	r2, r3
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	ea02 0400 	and.w	r4, r2, r0
 8005326:	ea03 0501 	and.w	r5, r3, r1
 800532a:	4620      	mov	r0, r4
 800532c:	4629      	mov	r1, r5
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	014b      	lsls	r3, r1, #5
 8005338:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800533c:	0142      	lsls	r2, r0, #5
 800533e:	4610      	mov	r0, r2
 8005340:	4619      	mov	r1, r3
 8005342:	1b00      	subs	r0, r0, r4
 8005344:	eb61 0105 	sbc.w	r1, r1, r5
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	018b      	lsls	r3, r1, #6
 8005352:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005356:	0182      	lsls	r2, r0, #6
 8005358:	1a12      	subs	r2, r2, r0
 800535a:	eb63 0301 	sbc.w	r3, r3, r1
 800535e:	f04f 0000 	mov.w	r0, #0
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	00d9      	lsls	r1, r3, #3
 8005368:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800536c:	00d0      	lsls	r0, r2, #3
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	1912      	adds	r2, r2, r4
 8005374:	eb45 0303 	adc.w	r3, r5, r3
 8005378:	f04f 0000 	mov.w	r0, #0
 800537c:	f04f 0100 	mov.w	r1, #0
 8005380:	0299      	lsls	r1, r3, #10
 8005382:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005386:	0290      	lsls	r0, r2, #10
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4610      	mov	r0, r2
 800538e:	4619      	mov	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	461a      	mov	r2, r3
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	f7fa ff82 	bl	80002a0 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4613      	mov	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	3301      	adds	r3, #1
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	60bb      	str	r3, [r7, #8]
      break;
 80053be:	e002      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053c2:	60bb      	str	r3, [r7, #8]
      break;
 80053c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053c6:	68bb      	ldr	r3, [r7, #8]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	00f42400 	.word	0x00f42400
 80053dc:	007a1200 	.word	0x007a1200

080053e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	2000000c 	.word	0x2000000c

080053f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053fc:	f7ff fff0 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	0a9b      	lsrs	r3, r3, #10
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4903      	ldr	r1, [pc, #12]	; (800541c <HAL_RCC_GetPCLK1Freq+0x24>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005414:	4618      	mov	r0, r3
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40023800 	.word	0x40023800
 800541c:	0800b418 	.word	0x0800b418

08005420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005424:	f7ff ffdc 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	0b5b      	lsrs	r3, r3, #13
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	4903      	ldr	r1, [pc, #12]	; (8005444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800543c:	4618      	mov	r0, r3
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40023800 	.word	0x40023800
 8005444:	0800b418 	.word	0x0800b418

08005448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e07b      	b.n	8005552 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d108      	bne.n	8005474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800546a:	d009      	beq.n	8005480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	61da      	str	r2, [r3, #28]
 8005472:	e005      	b.n	8005480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fd fbca 	bl	8002c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	ea42 0103 	orr.w	r1, r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	f003 0104 	and.w	r1, r3, #4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	f003 0210 	and.w	r2, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b088      	sub	sp, #32
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	4613      	mov	r3, r2
 8005568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_SPI_Transmit+0x22>
 8005578:	2302      	movs	r3, #2
 800557a:	e126      	b.n	80057ca <HAL_SPI_Transmit+0x270>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005584:	f7fd fe74 	bl	8003270 <HAL_GetTick>
 8005588:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d002      	beq.n	80055a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800559a:	2302      	movs	r3, #2
 800559c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800559e:	e10b      	b.n	80057b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_Transmit+0x52>
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055b0:	e102      	b.n	80057b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2203      	movs	r2, #3
 80055b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	88fa      	ldrh	r2, [r7, #6]
 80055ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f8:	d10f      	bne.n	800561a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005618:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d007      	beq.n	8005638 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005640:	d14b      	bne.n	80056da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SPI_Transmit+0xf6>
 800564a:	8afb      	ldrh	r3, [r7, #22]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d13e      	bne.n	80056ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	881a      	ldrh	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	1c9a      	adds	r2, r3, #2
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005674:	e02b      	b.n	80056ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d112      	bne.n	80056aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	1c9a      	adds	r2, r3, #2
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80056a8:	e011      	b.n	80056ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056aa:	f7fd fde1 	bl	8003270 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d803      	bhi.n	80056c2 <HAL_SPI_Transmit+0x168>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d102      	bne.n	80056c8 <HAL_SPI_Transmit+0x16e>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056cc:	e074      	b.n	80057b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1ce      	bne.n	8005676 <HAL_SPI_Transmit+0x11c>
 80056d8:	e04c      	b.n	8005774 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <HAL_SPI_Transmit+0x18e>
 80056e2:	8afb      	ldrh	r3, [r7, #22]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d140      	bne.n	800576a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800570e:	e02c      	b.n	800576a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d113      	bne.n	8005746 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	7812      	ldrb	r2, [r2, #0]
 800572a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	86da      	strh	r2, [r3, #54]	; 0x36
 8005744:	e011      	b.n	800576a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005746:	f7fd fd93 	bl	8003270 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d803      	bhi.n	800575e <HAL_SPI_Transmit+0x204>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d102      	bne.n	8005764 <HAL_SPI_Transmit+0x20a>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005768:	e026      	b.n	80057b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1cd      	bne.n	8005710 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fbcb 	bl	8005f14 <SPI_EndRxTxTransaction>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e000      	b.n	80057b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80057b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b088      	sub	sp, #32
 80057d6:	af02      	add	r7, sp, #8
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	4613      	mov	r3, r2
 80057e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ee:	d112      	bne.n	8005816 <HAL_SPI_Receive+0x44>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10e      	bne.n	8005816 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2204      	movs	r2, #4
 80057fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	4613      	mov	r3, r2
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f8f1 	bl	80059f4 <HAL_SPI_TransmitReceive>
 8005812:	4603      	mov	r3, r0
 8005814:	e0ea      	b.n	80059ec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_SPI_Receive+0x52>
 8005820:	2302      	movs	r3, #2
 8005822:	e0e3      	b.n	80059ec <HAL_SPI_Receive+0x21a>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800582c:	f7fd fd20 	bl	8003270 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b01      	cmp	r3, #1
 800583c:	d002      	beq.n	8005844 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800583e:	2302      	movs	r3, #2
 8005840:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005842:	e0ca      	b.n	80059da <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Receive+0x7e>
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005854:	e0c1      	b.n	80059da <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2204      	movs	r2, #4
 800585a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589c:	d10f      	bne.n	80058be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d007      	beq.n	80058dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d162      	bne.n	80059aa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058e4:	e02e      	b.n	8005944 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d115      	bne.n	8005920 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f103 020c 	add.w	r2, r3, #12
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	7812      	ldrb	r2, [r2, #0]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800591e:	e011      	b.n	8005944 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005920:	f7fd fca6 	bl	8003270 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d803      	bhi.n	8005938 <HAL_SPI_Receive+0x166>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d102      	bne.n	800593e <HAL_SPI_Receive+0x16c>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005942:	e04a      	b.n	80059da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1cb      	bne.n	80058e6 <HAL_SPI_Receive+0x114>
 800594e:	e031      	b.n	80059b4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b01      	cmp	r3, #1
 800595c:	d113      	bne.n	8005986 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	b292      	uxth	r2, r2
 800596a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005984:	e011      	b.n	80059aa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005986:	f7fd fc73 	bl	8003270 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d803      	bhi.n	800599e <HAL_SPI_Receive+0x1cc>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d102      	bne.n	80059a4 <HAL_SPI_Receive+0x1d2>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059a8:	e017      	b.n	80059da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1cd      	bne.n	8005950 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fa45 	bl	8005e48 <SPI_EndRxTransaction>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
 80059d6:	e000      	b.n	80059da <HAL_SPI_Receive+0x208>
  }

error :
 80059d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08c      	sub	sp, #48	; 0x30
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a02:	2301      	movs	r3, #1
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_SPI_TransmitReceive+0x26>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e18a      	b.n	8005d30 <HAL_SPI_TransmitReceive+0x33c>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a22:	f7fd fc25 	bl	8003270 <HAL_GetTick>
 8005a26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d00f      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x70>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a4a:	d107      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x68>
 8005a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d003      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a62:	e15b      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x82>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x82>
 8005a70:	887b      	ldrh	r3, [r7, #2]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a7c:	e14e      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d003      	beq.n	8005a92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2205      	movs	r2, #5
 8005a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	887a      	ldrh	r2, [r7, #2]
 8005aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	887a      	ldrh	r2, [r7, #2]
 8005aa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	887a      	ldrh	r2, [r7, #2]
 8005ab4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	887a      	ldrh	r2, [r7, #2]
 8005aba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d007      	beq.n	8005ae6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aee:	d178      	bne.n	8005be2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x10a>
 8005af8:	8b7b      	ldrh	r3, [r7, #26]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d166      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	881a      	ldrh	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	1c9a      	adds	r2, r3, #2
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b22:	e053      	b.n	8005bcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d11b      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x176>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d016      	beq.n	8005b6a <HAL_SPI_TransmitReceive+0x176>
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d113      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	881a      	ldrh	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	1c9a      	adds	r2, r3, #2
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d119      	bne.n	8005bac <HAL_SPI_TransmitReceive+0x1b8>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d014      	beq.n	8005bac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	b292      	uxth	r2, r2
 8005b8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	1c9a      	adds	r2, r3, #2
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bac:	f7fd fb60 	bl	8003270 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d807      	bhi.n	8005bcc <HAL_SPI_TransmitReceive+0x1d8>
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d003      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bca:	e0a7      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1a6      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x130>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1a1      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x130>
 8005be0:	e07c      	b.n	8005cdc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_SPI_TransmitReceive+0x1fc>
 8005bea:	8b7b      	ldrh	r3, [r7, #26]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d16b      	bne.n	8005cc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	7812      	ldrb	r2, [r2, #0]
 8005bfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c16:	e057      	b.n	8005cc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d11c      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x26c>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d017      	beq.n	8005c60 <HAL_SPI_TransmitReceive+0x26c>
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d114      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d119      	bne.n	8005ca2 <HAL_SPI_TransmitReceive+0x2ae>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d014      	beq.n	8005ca2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ca2:	f7fd fae5 	bl	8003270 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d803      	bhi.n	8005cba <HAL_SPI_TransmitReceive+0x2c6>
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d102      	bne.n	8005cc0 <HAL_SPI_TransmitReceive+0x2cc>
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d103      	bne.n	8005cc8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cc6:	e029      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1a2      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x224>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d19d      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f917 	bl	8005f14 <SPI_EndRxTxTransaction>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d006      	beq.n	8005cfa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005cf8:	e010      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	e000      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3730      	adds	r7, #48	; 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	4613      	mov	r3, r2
 8005d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d48:	f7fd fa92 	bl	8003270 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d58:	f7fd fa8a 	bl	8003270 <HAL_GetTick>
 8005d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d5e:	4b39      	ldr	r3, [pc, #228]	; (8005e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	015b      	lsls	r3, r3, #5
 8005d64:	0d1b      	lsrs	r3, r3, #20
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	fb02 f303 	mul.w	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d6e:	e054      	b.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d050      	beq.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d78:	f7fd fa7a 	bl	8003270 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d902      	bls.n	8005d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d13d      	bne.n	8005e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da6:	d111      	bne.n	8005dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db0:	d004      	beq.n	8005dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dba:	d107      	bne.n	8005dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd4:	d10f      	bne.n	8005df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e017      	b.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4013      	ands	r3, r2
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d19b      	bne.n	8005d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000000c 	.word	0x2000000c

08005e48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e5c:	d111      	bne.n	8005e82 <SPI_EndRxTransaction+0x3a>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e66:	d004      	beq.n	8005e72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e70:	d107      	bne.n	8005e82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8a:	d12a      	bne.n	8005ee2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e94:	d012      	beq.n	8005ebc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2180      	movs	r1, #128	; 0x80
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ff49 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d02d      	beq.n	8005f08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e026      	b.n	8005f0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff ff36 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01a      	beq.n	8005f08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e013      	b.n	8005f0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2101      	movs	r1, #1
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff ff23 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e000      	b.n	8005f0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <SPI_EndRxTxTransaction+0x7c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <SPI_EndRxTxTransaction+0x80>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	0d5b      	lsrs	r3, r3, #21
 8005f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f30:	fb02 f303 	mul.w	r3, r2, r3
 8005f34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f3e:	d112      	bne.n	8005f66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2200      	movs	r2, #0
 8005f48:	2180      	movs	r1, #128	; 0x80
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff fef4 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	f043 0220 	orr.w	r2, r3, #32
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e00f      	b.n	8005f86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	2b80      	cmp	r3, #128	; 0x80
 8005f7e:	d0f2      	beq.n	8005f66 <SPI_EndRxTxTransaction+0x52>
 8005f80:	e000      	b.n	8005f84 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f82:	bf00      	nop
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	2000000c 	.word	0x2000000c
 8005f94:	165e9f81 	.word	0x165e9f81

08005f98 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e034      	b.n	8006018 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7fa fd00 	bl	80009c8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f001 fc6e 	bl	80078b4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	f001 fcb8 	bl	8007958 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6858      	ldr	r0, [r3, #4]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	f001 fced 	bl	80079d4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	6892      	ldr	r2, [r2, #8]
 8006002:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	6892      	ldr	r2, [r2, #8]
 800600e:	f041 0101 	orr.w	r1, r1, #1
 8006012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e041      	b.n	80060b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fc ff36 	bl	8002eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f000 fa96 	bl	8006590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d001      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e04e      	b.n	8006176 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a23      	ldr	r2, [pc, #140]	; (8006184 <HAL_TIM_Base_Start_IT+0xc4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d022      	beq.n	8006140 <HAL_TIM_Base_Start_IT+0x80>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006102:	d01d      	beq.n	8006140 <HAL_TIM_Base_Start_IT+0x80>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1f      	ldr	r2, [pc, #124]	; (8006188 <HAL_TIM_Base_Start_IT+0xc8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d018      	beq.n	8006140 <HAL_TIM_Base_Start_IT+0x80>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1e      	ldr	r2, [pc, #120]	; (800618c <HAL_TIM_Base_Start_IT+0xcc>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <HAL_TIM_Base_Start_IT+0x80>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1c      	ldr	r2, [pc, #112]	; (8006190 <HAL_TIM_Base_Start_IT+0xd0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <HAL_TIM_Base_Start_IT+0x80>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <HAL_TIM_Base_Start_IT+0xd4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_TIM_Base_Start_IT+0x80>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a19      	ldr	r2, [pc, #100]	; (8006198 <HAL_TIM_Base_Start_IT+0xd8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_TIM_Base_Start_IT+0x80>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a18      	ldr	r2, [pc, #96]	; (800619c <HAL_TIM_Base_Start_IT+0xdc>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d111      	bne.n	8006164 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b06      	cmp	r3, #6
 8006150:	d010      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006162:	e007      	b.n	8006174 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40010000 	.word	0x40010000
 8006188:	40000400 	.word	0x40000400
 800618c:	40000800 	.word	0x40000800
 8006190:	40000c00 	.word	0x40000c00
 8006194:	40010400 	.word	0x40010400
 8006198:	40014000 	.word	0x40014000
 800619c:	40001800 	.word	0x40001800

080061a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d122      	bne.n	80061fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d11b      	bne.n	80061fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0202 	mvn.w	r2, #2
 80061cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9b5 	bl	8006552 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9a7 	bl	800653e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f9b8 	bl	8006566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b04      	cmp	r3, #4
 8006208:	d122      	bne.n	8006250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b04      	cmp	r3, #4
 8006216:	d11b      	bne.n	8006250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0204 	mvn.w	r2, #4
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f98b 	bl	8006552 <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f97d 	bl	800653e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f98e 	bl	8006566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b08      	cmp	r3, #8
 800625c:	d122      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b08      	cmp	r3, #8
 800626a:	d11b      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0208 	mvn.w	r2, #8
 8006274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2204      	movs	r2, #4
 800627a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f961 	bl	8006552 <HAL_TIM_IC_CaptureCallback>
 8006290:	e005      	b.n	800629e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f953 	bl	800653e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f964 	bl	8006566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0310 	and.w	r3, r3, #16
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d122      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b10      	cmp	r3, #16
 80062be:	d11b      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0210 	mvn.w	r2, #16
 80062c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2208      	movs	r2, #8
 80062ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f937 	bl	8006552 <HAL_TIM_IC_CaptureCallback>
 80062e4:	e005      	b.n	80062f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f929 	bl	800653e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f93a 	bl	8006566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b01      	cmp	r3, #1
 8006304:	d10e      	bne.n	8006324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b01      	cmp	r3, #1
 8006312:	d107      	bne.n	8006324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0201 	mvn.w	r2, #1
 800631c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fc fc28 	bl	8002b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632e:	2b80      	cmp	r3, #128	; 0x80
 8006330:	d10e      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633c:	2b80      	cmp	r3, #128	; 0x80
 800633e:	d107      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fae0 	bl	8006910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d10e      	bne.n	800637c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d107      	bne.n	800637c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f8ff 	bl	800657a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b20      	cmp	r3, #32
 8006388:	d10e      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b20      	cmp	r3, #32
 8006396:	d107      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0220 	mvn.w	r2, #32
 80063a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 faaa 	bl	80068fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_TIM_ConfigClockSource+0x1c>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e0b4      	b.n	8006536 <HAL_TIM_ConfigClockSource+0x186>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006404:	d03e      	beq.n	8006484 <HAL_TIM_ConfigClockSource+0xd4>
 8006406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800640a:	f200 8087 	bhi.w	800651c <HAL_TIM_ConfigClockSource+0x16c>
 800640e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006412:	f000 8086 	beq.w	8006522 <HAL_TIM_ConfigClockSource+0x172>
 8006416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641a:	d87f      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 800641c:	2b70      	cmp	r3, #112	; 0x70
 800641e:	d01a      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0xa6>
 8006420:	2b70      	cmp	r3, #112	; 0x70
 8006422:	d87b      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 8006424:	2b60      	cmp	r3, #96	; 0x60
 8006426:	d050      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x11a>
 8006428:	2b60      	cmp	r3, #96	; 0x60
 800642a:	d877      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 800642c:	2b50      	cmp	r3, #80	; 0x50
 800642e:	d03c      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0xfa>
 8006430:	2b50      	cmp	r3, #80	; 0x50
 8006432:	d873      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d058      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x13a>
 8006438:	2b40      	cmp	r3, #64	; 0x40
 800643a:	d86f      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 800643c:	2b30      	cmp	r3, #48	; 0x30
 800643e:	d064      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x15a>
 8006440:	2b30      	cmp	r3, #48	; 0x30
 8006442:	d86b      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 8006444:	2b20      	cmp	r3, #32
 8006446:	d060      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x15a>
 8006448:	2b20      	cmp	r3, #32
 800644a:	d867      	bhi.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d05c      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x15a>
 8006450:	2b10      	cmp	r3, #16
 8006452:	d05a      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x15a>
 8006454:	e062      	b.n	800651c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6899      	ldr	r1, [r3, #8]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f000 f9ad 	bl	80067c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006478:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	609a      	str	r2, [r3, #8]
      break;
 8006482:	e04f      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	6899      	ldr	r1, [r3, #8]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f000 f996 	bl	80067c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a6:	609a      	str	r2, [r3, #8]
      break;
 80064a8:	e03c      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6859      	ldr	r1, [r3, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f000 f90a 	bl	80066d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2150      	movs	r1, #80	; 0x50
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f963 	bl	800678e <TIM_ITRx_SetConfig>
      break;
 80064c8:	e02c      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f000 f929 	bl	800672e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2160      	movs	r1, #96	; 0x60
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f953 	bl	800678e <TIM_ITRx_SetConfig>
      break;
 80064e8:	e01c      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	6859      	ldr	r1, [r3, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	461a      	mov	r2, r3
 80064f8:	f000 f8ea 	bl	80066d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2140      	movs	r1, #64	; 0x40
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f943 	bl	800678e <TIM_ITRx_SetConfig>
      break;
 8006508:	e00c      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f000 f93a 	bl	800678e <TIM_ITRx_SetConfig>
      break;
 800651a:	e003      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
      break;
 8006520:	e000      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006522:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
	...

08006590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a40      	ldr	r2, [pc, #256]	; (80066a4 <TIM_Base_SetConfig+0x114>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d013      	beq.n	80065d0 <TIM_Base_SetConfig+0x40>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ae:	d00f      	beq.n	80065d0 <TIM_Base_SetConfig+0x40>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a3d      	ldr	r2, [pc, #244]	; (80066a8 <TIM_Base_SetConfig+0x118>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00b      	beq.n	80065d0 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a3c      	ldr	r2, [pc, #240]	; (80066ac <TIM_Base_SetConfig+0x11c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d007      	beq.n	80065d0 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a3b      	ldr	r2, [pc, #236]	; (80066b0 <TIM_Base_SetConfig+0x120>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a3a      	ldr	r2, [pc, #232]	; (80066b4 <TIM_Base_SetConfig+0x124>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d108      	bne.n	80065e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2f      	ldr	r2, [pc, #188]	; (80066a4 <TIM_Base_SetConfig+0x114>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d02b      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f0:	d027      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2c      	ldr	r2, [pc, #176]	; (80066a8 <TIM_Base_SetConfig+0x118>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d023      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2b      	ldr	r2, [pc, #172]	; (80066ac <TIM_Base_SetConfig+0x11c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01f      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2a      	ldr	r2, [pc, #168]	; (80066b0 <TIM_Base_SetConfig+0x120>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01b      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a29      	ldr	r2, [pc, #164]	; (80066b4 <TIM_Base_SetConfig+0x124>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d017      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a28      	ldr	r2, [pc, #160]	; (80066b8 <TIM_Base_SetConfig+0x128>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a27      	ldr	r2, [pc, #156]	; (80066bc <TIM_Base_SetConfig+0x12c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00f      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a26      	ldr	r2, [pc, #152]	; (80066c0 <TIM_Base_SetConfig+0x130>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00b      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a25      	ldr	r2, [pc, #148]	; (80066c4 <TIM_Base_SetConfig+0x134>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a24      	ldr	r2, [pc, #144]	; (80066c8 <TIM_Base_SetConfig+0x138>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d003      	beq.n	8006642 <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a23      	ldr	r2, [pc, #140]	; (80066cc <TIM_Base_SetConfig+0x13c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d108      	bne.n	8006654 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a0a      	ldr	r2, [pc, #40]	; (80066a4 <TIM_Base_SetConfig+0x114>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_Base_SetConfig+0xf8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a0c      	ldr	r2, [pc, #48]	; (80066b4 <TIM_Base_SetConfig+0x124>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d103      	bne.n	8006690 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	615a      	str	r2, [r3, #20]
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40010000 	.word	0x40010000
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40000c00 	.word	0x40000c00
 80066b4:	40010400 	.word	0x40010400
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40014400 	.word	0x40014400
 80066c0:	40014800 	.word	0x40014800
 80066c4:	40001800 	.word	0x40001800
 80066c8:	40001c00 	.word	0x40001c00
 80066cc:	40002000 	.word	0x40002000

080066d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f023 0201 	bic.w	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f023 030a 	bic.w	r3, r3, #10
 800670c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800672e:	b480      	push	{r7}
 8006730:	b087      	sub	sp, #28
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f023 0210 	bic.w	r2, r3, #16
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	031b      	lsls	r3, r3, #12
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800676a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	621a      	str	r2, [r3, #32]
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f043 0307 	orr.w	r3, r3, #7
 80067b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	609a      	str	r2, [r3, #8]
}
 80067b8:	bf00      	nop
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	021a      	lsls	r2, r3, #8
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	609a      	str	r2, [r3, #8]
}
 80067f8:	bf00      	nop
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006818:	2302      	movs	r3, #2
 800681a:	e05a      	b.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a21      	ldr	r2, [pc, #132]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d022      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006868:	d01d      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d018      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d013      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00e      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a18      	ldr	r2, [pc, #96]	; (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d009      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d004      	beq.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d10c      	bne.n	80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40000400 	.word	0x40000400
 80068e8:	40000800 	.word	0x40000800
 80068ec:	40000c00 	.word	0x40000c00
 80068f0:	40010400 	.word	0x40010400
 80068f4:	40014000 	.word	0x40014000
 80068f8:	40001800 	.word	0x40001800

080068fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e03f      	b.n	80069b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fc fb72 	bl	8003034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2224      	movs	r2, #36	; 0x24
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fddb 	bl	8007524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800697c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695a      	ldr	r2, [r3, #20]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800698c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800699c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b08a      	sub	sp, #40	; 0x28
 80069c2:	af02      	add	r7, sp, #8
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d17c      	bne.n	8006ad8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <HAL_UART_Transmit+0x2c>
 80069e4:	88fb      	ldrh	r3, [r7, #6]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e075      	b.n	8006ada <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_UART_Transmit+0x3e>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e06e      	b.n	8006ada <HAL_UART_Transmit+0x11c>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2221      	movs	r2, #33	; 0x21
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a12:	f7fc fc2d 	bl	8003270 <HAL_GetTick>
 8006a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	88fa      	ldrh	r2, [r7, #6]
 8006a1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	88fa      	ldrh	r2, [r7, #6]
 8006a22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2c:	d108      	bne.n	8006a40 <HAL_UART_Transmit+0x82>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	e003      	b.n	8006a48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a50:	e02a      	b.n	8006aa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fb1f 	bl	80070a0 <UART_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e036      	b.n	8006ada <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10b      	bne.n	8006a8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	3302      	adds	r3, #2
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	e007      	b.n	8006a9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	781a      	ldrb	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3301      	adds	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1cf      	bne.n	8006a52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2140      	movs	r1, #64	; 0x40
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 faef 	bl	80070a0 <UART_WaitOnFlagUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e006      	b.n	8006ada <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e000      	b.n	8006ada <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ad8:	2302      	movs	r3, #2
  }
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	4613      	mov	r3, r2
 8006aee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d11d      	bne.n	8006b38 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_UART_Receive_IT+0x26>
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e016      	b.n	8006b3a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <HAL_UART_Receive_IT+0x38>
 8006b16:	2302      	movs	r3, #2
 8006b18:	e00f      	b.n	8006b3a <HAL_UART_Receive_IT+0x58>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fb24 	bl	800717c <UART_Start_Receive_IT>
 8006b34:	4603      	mov	r3, r0
 8006b36:	e000      	b.n	8006b3a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b38:	2302      	movs	r3, #2
  }
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b0ba      	sub	sp, #232	; 0xe8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10f      	bne.n	8006baa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <HAL_UART_IRQHandler+0x66>
 8006b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fc03 	bl	80073ae <UART_Receive_IT>
      return;
 8006ba8:	e256      	b.n	8007058 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 80de 	beq.w	8006d70 <HAL_UART_IRQHandler+0x22c>
 8006bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d106      	bne.n	8006bce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 80d1 	beq.w	8006d70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <HAL_UART_IRQHandler+0xae>
 8006bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	f043 0201 	orr.w	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <HAL_UART_IRQHandler+0xd2>
 8006bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f043 0202 	orr.w	r2, r3, #2
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <HAL_UART_IRQHandler+0xf6>
 8006c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	f043 0204 	orr.w	r2, r3, #4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d011      	beq.n	8006c6a <HAL_UART_IRQHandler+0x126>
 8006c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d105      	bne.n	8006c5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d005      	beq.n	8006c6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	f043 0208 	orr.w	r2, r3, #8
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 81ed 	beq.w	800704e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c78:	f003 0320 	and.w	r3, r3, #32
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d008      	beq.n	8006c92 <HAL_UART_IRQHandler+0x14e>
 8006c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fb8e 	bl	80073ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2301      	moveq	r3, #1
 8006ca2:	2300      	movne	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <HAL_UART_IRQHandler+0x17a>
 8006cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d04f      	beq.n	8006d5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa96 	bl	80071f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d141      	bne.n	8006d56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3314      	adds	r3, #20
 8006cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3314      	adds	r3, #20
 8006cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1d9      	bne.n	8006cd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d013      	beq.n	8006d4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	4a7d      	ldr	r2, [pc, #500]	; (8006f20 <HAL_UART_IRQHandler+0x3dc>)
 8006d2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fc fc4d 	bl	80035d2 <HAL_DMA_Abort_IT>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d016      	beq.n	8006d6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	e00e      	b.n	8006d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f990 	bl	8007074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d54:	e00a      	b.n	8006d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f98c 	bl	8007074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5c:	e006      	b.n	8006d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f988 	bl	8007074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d6a:	e170      	b.n	800704e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6c:	bf00      	nop
    return;
 8006d6e:	e16e      	b.n	800704e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	f040 814a 	bne.w	800700e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8143 	beq.w	800700e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 813c 	beq.w	800700e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d96:	2300      	movs	r3, #0
 8006d98:	60bb      	str	r3, [r7, #8]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60bb      	str	r3, [r7, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	f040 80b4 	bne.w	8006f24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8140 	beq.w	8007052 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	f080 8139 	bcs.w	8007052 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006de6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df2:	f000 8088 	beq.w	8006f06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	330c      	adds	r3, #12
 8006dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1d9      	bne.n	8006df6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3314      	adds	r3, #20
 8006e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e54:	f023 0301 	bic.w	r3, r3, #1
 8006e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3314      	adds	r3, #20
 8006e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e1      	bne.n	8006e42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3314      	adds	r3, #20
 8006e84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3314      	adds	r3, #20
 8006e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ea4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e3      	bne.n	8006e7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed6:	f023 0310 	bic.w	r3, r3, #16
 8006eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ee8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006eea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e3      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fc faf6 	bl	80034f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f8b6 	bl	8007088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f1c:	e099      	b.n	8007052 <HAL_UART_IRQHandler+0x50e>
 8006f1e:	bf00      	nop
 8006f20:	080072b7 	.word	0x080072b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 808b 	beq.w	8007056 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8086 	beq.w	8007056 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	330c      	adds	r3, #12
 8006f6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f6e:	647a      	str	r2, [r7, #68]	; 0x44
 8006f70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e3      	bne.n	8006f4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3314      	adds	r3, #20
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	623b      	str	r3, [r7, #32]
   return(result);
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3314      	adds	r3, #20
 8006fa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8006fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e3      	bne.n	8006f82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0310 	bic.w	r3, r3, #16
 8006fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	330c      	adds	r3, #12
 8006fe8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006fec:	61fa      	str	r2, [r7, #28]
 8006fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	69b9      	ldr	r1, [r7, #24]
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e3      	bne.n	8006fc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f83e 	bl	8007088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800700c:	e023      	b.n	8007056 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800700e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <HAL_UART_IRQHandler+0x4ea>
 800701a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f959 	bl	80072de <UART_Transmit_IT>
    return;
 800702c:	e014      	b.n	8007058 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00e      	beq.n	8007058 <HAL_UART_IRQHandler+0x514>
 800703a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800703e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f999 	bl	800737e <UART_EndTransmit_IT>
    return;
 800704c:	e004      	b.n	8007058 <HAL_UART_IRQHandler+0x514>
    return;
 800704e:	bf00      	nop
 8007050:	e002      	b.n	8007058 <HAL_UART_IRQHandler+0x514>
      return;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <HAL_UART_IRQHandler+0x514>
      return;
 8007056:	bf00      	nop
  }
}
 8007058:	37e8      	adds	r7, #232	; 0xe8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop

08007060 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b090      	sub	sp, #64	; 0x40
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	4613      	mov	r3, r2
 80070ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b0:	e050      	b.n	8007154 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b8:	d04c      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80070c0:	f7fc f8d6 	bl	8003270 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d241      	bcs.n	8007154 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	330c      	adds	r3, #12
 80070ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070f0:	637a      	str	r2, [r7, #52]	; 0x34
 80070f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3314      	adds	r3, #20
 800710a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	613b      	str	r3, [r7, #16]
   return(result);
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f023 0301 	bic.w	r3, r3, #1
 800711a:	63bb      	str	r3, [r7, #56]	; 0x38
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3314      	adds	r3, #20
 8007122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007124:	623a      	str	r2, [r7, #32]
 8007126:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	69f9      	ldr	r1, [r7, #28]
 800712a:	6a3a      	ldr	r2, [r7, #32]
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	61bb      	str	r3, [r7, #24]
   return(result);
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e5      	bne.n	8007104 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e00f      	b.n	8007174 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4013      	ands	r3, r2
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	429a      	cmp	r2, r3
 8007162:	bf0c      	ite	eq
 8007164:	2301      	moveq	r3, #1
 8007166:	2300      	movne	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	429a      	cmp	r2, r3
 8007170:	d09f      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3740      	adds	r7, #64	; 0x40
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	88fa      	ldrh	r2, [r7, #6]
 800719a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2222      	movs	r2, #34	; 0x22
 80071a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071c0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695a      	ldr	r2, [r3, #20]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0201 	orr.w	r2, r2, #1
 80071d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0220 	orr.w	r2, r2, #32
 80071e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b095      	sub	sp, #84	; 0x54
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	330c      	adds	r3, #12
 80071fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800720e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	330c      	adds	r3, #12
 8007216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007218:	643a      	str	r2, [r7, #64]	; 0x40
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800721e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e5      	bne.n	80071f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3314      	adds	r3, #20
 8007232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	61fb      	str	r3, [r7, #28]
   return(result);
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f023 0301 	bic.w	r3, r3, #1
 8007242:	64bb      	str	r3, [r7, #72]	; 0x48
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3314      	adds	r3, #20
 800724a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800724c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e5      	bne.n	800722c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	2b01      	cmp	r3, #1
 8007266:	d119      	bne.n	800729c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	60bb      	str	r3, [r7, #8]
   return(result);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f023 0310 	bic.w	r3, r3, #16
 800727e:	647b      	str	r3, [r7, #68]	; 0x44
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007288:	61ba      	str	r2, [r7, #24]
 800728a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6979      	ldr	r1, [r7, #20]
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	613b      	str	r3, [r7, #16]
   return(result);
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e5      	bne.n	8007268 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2220      	movs	r2, #32
 80072a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80072aa:	bf00      	nop
 80072ac:	3754      	adds	r7, #84	; 0x54
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff fecf 	bl	8007074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072de:	b480      	push	{r7}
 80072e0:	b085      	sub	sp, #20
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b21      	cmp	r3, #33	; 0x21
 80072f0:	d13e      	bne.n	8007370 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fa:	d114      	bne.n	8007326 <UART_Transmit_IT+0x48>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d110      	bne.n	8007326 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007318:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	1c9a      	adds	r2, r3, #2
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	621a      	str	r2, [r3, #32]
 8007324:	e008      	b.n	8007338 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	1c59      	adds	r1, r3, #1
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6211      	str	r1, [r2, #32]
 8007330:	781a      	ldrb	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29b      	uxth	r3, r3
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	4619      	mov	r1, r3
 8007346:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10f      	bne.n	800736c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800735a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800736a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	e000      	b.n	8007372 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007370:	2302      	movs	r3, #2
  }
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007394:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff fe5e 	bl	8007060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b08c      	sub	sp, #48	; 0x30
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b22      	cmp	r3, #34	; 0x22
 80073c0:	f040 80ab 	bne.w	800751a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073cc:	d117      	bne.n	80073fe <UART_Receive_IT+0x50>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d113      	bne.n	80073fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	1c9a      	adds	r2, r3, #2
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	629a      	str	r2, [r3, #40]	; 0x28
 80073fc:	e026      	b.n	800744c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007404:	2300      	movs	r3, #0
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007410:	d007      	beq.n	8007422 <UART_Receive_IT+0x74>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <UART_Receive_IT+0x82>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	b2da      	uxtb	r2, r3
 800742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	e008      	b.n	8007442 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743c:	b2da      	uxtb	r2, r3
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29b      	uxth	r3, r3
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4619      	mov	r1, r3
 800745a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800745c:	2b00      	cmp	r3, #0
 800745e:	d15a      	bne.n	8007516 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0220 	bic.w	r2, r2, #32
 800746e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800747e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695a      	ldr	r2, [r3, #20]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0201 	bic.w	r2, r2, #1
 800748e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	2b01      	cmp	r3, #1
 800749e:	d135      	bne.n	800750c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	330c      	adds	r3, #12
 80074ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	613b      	str	r3, [r7, #16]
   return(result);
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f023 0310 	bic.w	r3, r3, #16
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c6:	623a      	str	r2, [r7, #32]
 80074c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	69f9      	ldr	r1, [r7, #28]
 80074cc:	6a3a      	ldr	r2, [r7, #32]
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e5      	bne.n	80074a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0310 	and.w	r3, r3, #16
 80074e4:	2b10      	cmp	r3, #16
 80074e6:	d10a      	bne.n	80074fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff fdbf 	bl	8007088 <HAL_UARTEx_RxEventCallback>
 800750a:	e002      	b.n	8007512 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fb fd21 	bl	8002f54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	e002      	b.n	800751c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	e000      	b.n	800751c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800751a:	2302      	movs	r3, #2
  }
}
 800751c:	4618      	mov	r0, r3
 800751e:	3730      	adds	r7, #48	; 0x30
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007528:	b09f      	sub	sp, #124	; 0x7c
 800752a:	af00      	add	r7, sp, #0
 800752c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800752e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753a:	68d9      	ldr	r1, [r3, #12]
 800753c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	ea40 0301 	orr.w	r3, r0, r1
 8007544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007548:	689a      	ldr	r2, [r3, #8]
 800754a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	431a      	orrs	r2, r3
 8007550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	431a      	orrs	r2, r3
 8007556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	4313      	orrs	r3, r2
 800755c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800755e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007568:	f021 010c 	bic.w	r1, r1, #12
 800756c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007572:	430b      	orrs	r3, r1
 8007574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007582:	6999      	ldr	r1, [r3, #24]
 8007584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	ea40 0301 	orr.w	r3, r0, r1
 800758c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800758e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4bc5      	ldr	r3, [pc, #788]	; (80078a8 <UART_SetConfig+0x384>)
 8007594:	429a      	cmp	r2, r3
 8007596:	d004      	beq.n	80075a2 <UART_SetConfig+0x7e>
 8007598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	4bc3      	ldr	r3, [pc, #780]	; (80078ac <UART_SetConfig+0x388>)
 800759e:	429a      	cmp	r2, r3
 80075a0:	d103      	bne.n	80075aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075a2:	f7fd ff3d 	bl	8005420 <HAL_RCC_GetPCLK2Freq>
 80075a6:	6778      	str	r0, [r7, #116]	; 0x74
 80075a8:	e002      	b.n	80075b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075aa:	f7fd ff25 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 80075ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b8:	f040 80b6 	bne.w	8007728 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075be:	461c      	mov	r4, r3
 80075c0:	f04f 0500 	mov.w	r5, #0
 80075c4:	4622      	mov	r2, r4
 80075c6:	462b      	mov	r3, r5
 80075c8:	1891      	adds	r1, r2, r2
 80075ca:	6439      	str	r1, [r7, #64]	; 0x40
 80075cc:	415b      	adcs	r3, r3
 80075ce:	647b      	str	r3, [r7, #68]	; 0x44
 80075d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075d4:	1912      	adds	r2, r2, r4
 80075d6:	eb45 0303 	adc.w	r3, r5, r3
 80075da:	f04f 0000 	mov.w	r0, #0
 80075de:	f04f 0100 	mov.w	r1, #0
 80075e2:	00d9      	lsls	r1, r3, #3
 80075e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075e8:	00d0      	lsls	r0, r2, #3
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	1911      	adds	r1, r2, r4
 80075f0:	6639      	str	r1, [r7, #96]	; 0x60
 80075f2:	416b      	adcs	r3, r5
 80075f4:	667b      	str	r3, [r7, #100]	; 0x64
 80075f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	1891      	adds	r1, r2, r2
 8007602:	63b9      	str	r1, [r7, #56]	; 0x38
 8007604:	415b      	adcs	r3, r3
 8007606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007608:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800760c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007610:	f7f8 fe46 	bl	80002a0 <__aeabi_uldivmod>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4ba5      	ldr	r3, [pc, #660]	; (80078b0 <UART_SetConfig+0x38c>)
 800761a:	fba3 2302 	umull	r2, r3, r3, r2
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	011e      	lsls	r6, r3, #4
 8007622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007624:	461c      	mov	r4, r3
 8007626:	f04f 0500 	mov.w	r5, #0
 800762a:	4622      	mov	r2, r4
 800762c:	462b      	mov	r3, r5
 800762e:	1891      	adds	r1, r2, r2
 8007630:	6339      	str	r1, [r7, #48]	; 0x30
 8007632:	415b      	adcs	r3, r3
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
 8007636:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800763a:	1912      	adds	r2, r2, r4
 800763c:	eb45 0303 	adc.w	r3, r5, r3
 8007640:	f04f 0000 	mov.w	r0, #0
 8007644:	f04f 0100 	mov.w	r1, #0
 8007648:	00d9      	lsls	r1, r3, #3
 800764a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800764e:	00d0      	lsls	r0, r2, #3
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	1911      	adds	r1, r2, r4
 8007656:	65b9      	str	r1, [r7, #88]	; 0x58
 8007658:	416b      	adcs	r3, r5
 800765a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800765c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	461a      	mov	r2, r3
 8007662:	f04f 0300 	mov.w	r3, #0
 8007666:	1891      	adds	r1, r2, r2
 8007668:	62b9      	str	r1, [r7, #40]	; 0x28
 800766a:	415b      	adcs	r3, r3
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800766e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007672:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007676:	f7f8 fe13 	bl	80002a0 <__aeabi_uldivmod>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4b8c      	ldr	r3, [pc, #560]	; (80078b0 <UART_SetConfig+0x38c>)
 8007680:	fba3 1302 	umull	r1, r3, r3, r2
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	2164      	movs	r1, #100	; 0x64
 8007688:	fb01 f303 	mul.w	r3, r1, r3
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	3332      	adds	r3, #50	; 0x32
 8007692:	4a87      	ldr	r2, [pc, #540]	; (80078b0 <UART_SetConfig+0x38c>)
 8007694:	fba2 2303 	umull	r2, r3, r2, r3
 8007698:	095b      	lsrs	r3, r3, #5
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076a0:	441e      	add	r6, r3
 80076a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a4:	4618      	mov	r0, r3
 80076a6:	f04f 0100 	mov.w	r1, #0
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	1894      	adds	r4, r2, r2
 80076b0:	623c      	str	r4, [r7, #32]
 80076b2:	415b      	adcs	r3, r3
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
 80076b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076ba:	1812      	adds	r2, r2, r0
 80076bc:	eb41 0303 	adc.w	r3, r1, r3
 80076c0:	f04f 0400 	mov.w	r4, #0
 80076c4:	f04f 0500 	mov.w	r5, #0
 80076c8:	00dd      	lsls	r5, r3, #3
 80076ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076ce:	00d4      	lsls	r4, r2, #3
 80076d0:	4622      	mov	r2, r4
 80076d2:	462b      	mov	r3, r5
 80076d4:	1814      	adds	r4, r2, r0
 80076d6:	653c      	str	r4, [r7, #80]	; 0x50
 80076d8:	414b      	adcs	r3, r1
 80076da:	657b      	str	r3, [r7, #84]	; 0x54
 80076dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	461a      	mov	r2, r3
 80076e2:	f04f 0300 	mov.w	r3, #0
 80076e6:	1891      	adds	r1, r2, r2
 80076e8:	61b9      	str	r1, [r7, #24]
 80076ea:	415b      	adcs	r3, r3
 80076ec:	61fb      	str	r3, [r7, #28]
 80076ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80076f6:	f7f8 fdd3 	bl	80002a0 <__aeabi_uldivmod>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4b6c      	ldr	r3, [pc, #432]	; (80078b0 <UART_SetConfig+0x38c>)
 8007700:	fba3 1302 	umull	r1, r3, r3, r2
 8007704:	095b      	lsrs	r3, r3, #5
 8007706:	2164      	movs	r1, #100	; 0x64
 8007708:	fb01 f303 	mul.w	r3, r1, r3
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	3332      	adds	r3, #50	; 0x32
 8007712:	4a67      	ldr	r2, [pc, #412]	; (80078b0 <UART_SetConfig+0x38c>)
 8007714:	fba2 2303 	umull	r2, r3, r2, r3
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	f003 0207 	and.w	r2, r3, #7
 800771e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4432      	add	r2, r6
 8007724:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007726:	e0b9      	b.n	800789c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800772a:	461c      	mov	r4, r3
 800772c:	f04f 0500 	mov.w	r5, #0
 8007730:	4622      	mov	r2, r4
 8007732:	462b      	mov	r3, r5
 8007734:	1891      	adds	r1, r2, r2
 8007736:	6139      	str	r1, [r7, #16]
 8007738:	415b      	adcs	r3, r3
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007740:	1912      	adds	r2, r2, r4
 8007742:	eb45 0303 	adc.w	r3, r5, r3
 8007746:	f04f 0000 	mov.w	r0, #0
 800774a:	f04f 0100 	mov.w	r1, #0
 800774e:	00d9      	lsls	r1, r3, #3
 8007750:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007754:	00d0      	lsls	r0, r2, #3
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	eb12 0804 	adds.w	r8, r2, r4
 800775e:	eb43 0905 	adc.w	r9, r3, r5
 8007762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	4618      	mov	r0, r3
 8007768:	f04f 0100 	mov.w	r1, #0
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	f04f 0300 	mov.w	r3, #0
 8007774:	008b      	lsls	r3, r1, #2
 8007776:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800777a:	0082      	lsls	r2, r0, #2
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f7f8 fd8e 	bl	80002a0 <__aeabi_uldivmod>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4b49      	ldr	r3, [pc, #292]	; (80078b0 <UART_SetConfig+0x38c>)
 800778a:	fba3 2302 	umull	r2, r3, r3, r2
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	011e      	lsls	r6, r3, #4
 8007792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007794:	4618      	mov	r0, r3
 8007796:	f04f 0100 	mov.w	r1, #0
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	1894      	adds	r4, r2, r2
 80077a0:	60bc      	str	r4, [r7, #8]
 80077a2:	415b      	adcs	r3, r3
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077aa:	1812      	adds	r2, r2, r0
 80077ac:	eb41 0303 	adc.w	r3, r1, r3
 80077b0:	f04f 0400 	mov.w	r4, #0
 80077b4:	f04f 0500 	mov.w	r5, #0
 80077b8:	00dd      	lsls	r5, r3, #3
 80077ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80077be:	00d4      	lsls	r4, r2, #3
 80077c0:	4622      	mov	r2, r4
 80077c2:	462b      	mov	r3, r5
 80077c4:	1814      	adds	r4, r2, r0
 80077c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80077c8:	414b      	adcs	r3, r1
 80077ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f04f 0100 	mov.w	r1, #0
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	f04f 0300 	mov.w	r3, #0
 80077de:	008b      	lsls	r3, r1, #2
 80077e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077e4:	0082      	lsls	r2, r0, #2
 80077e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80077ea:	f7f8 fd59 	bl	80002a0 <__aeabi_uldivmod>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4b2f      	ldr	r3, [pc, #188]	; (80078b0 <UART_SetConfig+0x38c>)
 80077f4:	fba3 1302 	umull	r1, r3, r3, r2
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	2164      	movs	r1, #100	; 0x64
 80077fc:	fb01 f303 	mul.w	r3, r1, r3
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	3332      	adds	r3, #50	; 0x32
 8007806:	4a2a      	ldr	r2, [pc, #168]	; (80078b0 <UART_SetConfig+0x38c>)
 8007808:	fba2 2303 	umull	r2, r3, r2, r3
 800780c:	095b      	lsrs	r3, r3, #5
 800780e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007812:	441e      	add	r6, r3
 8007814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007816:	4618      	mov	r0, r3
 8007818:	f04f 0100 	mov.w	r1, #0
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	1894      	adds	r4, r2, r2
 8007822:	603c      	str	r4, [r7, #0]
 8007824:	415b      	adcs	r3, r3
 8007826:	607b      	str	r3, [r7, #4]
 8007828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800782c:	1812      	adds	r2, r2, r0
 800782e:	eb41 0303 	adc.w	r3, r1, r3
 8007832:	f04f 0400 	mov.w	r4, #0
 8007836:	f04f 0500 	mov.w	r5, #0
 800783a:	00dd      	lsls	r5, r3, #3
 800783c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007840:	00d4      	lsls	r4, r2, #3
 8007842:	4622      	mov	r2, r4
 8007844:	462b      	mov	r3, r5
 8007846:	eb12 0a00 	adds.w	sl, r2, r0
 800784a:	eb43 0b01 	adc.w	fp, r3, r1
 800784e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	4618      	mov	r0, r3
 8007854:	f04f 0100 	mov.w	r1, #0
 8007858:	f04f 0200 	mov.w	r2, #0
 800785c:	f04f 0300 	mov.w	r3, #0
 8007860:	008b      	lsls	r3, r1, #2
 8007862:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007866:	0082      	lsls	r2, r0, #2
 8007868:	4650      	mov	r0, sl
 800786a:	4659      	mov	r1, fp
 800786c:	f7f8 fd18 	bl	80002a0 <__aeabi_uldivmod>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4b0e      	ldr	r3, [pc, #56]	; (80078b0 <UART_SetConfig+0x38c>)
 8007876:	fba3 1302 	umull	r1, r3, r3, r2
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	2164      	movs	r1, #100	; 0x64
 800787e:	fb01 f303 	mul.w	r3, r1, r3
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	3332      	adds	r3, #50	; 0x32
 8007888:	4a09      	ldr	r2, [pc, #36]	; (80078b0 <UART_SetConfig+0x38c>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	f003 020f 	and.w	r2, r3, #15
 8007894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4432      	add	r2, r6
 800789a:	609a      	str	r2, [r3, #8]
}
 800789c:	bf00      	nop
 800789e:	377c      	adds	r7, #124	; 0x7c
 80078a0:	46bd      	mov	sp, r7
 80078a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a6:	bf00      	nop
 80078a8:	40011000 	.word	0x40011000
 80078ac:	40011400 	.word	0x40011400
 80078b0:	51eb851f 	.word	0x51eb851f

080078b4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078cc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4b20      	ldr	r3, [pc, #128]	; (8007954 <FSMC_NORSRAM_Init+0xa0>)
 80078d2:	4013      	ands	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80078de:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80078e4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80078ea:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80078f0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80078f6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80078fc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007902:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007908:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800790e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007914:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800791a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007920:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	2b08      	cmp	r3, #8
 800792e:	d103      	bne.n	8007938 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007936:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68f9      	ldr	r1, [r7, #12]
 8007940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	fff00080 	.word	0xfff00080

08007958 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007972:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800797a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007986:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800798e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007996:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	3b01      	subs	r3, #1
 800799e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80079a0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	3b02      	subs	r3, #2
 80079a8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80079aa:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079b0:	4313      	orrs	r3, r2
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6979      	ldr	r1, [r7, #20]
 80079c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079ec:	d122      	bne.n	8007a34 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a0a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a12:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a1a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a20:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6979      	ldr	r1, [r7, #20]
 8007a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007a32:	e005      	b.n	8007a40 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	371c      	adds	r7, #28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	cff00000 	.word	0xcff00000

08007a54 <__errno>:
 8007a54:	4b01      	ldr	r3, [pc, #4]	; (8007a5c <__errno+0x8>)
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20000018 	.word	0x20000018

08007a60 <__libc_init_array>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	4d0d      	ldr	r5, [pc, #52]	; (8007a98 <__libc_init_array+0x38>)
 8007a64:	4c0d      	ldr	r4, [pc, #52]	; (8007a9c <__libc_init_array+0x3c>)
 8007a66:	1b64      	subs	r4, r4, r5
 8007a68:	10a4      	asrs	r4, r4, #2
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	42a6      	cmp	r6, r4
 8007a6e:	d109      	bne.n	8007a84 <__libc_init_array+0x24>
 8007a70:	4d0b      	ldr	r5, [pc, #44]	; (8007aa0 <__libc_init_array+0x40>)
 8007a72:	4c0c      	ldr	r4, [pc, #48]	; (8007aa4 <__libc_init_array+0x44>)
 8007a74:	f000 fc4e 	bl	8008314 <_init>
 8007a78:	1b64      	subs	r4, r4, r5
 8007a7a:	10a4      	asrs	r4, r4, #2
 8007a7c:	2600      	movs	r6, #0
 8007a7e:	42a6      	cmp	r6, r4
 8007a80:	d105      	bne.n	8007a8e <__libc_init_array+0x2e>
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a88:	4798      	blx	r3
 8007a8a:	3601      	adds	r6, #1
 8007a8c:	e7ee      	b.n	8007a6c <__libc_init_array+0xc>
 8007a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a92:	4798      	blx	r3
 8007a94:	3601      	adds	r6, #1
 8007a96:	e7f2      	b.n	8007a7e <__libc_init_array+0x1e>
 8007a98:	0800b45c 	.word	0x0800b45c
 8007a9c:	0800b45c 	.word	0x0800b45c
 8007aa0:	0800b45c 	.word	0x0800b45c
 8007aa4:	0800b460 	.word	0x0800b460

08007aa8 <memcpy>:
 8007aa8:	440a      	add	r2, r1
 8007aaa:	4291      	cmp	r1, r2
 8007aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab0:	d100      	bne.n	8007ab4 <memcpy+0xc>
 8007ab2:	4770      	bx	lr
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007abe:	4291      	cmp	r1, r2
 8007ac0:	d1f9      	bne.n	8007ab6 <memcpy+0xe>
 8007ac2:	bd10      	pop	{r4, pc}

08007ac4 <memset>:
 8007ac4:	4402      	add	r2, r0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d100      	bne.n	8007ace <memset+0xa>
 8007acc:	4770      	bx	lr
 8007ace:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad2:	e7f9      	b.n	8007ac8 <memset+0x4>

08007ad4 <siprintf>:
 8007ad4:	b40e      	push	{r1, r2, r3}
 8007ad6:	b500      	push	{lr}
 8007ad8:	b09c      	sub	sp, #112	; 0x70
 8007ada:	ab1d      	add	r3, sp, #116	; 0x74
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	9006      	str	r0, [sp, #24]
 8007ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ae4:	4809      	ldr	r0, [pc, #36]	; (8007b0c <siprintf+0x38>)
 8007ae6:	9107      	str	r1, [sp, #28]
 8007ae8:	9104      	str	r1, [sp, #16]
 8007aea:	4909      	ldr	r1, [pc, #36]	; (8007b10 <siprintf+0x3c>)
 8007aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	a902      	add	r1, sp, #8
 8007af8:	f000 f868 	bl	8007bcc <_svfiprintf_r>
 8007afc:	9b02      	ldr	r3, [sp, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	b01c      	add	sp, #112	; 0x70
 8007b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b08:	b003      	add	sp, #12
 8007b0a:	4770      	bx	lr
 8007b0c:	20000018 	.word	0x20000018
 8007b10:	ffff0208 	.word	0xffff0208

08007b14 <__ssputs_r>:
 8007b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	688e      	ldr	r6, [r1, #8]
 8007b1a:	429e      	cmp	r6, r3
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	460c      	mov	r4, r1
 8007b20:	4690      	mov	r8, r2
 8007b22:	461f      	mov	r7, r3
 8007b24:	d838      	bhi.n	8007b98 <__ssputs_r+0x84>
 8007b26:	898a      	ldrh	r2, [r1, #12]
 8007b28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b2c:	d032      	beq.n	8007b94 <__ssputs_r+0x80>
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	6909      	ldr	r1, [r1, #16]
 8007b32:	eba5 0901 	sub.w	r9, r5, r1
 8007b36:	6965      	ldr	r5, [r4, #20]
 8007b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b40:	3301      	adds	r3, #1
 8007b42:	444b      	add	r3, r9
 8007b44:	106d      	asrs	r5, r5, #1
 8007b46:	429d      	cmp	r5, r3
 8007b48:	bf38      	it	cc
 8007b4a:	461d      	movcc	r5, r3
 8007b4c:	0553      	lsls	r3, r2, #21
 8007b4e:	d531      	bpl.n	8007bb4 <__ssputs_r+0xa0>
 8007b50:	4629      	mov	r1, r5
 8007b52:	f000 fb39 	bl	80081c8 <_malloc_r>
 8007b56:	4606      	mov	r6, r0
 8007b58:	b950      	cbnz	r0, 8007b70 <__ssputs_r+0x5c>
 8007b5a:	230c      	movs	r3, #12
 8007b5c:	f8ca 3000 	str.w	r3, [sl]
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b66:	81a3      	strh	r3, [r4, #12]
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	6921      	ldr	r1, [r4, #16]
 8007b72:	464a      	mov	r2, r9
 8007b74:	f7ff ff98 	bl	8007aa8 <memcpy>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	6126      	str	r6, [r4, #16]
 8007b86:	6165      	str	r5, [r4, #20]
 8007b88:	444e      	add	r6, r9
 8007b8a:	eba5 0509 	sub.w	r5, r5, r9
 8007b8e:	6026      	str	r6, [r4, #0]
 8007b90:	60a5      	str	r5, [r4, #8]
 8007b92:	463e      	mov	r6, r7
 8007b94:	42be      	cmp	r6, r7
 8007b96:	d900      	bls.n	8007b9a <__ssputs_r+0x86>
 8007b98:	463e      	mov	r6, r7
 8007b9a:	4632      	mov	r2, r6
 8007b9c:	6820      	ldr	r0, [r4, #0]
 8007b9e:	4641      	mov	r1, r8
 8007ba0:	f000 faa8 	bl	80080f4 <memmove>
 8007ba4:	68a3      	ldr	r3, [r4, #8]
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	1b9b      	subs	r3, r3, r6
 8007baa:	4432      	add	r2, r6
 8007bac:	60a3      	str	r3, [r4, #8]
 8007bae:	6022      	str	r2, [r4, #0]
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e7db      	b.n	8007b6c <__ssputs_r+0x58>
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	f000 fb61 	bl	800827c <_realloc_r>
 8007bba:	4606      	mov	r6, r0
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d1e1      	bne.n	8007b84 <__ssputs_r+0x70>
 8007bc0:	6921      	ldr	r1, [r4, #16]
 8007bc2:	4650      	mov	r0, sl
 8007bc4:	f000 fab0 	bl	8008128 <_free_r>
 8007bc8:	e7c7      	b.n	8007b5a <__ssputs_r+0x46>
	...

08007bcc <_svfiprintf_r>:
 8007bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	4698      	mov	r8, r3
 8007bd2:	898b      	ldrh	r3, [r1, #12]
 8007bd4:	061b      	lsls	r3, r3, #24
 8007bd6:	b09d      	sub	sp, #116	; 0x74
 8007bd8:	4607      	mov	r7, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	4614      	mov	r4, r2
 8007bde:	d50e      	bpl.n	8007bfe <_svfiprintf_r+0x32>
 8007be0:	690b      	ldr	r3, [r1, #16]
 8007be2:	b963      	cbnz	r3, 8007bfe <_svfiprintf_r+0x32>
 8007be4:	2140      	movs	r1, #64	; 0x40
 8007be6:	f000 faef 	bl	80081c8 <_malloc_r>
 8007bea:	6028      	str	r0, [r5, #0]
 8007bec:	6128      	str	r0, [r5, #16]
 8007bee:	b920      	cbnz	r0, 8007bfa <_svfiprintf_r+0x2e>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	e0d1      	b.n	8007d9e <_svfiprintf_r+0x1d2>
 8007bfa:	2340      	movs	r3, #64	; 0x40
 8007bfc:	616b      	str	r3, [r5, #20]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9309      	str	r3, [sp, #36]	; 0x24
 8007c02:	2320      	movs	r3, #32
 8007c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c0c:	2330      	movs	r3, #48	; 0x30
 8007c0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007db8 <_svfiprintf_r+0x1ec>
 8007c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c16:	f04f 0901 	mov.w	r9, #1
 8007c1a:	4623      	mov	r3, r4
 8007c1c:	469a      	mov	sl, r3
 8007c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c22:	b10a      	cbz	r2, 8007c28 <_svfiprintf_r+0x5c>
 8007c24:	2a25      	cmp	r2, #37	; 0x25
 8007c26:	d1f9      	bne.n	8007c1c <_svfiprintf_r+0x50>
 8007c28:	ebba 0b04 	subs.w	fp, sl, r4
 8007c2c:	d00b      	beq.n	8007c46 <_svfiprintf_r+0x7a>
 8007c2e:	465b      	mov	r3, fp
 8007c30:	4622      	mov	r2, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	4638      	mov	r0, r7
 8007c36:	f7ff ff6d 	bl	8007b14 <__ssputs_r>
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f000 80aa 	beq.w	8007d94 <_svfiprintf_r+0x1c8>
 8007c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c42:	445a      	add	r2, fp
 8007c44:	9209      	str	r2, [sp, #36]	; 0x24
 8007c46:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 80a2 	beq.w	8007d94 <_svfiprintf_r+0x1c8>
 8007c50:	2300      	movs	r3, #0
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c5a:	f10a 0a01 	add.w	sl, sl, #1
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c66:	931a      	str	r3, [sp, #104]	; 0x68
 8007c68:	4654      	mov	r4, sl
 8007c6a:	2205      	movs	r2, #5
 8007c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c70:	4851      	ldr	r0, [pc, #324]	; (8007db8 <_svfiprintf_r+0x1ec>)
 8007c72:	f7f8 fac5 	bl	8000200 <memchr>
 8007c76:	9a04      	ldr	r2, [sp, #16]
 8007c78:	b9d8      	cbnz	r0, 8007cb2 <_svfiprintf_r+0xe6>
 8007c7a:	06d0      	lsls	r0, r2, #27
 8007c7c:	bf44      	itt	mi
 8007c7e:	2320      	movmi	r3, #32
 8007c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c84:	0711      	lsls	r1, r2, #28
 8007c86:	bf44      	itt	mi
 8007c88:	232b      	movmi	r3, #43	; 0x2b
 8007c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c92:	2b2a      	cmp	r3, #42	; 0x2a
 8007c94:	d015      	beq.n	8007cc2 <_svfiprintf_r+0xf6>
 8007c96:	9a07      	ldr	r2, [sp, #28]
 8007c98:	4654      	mov	r4, sl
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f04f 0c0a 	mov.w	ip, #10
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ca6:	3b30      	subs	r3, #48	; 0x30
 8007ca8:	2b09      	cmp	r3, #9
 8007caa:	d94e      	bls.n	8007d4a <_svfiprintf_r+0x17e>
 8007cac:	b1b0      	cbz	r0, 8007cdc <_svfiprintf_r+0x110>
 8007cae:	9207      	str	r2, [sp, #28]
 8007cb0:	e014      	b.n	8007cdc <_svfiprintf_r+0x110>
 8007cb2:	eba0 0308 	sub.w	r3, r0, r8
 8007cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	46a2      	mov	sl, r4
 8007cc0:	e7d2      	b.n	8007c68 <_svfiprintf_r+0x9c>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	1d19      	adds	r1, r3, #4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	9103      	str	r1, [sp, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bfbb      	ittet	lt
 8007cce:	425b      	neglt	r3, r3
 8007cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd4:	9307      	strge	r3, [sp, #28]
 8007cd6:	9307      	strlt	r3, [sp, #28]
 8007cd8:	bfb8      	it	lt
 8007cda:	9204      	strlt	r2, [sp, #16]
 8007cdc:	7823      	ldrb	r3, [r4, #0]
 8007cde:	2b2e      	cmp	r3, #46	; 0x2e
 8007ce0:	d10c      	bne.n	8007cfc <_svfiprintf_r+0x130>
 8007ce2:	7863      	ldrb	r3, [r4, #1]
 8007ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce6:	d135      	bne.n	8007d54 <_svfiprintf_r+0x188>
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	1d1a      	adds	r2, r3, #4
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	9203      	str	r2, [sp, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	bfb8      	it	lt
 8007cf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cf8:	3402      	adds	r4, #2
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007dc8 <_svfiprintf_r+0x1fc>
 8007d00:	7821      	ldrb	r1, [r4, #0]
 8007d02:	2203      	movs	r2, #3
 8007d04:	4650      	mov	r0, sl
 8007d06:	f7f8 fa7b 	bl	8000200 <memchr>
 8007d0a:	b140      	cbz	r0, 8007d1e <_svfiprintf_r+0x152>
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	eba0 000a 	sub.w	r0, r0, sl
 8007d12:	fa03 f000 	lsl.w	r0, r3, r0
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	4303      	orrs	r3, r0
 8007d1a:	3401      	adds	r4, #1
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d22:	4826      	ldr	r0, [pc, #152]	; (8007dbc <_svfiprintf_r+0x1f0>)
 8007d24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d28:	2206      	movs	r2, #6
 8007d2a:	f7f8 fa69 	bl	8000200 <memchr>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d038      	beq.n	8007da4 <_svfiprintf_r+0x1d8>
 8007d32:	4b23      	ldr	r3, [pc, #140]	; (8007dc0 <_svfiprintf_r+0x1f4>)
 8007d34:	bb1b      	cbnz	r3, 8007d7e <_svfiprintf_r+0x1b2>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	3307      	adds	r3, #7
 8007d3a:	f023 0307 	bic.w	r3, r3, #7
 8007d3e:	3308      	adds	r3, #8
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	4433      	add	r3, r6
 8007d46:	9309      	str	r3, [sp, #36]	; 0x24
 8007d48:	e767      	b.n	8007c1a <_svfiprintf_r+0x4e>
 8007d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d4e:	460c      	mov	r4, r1
 8007d50:	2001      	movs	r0, #1
 8007d52:	e7a5      	b.n	8007ca0 <_svfiprintf_r+0xd4>
 8007d54:	2300      	movs	r3, #0
 8007d56:	3401      	adds	r4, #1
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	f04f 0c0a 	mov.w	ip, #10
 8007d60:	4620      	mov	r0, r4
 8007d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d66:	3a30      	subs	r2, #48	; 0x30
 8007d68:	2a09      	cmp	r2, #9
 8007d6a:	d903      	bls.n	8007d74 <_svfiprintf_r+0x1a8>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0c5      	beq.n	8007cfc <_svfiprintf_r+0x130>
 8007d70:	9105      	str	r1, [sp, #20]
 8007d72:	e7c3      	b.n	8007cfc <_svfiprintf_r+0x130>
 8007d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d78:	4604      	mov	r4, r0
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e7f0      	b.n	8007d60 <_svfiprintf_r+0x194>
 8007d7e:	ab03      	add	r3, sp, #12
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	462a      	mov	r2, r5
 8007d84:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <_svfiprintf_r+0x1f8>)
 8007d86:	a904      	add	r1, sp, #16
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f3af 8000 	nop.w
 8007d8e:	1c42      	adds	r2, r0, #1
 8007d90:	4606      	mov	r6, r0
 8007d92:	d1d6      	bne.n	8007d42 <_svfiprintf_r+0x176>
 8007d94:	89ab      	ldrh	r3, [r5, #12]
 8007d96:	065b      	lsls	r3, r3, #25
 8007d98:	f53f af2c 	bmi.w	8007bf4 <_svfiprintf_r+0x28>
 8007d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d9e:	b01d      	add	sp, #116	; 0x74
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	ab03      	add	r3, sp, #12
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	462a      	mov	r2, r5
 8007daa:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <_svfiprintf_r+0x1f8>)
 8007dac:	a904      	add	r1, sp, #16
 8007dae:	4638      	mov	r0, r7
 8007db0:	f000 f87a 	bl	8007ea8 <_printf_i>
 8007db4:	e7eb      	b.n	8007d8e <_svfiprintf_r+0x1c2>
 8007db6:	bf00      	nop
 8007db8:	0800b420 	.word	0x0800b420
 8007dbc:	0800b42a 	.word	0x0800b42a
 8007dc0:	00000000 	.word	0x00000000
 8007dc4:	08007b15 	.word	0x08007b15
 8007dc8:	0800b426 	.word	0x0800b426

08007dcc <_printf_common>:
 8007dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	4616      	mov	r6, r2
 8007dd2:	4699      	mov	r9, r3
 8007dd4:	688a      	ldr	r2, [r1, #8]
 8007dd6:	690b      	ldr	r3, [r1, #16]
 8007dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	bfb8      	it	lt
 8007de0:	4613      	movlt	r3, r2
 8007de2:	6033      	str	r3, [r6, #0]
 8007de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007de8:	4607      	mov	r7, r0
 8007dea:	460c      	mov	r4, r1
 8007dec:	b10a      	cbz	r2, 8007df2 <_printf_common+0x26>
 8007dee:	3301      	adds	r3, #1
 8007df0:	6033      	str	r3, [r6, #0]
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	0699      	lsls	r1, r3, #26
 8007df6:	bf42      	ittt	mi
 8007df8:	6833      	ldrmi	r3, [r6, #0]
 8007dfa:	3302      	addmi	r3, #2
 8007dfc:	6033      	strmi	r3, [r6, #0]
 8007dfe:	6825      	ldr	r5, [r4, #0]
 8007e00:	f015 0506 	ands.w	r5, r5, #6
 8007e04:	d106      	bne.n	8007e14 <_printf_common+0x48>
 8007e06:	f104 0a19 	add.w	sl, r4, #25
 8007e0a:	68e3      	ldr	r3, [r4, #12]
 8007e0c:	6832      	ldr	r2, [r6, #0]
 8007e0e:	1a9b      	subs	r3, r3, r2
 8007e10:	42ab      	cmp	r3, r5
 8007e12:	dc26      	bgt.n	8007e62 <_printf_common+0x96>
 8007e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e18:	1e13      	subs	r3, r2, #0
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	bf18      	it	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	0692      	lsls	r2, r2, #26
 8007e22:	d42b      	bmi.n	8007e7c <_printf_common+0xb0>
 8007e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e28:	4649      	mov	r1, r9
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	47c0      	blx	r8
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d01e      	beq.n	8007e70 <_printf_common+0xa4>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	68e5      	ldr	r5, [r4, #12]
 8007e36:	6832      	ldr	r2, [r6, #0]
 8007e38:	f003 0306 	and.w	r3, r3, #6
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	bf08      	it	eq
 8007e40:	1aad      	subeq	r5, r5, r2
 8007e42:	68a3      	ldr	r3, [r4, #8]
 8007e44:	6922      	ldr	r2, [r4, #16]
 8007e46:	bf0c      	ite	eq
 8007e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e4c:	2500      	movne	r5, #0
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	bfc4      	itt	gt
 8007e52:	1a9b      	subgt	r3, r3, r2
 8007e54:	18ed      	addgt	r5, r5, r3
 8007e56:	2600      	movs	r6, #0
 8007e58:	341a      	adds	r4, #26
 8007e5a:	42b5      	cmp	r5, r6
 8007e5c:	d11a      	bne.n	8007e94 <_printf_common+0xc8>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	e008      	b.n	8007e74 <_printf_common+0xa8>
 8007e62:	2301      	movs	r3, #1
 8007e64:	4652      	mov	r2, sl
 8007e66:	4649      	mov	r1, r9
 8007e68:	4638      	mov	r0, r7
 8007e6a:	47c0      	blx	r8
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d103      	bne.n	8007e78 <_printf_common+0xac>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295
 8007e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e78:	3501      	adds	r5, #1
 8007e7a:	e7c6      	b.n	8007e0a <_printf_common+0x3e>
 8007e7c:	18e1      	adds	r1, r4, r3
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	2030      	movs	r0, #48	; 0x30
 8007e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e86:	4422      	add	r2, r4
 8007e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e90:	3302      	adds	r3, #2
 8007e92:	e7c7      	b.n	8007e24 <_printf_common+0x58>
 8007e94:	2301      	movs	r3, #1
 8007e96:	4622      	mov	r2, r4
 8007e98:	4649      	mov	r1, r9
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	47c0      	blx	r8
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d0e6      	beq.n	8007e70 <_printf_common+0xa4>
 8007ea2:	3601      	adds	r6, #1
 8007ea4:	e7d9      	b.n	8007e5a <_printf_common+0x8e>
	...

08007ea8 <_printf_i>:
 8007ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	460c      	mov	r4, r1
 8007eae:	4691      	mov	r9, r2
 8007eb0:	7e27      	ldrb	r7, [r4, #24]
 8007eb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007eb4:	2f78      	cmp	r7, #120	; 0x78
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	469a      	mov	sl, r3
 8007eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ebe:	d807      	bhi.n	8007ed0 <_printf_i+0x28>
 8007ec0:	2f62      	cmp	r7, #98	; 0x62
 8007ec2:	d80a      	bhi.n	8007eda <_printf_i+0x32>
 8007ec4:	2f00      	cmp	r7, #0
 8007ec6:	f000 80d8 	beq.w	800807a <_printf_i+0x1d2>
 8007eca:	2f58      	cmp	r7, #88	; 0x58
 8007ecc:	f000 80a3 	beq.w	8008016 <_printf_i+0x16e>
 8007ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ed8:	e03a      	b.n	8007f50 <_printf_i+0xa8>
 8007eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ede:	2b15      	cmp	r3, #21
 8007ee0:	d8f6      	bhi.n	8007ed0 <_printf_i+0x28>
 8007ee2:	a001      	add	r0, pc, #4	; (adr r0, 8007ee8 <_printf_i+0x40>)
 8007ee4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f55 	.word	0x08007f55
 8007ef0:	08007ed1 	.word	0x08007ed1
 8007ef4:	08007ed1 	.word	0x08007ed1
 8007ef8:	08007ed1 	.word	0x08007ed1
 8007efc:	08007ed1 	.word	0x08007ed1
 8007f00:	08007f55 	.word	0x08007f55
 8007f04:	08007ed1 	.word	0x08007ed1
 8007f08:	08007ed1 	.word	0x08007ed1
 8007f0c:	08007ed1 	.word	0x08007ed1
 8007f10:	08007ed1 	.word	0x08007ed1
 8007f14:	08008061 	.word	0x08008061
 8007f18:	08007f85 	.word	0x08007f85
 8007f1c:	08008043 	.word	0x08008043
 8007f20:	08007ed1 	.word	0x08007ed1
 8007f24:	08007ed1 	.word	0x08007ed1
 8007f28:	08008083 	.word	0x08008083
 8007f2c:	08007ed1 	.word	0x08007ed1
 8007f30:	08007f85 	.word	0x08007f85
 8007f34:	08007ed1 	.word	0x08007ed1
 8007f38:	08007ed1 	.word	0x08007ed1
 8007f3c:	0800804b 	.word	0x0800804b
 8007f40:	680b      	ldr	r3, [r1, #0]
 8007f42:	1d1a      	adds	r2, r3, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	600a      	str	r2, [r1, #0]
 8007f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f50:	2301      	movs	r3, #1
 8007f52:	e0a3      	b.n	800809c <_printf_i+0x1f4>
 8007f54:	6825      	ldr	r5, [r4, #0]
 8007f56:	6808      	ldr	r0, [r1, #0]
 8007f58:	062e      	lsls	r6, r5, #24
 8007f5a:	f100 0304 	add.w	r3, r0, #4
 8007f5e:	d50a      	bpl.n	8007f76 <_printf_i+0xce>
 8007f60:	6805      	ldr	r5, [r0, #0]
 8007f62:	600b      	str	r3, [r1, #0]
 8007f64:	2d00      	cmp	r5, #0
 8007f66:	da03      	bge.n	8007f70 <_printf_i+0xc8>
 8007f68:	232d      	movs	r3, #45	; 0x2d
 8007f6a:	426d      	negs	r5, r5
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f70:	485e      	ldr	r0, [pc, #376]	; (80080ec <_printf_i+0x244>)
 8007f72:	230a      	movs	r3, #10
 8007f74:	e019      	b.n	8007faa <_printf_i+0x102>
 8007f76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f7a:	6805      	ldr	r5, [r0, #0]
 8007f7c:	600b      	str	r3, [r1, #0]
 8007f7e:	bf18      	it	ne
 8007f80:	b22d      	sxthne	r5, r5
 8007f82:	e7ef      	b.n	8007f64 <_printf_i+0xbc>
 8007f84:	680b      	ldr	r3, [r1, #0]
 8007f86:	6825      	ldr	r5, [r4, #0]
 8007f88:	1d18      	adds	r0, r3, #4
 8007f8a:	6008      	str	r0, [r1, #0]
 8007f8c:	0628      	lsls	r0, r5, #24
 8007f8e:	d501      	bpl.n	8007f94 <_printf_i+0xec>
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	e002      	b.n	8007f9a <_printf_i+0xf2>
 8007f94:	0669      	lsls	r1, r5, #25
 8007f96:	d5fb      	bpl.n	8007f90 <_printf_i+0xe8>
 8007f98:	881d      	ldrh	r5, [r3, #0]
 8007f9a:	4854      	ldr	r0, [pc, #336]	; (80080ec <_printf_i+0x244>)
 8007f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2308      	moveq	r3, #8
 8007fa2:	230a      	movne	r3, #10
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007faa:	6866      	ldr	r6, [r4, #4]
 8007fac:	60a6      	str	r6, [r4, #8]
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	bfa2      	ittt	ge
 8007fb2:	6821      	ldrge	r1, [r4, #0]
 8007fb4:	f021 0104 	bicge.w	r1, r1, #4
 8007fb8:	6021      	strge	r1, [r4, #0]
 8007fba:	b90d      	cbnz	r5, 8007fc0 <_printf_i+0x118>
 8007fbc:	2e00      	cmp	r6, #0
 8007fbe:	d04d      	beq.n	800805c <_printf_i+0x1b4>
 8007fc0:	4616      	mov	r6, r2
 8007fc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fc6:	fb03 5711 	mls	r7, r3, r1, r5
 8007fca:	5dc7      	ldrb	r7, [r0, r7]
 8007fcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fd0:	462f      	mov	r7, r5
 8007fd2:	42bb      	cmp	r3, r7
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	d9f4      	bls.n	8007fc2 <_printf_i+0x11a>
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d10b      	bne.n	8007ff4 <_printf_i+0x14c>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	07df      	lsls	r7, r3, #31
 8007fe0:	d508      	bpl.n	8007ff4 <_printf_i+0x14c>
 8007fe2:	6923      	ldr	r3, [r4, #16]
 8007fe4:	6861      	ldr	r1, [r4, #4]
 8007fe6:	4299      	cmp	r1, r3
 8007fe8:	bfde      	ittt	le
 8007fea:	2330      	movle	r3, #48	; 0x30
 8007fec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ff0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ff4:	1b92      	subs	r2, r2, r6
 8007ff6:	6122      	str	r2, [r4, #16]
 8007ff8:	f8cd a000 	str.w	sl, [sp]
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	aa03      	add	r2, sp, #12
 8008000:	4621      	mov	r1, r4
 8008002:	4640      	mov	r0, r8
 8008004:	f7ff fee2 	bl	8007dcc <_printf_common>
 8008008:	3001      	adds	r0, #1
 800800a:	d14c      	bne.n	80080a6 <_printf_i+0x1fe>
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	b004      	add	sp, #16
 8008012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008016:	4835      	ldr	r0, [pc, #212]	; (80080ec <_printf_i+0x244>)
 8008018:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	680e      	ldr	r6, [r1, #0]
 8008020:	061f      	lsls	r7, r3, #24
 8008022:	f856 5b04 	ldr.w	r5, [r6], #4
 8008026:	600e      	str	r6, [r1, #0]
 8008028:	d514      	bpl.n	8008054 <_printf_i+0x1ac>
 800802a:	07d9      	lsls	r1, r3, #31
 800802c:	bf44      	itt	mi
 800802e:	f043 0320 	orrmi.w	r3, r3, #32
 8008032:	6023      	strmi	r3, [r4, #0]
 8008034:	b91d      	cbnz	r5, 800803e <_printf_i+0x196>
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	f023 0320 	bic.w	r3, r3, #32
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	2310      	movs	r3, #16
 8008040:	e7b0      	b.n	8007fa4 <_printf_i+0xfc>
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	f043 0320 	orr.w	r3, r3, #32
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	2378      	movs	r3, #120	; 0x78
 800804c:	4828      	ldr	r0, [pc, #160]	; (80080f0 <_printf_i+0x248>)
 800804e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008052:	e7e3      	b.n	800801c <_printf_i+0x174>
 8008054:	065e      	lsls	r6, r3, #25
 8008056:	bf48      	it	mi
 8008058:	b2ad      	uxthmi	r5, r5
 800805a:	e7e6      	b.n	800802a <_printf_i+0x182>
 800805c:	4616      	mov	r6, r2
 800805e:	e7bb      	b.n	8007fd8 <_printf_i+0x130>
 8008060:	680b      	ldr	r3, [r1, #0]
 8008062:	6826      	ldr	r6, [r4, #0]
 8008064:	6960      	ldr	r0, [r4, #20]
 8008066:	1d1d      	adds	r5, r3, #4
 8008068:	600d      	str	r5, [r1, #0]
 800806a:	0635      	lsls	r5, r6, #24
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	d501      	bpl.n	8008074 <_printf_i+0x1cc>
 8008070:	6018      	str	r0, [r3, #0]
 8008072:	e002      	b.n	800807a <_printf_i+0x1d2>
 8008074:	0671      	lsls	r1, r6, #25
 8008076:	d5fb      	bpl.n	8008070 <_printf_i+0x1c8>
 8008078:	8018      	strh	r0, [r3, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	4616      	mov	r6, r2
 8008080:	e7ba      	b.n	8007ff8 <_printf_i+0x150>
 8008082:	680b      	ldr	r3, [r1, #0]
 8008084:	1d1a      	adds	r2, r3, #4
 8008086:	600a      	str	r2, [r1, #0]
 8008088:	681e      	ldr	r6, [r3, #0]
 800808a:	6862      	ldr	r2, [r4, #4]
 800808c:	2100      	movs	r1, #0
 800808e:	4630      	mov	r0, r6
 8008090:	f7f8 f8b6 	bl	8000200 <memchr>
 8008094:	b108      	cbz	r0, 800809a <_printf_i+0x1f2>
 8008096:	1b80      	subs	r0, r0, r6
 8008098:	6060      	str	r0, [r4, #4]
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	2300      	movs	r3, #0
 80080a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a4:	e7a8      	b.n	8007ff8 <_printf_i+0x150>
 80080a6:	6923      	ldr	r3, [r4, #16]
 80080a8:	4632      	mov	r2, r6
 80080aa:	4649      	mov	r1, r9
 80080ac:	4640      	mov	r0, r8
 80080ae:	47d0      	blx	sl
 80080b0:	3001      	adds	r0, #1
 80080b2:	d0ab      	beq.n	800800c <_printf_i+0x164>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	079b      	lsls	r3, r3, #30
 80080b8:	d413      	bmi.n	80080e2 <_printf_i+0x23a>
 80080ba:	68e0      	ldr	r0, [r4, #12]
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	4298      	cmp	r0, r3
 80080c0:	bfb8      	it	lt
 80080c2:	4618      	movlt	r0, r3
 80080c4:	e7a4      	b.n	8008010 <_printf_i+0x168>
 80080c6:	2301      	movs	r3, #1
 80080c8:	4632      	mov	r2, r6
 80080ca:	4649      	mov	r1, r9
 80080cc:	4640      	mov	r0, r8
 80080ce:	47d0      	blx	sl
 80080d0:	3001      	adds	r0, #1
 80080d2:	d09b      	beq.n	800800c <_printf_i+0x164>
 80080d4:	3501      	adds	r5, #1
 80080d6:	68e3      	ldr	r3, [r4, #12]
 80080d8:	9903      	ldr	r1, [sp, #12]
 80080da:	1a5b      	subs	r3, r3, r1
 80080dc:	42ab      	cmp	r3, r5
 80080de:	dcf2      	bgt.n	80080c6 <_printf_i+0x21e>
 80080e0:	e7eb      	b.n	80080ba <_printf_i+0x212>
 80080e2:	2500      	movs	r5, #0
 80080e4:	f104 0619 	add.w	r6, r4, #25
 80080e8:	e7f5      	b.n	80080d6 <_printf_i+0x22e>
 80080ea:	bf00      	nop
 80080ec:	0800b431 	.word	0x0800b431
 80080f0:	0800b442 	.word	0x0800b442

080080f4 <memmove>:
 80080f4:	4288      	cmp	r0, r1
 80080f6:	b510      	push	{r4, lr}
 80080f8:	eb01 0402 	add.w	r4, r1, r2
 80080fc:	d902      	bls.n	8008104 <memmove+0x10>
 80080fe:	4284      	cmp	r4, r0
 8008100:	4623      	mov	r3, r4
 8008102:	d807      	bhi.n	8008114 <memmove+0x20>
 8008104:	1e43      	subs	r3, r0, #1
 8008106:	42a1      	cmp	r1, r4
 8008108:	d008      	beq.n	800811c <memmove+0x28>
 800810a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800810e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008112:	e7f8      	b.n	8008106 <memmove+0x12>
 8008114:	4402      	add	r2, r0
 8008116:	4601      	mov	r1, r0
 8008118:	428a      	cmp	r2, r1
 800811a:	d100      	bne.n	800811e <memmove+0x2a>
 800811c:	bd10      	pop	{r4, pc}
 800811e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008126:	e7f7      	b.n	8008118 <memmove+0x24>

08008128 <_free_r>:
 8008128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800812a:	2900      	cmp	r1, #0
 800812c:	d048      	beq.n	80081c0 <_free_r+0x98>
 800812e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008132:	9001      	str	r0, [sp, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	f1a1 0404 	sub.w	r4, r1, #4
 800813a:	bfb8      	it	lt
 800813c:	18e4      	addlt	r4, r4, r3
 800813e:	f000 f8d3 	bl	80082e8 <__malloc_lock>
 8008142:	4a20      	ldr	r2, [pc, #128]	; (80081c4 <_free_r+0x9c>)
 8008144:	9801      	ldr	r0, [sp, #4]
 8008146:	6813      	ldr	r3, [r2, #0]
 8008148:	4615      	mov	r5, r2
 800814a:	b933      	cbnz	r3, 800815a <_free_r+0x32>
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	6014      	str	r4, [r2, #0]
 8008150:	b003      	add	sp, #12
 8008152:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008156:	f000 b8cd 	b.w	80082f4 <__malloc_unlock>
 800815a:	42a3      	cmp	r3, r4
 800815c:	d90b      	bls.n	8008176 <_free_r+0x4e>
 800815e:	6821      	ldr	r1, [r4, #0]
 8008160:	1862      	adds	r2, r4, r1
 8008162:	4293      	cmp	r3, r2
 8008164:	bf04      	itt	eq
 8008166:	681a      	ldreq	r2, [r3, #0]
 8008168:	685b      	ldreq	r3, [r3, #4]
 800816a:	6063      	str	r3, [r4, #4]
 800816c:	bf04      	itt	eq
 800816e:	1852      	addeq	r2, r2, r1
 8008170:	6022      	streq	r2, [r4, #0]
 8008172:	602c      	str	r4, [r5, #0]
 8008174:	e7ec      	b.n	8008150 <_free_r+0x28>
 8008176:	461a      	mov	r2, r3
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	b10b      	cbz	r3, 8008180 <_free_r+0x58>
 800817c:	42a3      	cmp	r3, r4
 800817e:	d9fa      	bls.n	8008176 <_free_r+0x4e>
 8008180:	6811      	ldr	r1, [r2, #0]
 8008182:	1855      	adds	r5, r2, r1
 8008184:	42a5      	cmp	r5, r4
 8008186:	d10b      	bne.n	80081a0 <_free_r+0x78>
 8008188:	6824      	ldr	r4, [r4, #0]
 800818a:	4421      	add	r1, r4
 800818c:	1854      	adds	r4, r2, r1
 800818e:	42a3      	cmp	r3, r4
 8008190:	6011      	str	r1, [r2, #0]
 8008192:	d1dd      	bne.n	8008150 <_free_r+0x28>
 8008194:	681c      	ldr	r4, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	6053      	str	r3, [r2, #4]
 800819a:	4421      	add	r1, r4
 800819c:	6011      	str	r1, [r2, #0]
 800819e:	e7d7      	b.n	8008150 <_free_r+0x28>
 80081a0:	d902      	bls.n	80081a8 <_free_r+0x80>
 80081a2:	230c      	movs	r3, #12
 80081a4:	6003      	str	r3, [r0, #0]
 80081a6:	e7d3      	b.n	8008150 <_free_r+0x28>
 80081a8:	6825      	ldr	r5, [r4, #0]
 80081aa:	1961      	adds	r1, r4, r5
 80081ac:	428b      	cmp	r3, r1
 80081ae:	bf04      	itt	eq
 80081b0:	6819      	ldreq	r1, [r3, #0]
 80081b2:	685b      	ldreq	r3, [r3, #4]
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	bf04      	itt	eq
 80081b8:	1949      	addeq	r1, r1, r5
 80081ba:	6021      	streq	r1, [r4, #0]
 80081bc:	6054      	str	r4, [r2, #4]
 80081be:	e7c7      	b.n	8008150 <_free_r+0x28>
 80081c0:	b003      	add	sp, #12
 80081c2:	bd30      	pop	{r4, r5, pc}
 80081c4:	200000c0 	.word	0x200000c0

080081c8 <_malloc_r>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	1ccd      	adds	r5, r1, #3
 80081cc:	f025 0503 	bic.w	r5, r5, #3
 80081d0:	3508      	adds	r5, #8
 80081d2:	2d0c      	cmp	r5, #12
 80081d4:	bf38      	it	cc
 80081d6:	250c      	movcc	r5, #12
 80081d8:	2d00      	cmp	r5, #0
 80081da:	4606      	mov	r6, r0
 80081dc:	db01      	blt.n	80081e2 <_malloc_r+0x1a>
 80081de:	42a9      	cmp	r1, r5
 80081e0:	d903      	bls.n	80081ea <_malloc_r+0x22>
 80081e2:	230c      	movs	r3, #12
 80081e4:	6033      	str	r3, [r6, #0]
 80081e6:	2000      	movs	r0, #0
 80081e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ea:	f000 f87d 	bl	80082e8 <__malloc_lock>
 80081ee:	4921      	ldr	r1, [pc, #132]	; (8008274 <_malloc_r+0xac>)
 80081f0:	680a      	ldr	r2, [r1, #0]
 80081f2:	4614      	mov	r4, r2
 80081f4:	b99c      	cbnz	r4, 800821e <_malloc_r+0x56>
 80081f6:	4f20      	ldr	r7, [pc, #128]	; (8008278 <_malloc_r+0xb0>)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	b923      	cbnz	r3, 8008206 <_malloc_r+0x3e>
 80081fc:	4621      	mov	r1, r4
 80081fe:	4630      	mov	r0, r6
 8008200:	f000 f862 	bl	80082c8 <_sbrk_r>
 8008204:	6038      	str	r0, [r7, #0]
 8008206:	4629      	mov	r1, r5
 8008208:	4630      	mov	r0, r6
 800820a:	f000 f85d 	bl	80082c8 <_sbrk_r>
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	d123      	bne.n	800825a <_malloc_r+0x92>
 8008212:	230c      	movs	r3, #12
 8008214:	6033      	str	r3, [r6, #0]
 8008216:	4630      	mov	r0, r6
 8008218:	f000 f86c 	bl	80082f4 <__malloc_unlock>
 800821c:	e7e3      	b.n	80081e6 <_malloc_r+0x1e>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	1b5b      	subs	r3, r3, r5
 8008222:	d417      	bmi.n	8008254 <_malloc_r+0x8c>
 8008224:	2b0b      	cmp	r3, #11
 8008226:	d903      	bls.n	8008230 <_malloc_r+0x68>
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	441c      	add	r4, r3
 800822c:	6025      	str	r5, [r4, #0]
 800822e:	e004      	b.n	800823a <_malloc_r+0x72>
 8008230:	6863      	ldr	r3, [r4, #4]
 8008232:	42a2      	cmp	r2, r4
 8008234:	bf0c      	ite	eq
 8008236:	600b      	streq	r3, [r1, #0]
 8008238:	6053      	strne	r3, [r2, #4]
 800823a:	4630      	mov	r0, r6
 800823c:	f000 f85a 	bl	80082f4 <__malloc_unlock>
 8008240:	f104 000b 	add.w	r0, r4, #11
 8008244:	1d23      	adds	r3, r4, #4
 8008246:	f020 0007 	bic.w	r0, r0, #7
 800824a:	1ac2      	subs	r2, r0, r3
 800824c:	d0cc      	beq.n	80081e8 <_malloc_r+0x20>
 800824e:	1a1b      	subs	r3, r3, r0
 8008250:	50a3      	str	r3, [r4, r2]
 8008252:	e7c9      	b.n	80081e8 <_malloc_r+0x20>
 8008254:	4622      	mov	r2, r4
 8008256:	6864      	ldr	r4, [r4, #4]
 8008258:	e7cc      	b.n	80081f4 <_malloc_r+0x2c>
 800825a:	1cc4      	adds	r4, r0, #3
 800825c:	f024 0403 	bic.w	r4, r4, #3
 8008260:	42a0      	cmp	r0, r4
 8008262:	d0e3      	beq.n	800822c <_malloc_r+0x64>
 8008264:	1a21      	subs	r1, r4, r0
 8008266:	4630      	mov	r0, r6
 8008268:	f000 f82e 	bl	80082c8 <_sbrk_r>
 800826c:	3001      	adds	r0, #1
 800826e:	d1dd      	bne.n	800822c <_malloc_r+0x64>
 8008270:	e7cf      	b.n	8008212 <_malloc_r+0x4a>
 8008272:	bf00      	nop
 8008274:	200000c0 	.word	0x200000c0
 8008278:	200000c4 	.word	0x200000c4

0800827c <_realloc_r>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	4607      	mov	r7, r0
 8008280:	4614      	mov	r4, r2
 8008282:	460e      	mov	r6, r1
 8008284:	b921      	cbnz	r1, 8008290 <_realloc_r+0x14>
 8008286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800828a:	4611      	mov	r1, r2
 800828c:	f7ff bf9c 	b.w	80081c8 <_malloc_r>
 8008290:	b922      	cbnz	r2, 800829c <_realloc_r+0x20>
 8008292:	f7ff ff49 	bl	8008128 <_free_r>
 8008296:	4625      	mov	r5, r4
 8008298:	4628      	mov	r0, r5
 800829a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829c:	f000 f830 	bl	8008300 <_malloc_usable_size_r>
 80082a0:	42a0      	cmp	r0, r4
 80082a2:	d20f      	bcs.n	80082c4 <_realloc_r+0x48>
 80082a4:	4621      	mov	r1, r4
 80082a6:	4638      	mov	r0, r7
 80082a8:	f7ff ff8e 	bl	80081c8 <_malloc_r>
 80082ac:	4605      	mov	r5, r0
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d0f2      	beq.n	8008298 <_realloc_r+0x1c>
 80082b2:	4631      	mov	r1, r6
 80082b4:	4622      	mov	r2, r4
 80082b6:	f7ff fbf7 	bl	8007aa8 <memcpy>
 80082ba:	4631      	mov	r1, r6
 80082bc:	4638      	mov	r0, r7
 80082be:	f7ff ff33 	bl	8008128 <_free_r>
 80082c2:	e7e9      	b.n	8008298 <_realloc_r+0x1c>
 80082c4:	4635      	mov	r5, r6
 80082c6:	e7e7      	b.n	8008298 <_realloc_r+0x1c>

080082c8 <_sbrk_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d06      	ldr	r5, [pc, #24]	; (80082e4 <_sbrk_r+0x1c>)
 80082cc:	2300      	movs	r3, #0
 80082ce:	4604      	mov	r4, r0
 80082d0:	4608      	mov	r0, r1
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	f7fa fd5c 	bl	8002d90 <_sbrk>
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d102      	bne.n	80082e2 <_sbrk_r+0x1a>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	b103      	cbz	r3, 80082e2 <_sbrk_r+0x1a>
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	20000350 	.word	0x20000350

080082e8 <__malloc_lock>:
 80082e8:	4801      	ldr	r0, [pc, #4]	; (80082f0 <__malloc_lock+0x8>)
 80082ea:	f000 b811 	b.w	8008310 <__retarget_lock_acquire_recursive>
 80082ee:	bf00      	nop
 80082f0:	20000358 	.word	0x20000358

080082f4 <__malloc_unlock>:
 80082f4:	4801      	ldr	r0, [pc, #4]	; (80082fc <__malloc_unlock+0x8>)
 80082f6:	f000 b80c 	b.w	8008312 <__retarget_lock_release_recursive>
 80082fa:	bf00      	nop
 80082fc:	20000358 	.word	0x20000358

08008300 <_malloc_usable_size_r>:
 8008300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008304:	1f18      	subs	r0, r3, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfbc      	itt	lt
 800830a:	580b      	ldrlt	r3, [r1, r0]
 800830c:	18c0      	addlt	r0, r0, r3
 800830e:	4770      	bx	lr

08008310 <__retarget_lock_acquire_recursive>:
 8008310:	4770      	bx	lr

08008312 <__retarget_lock_release_recursive>:
 8008312:	4770      	bx	lr

08008314 <_init>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr

08008320 <_fini>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr
