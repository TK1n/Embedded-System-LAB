
Bai4_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fdc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fd8  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a13c  0800a13c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a13c  0800a13c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a144  0800a144  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a144  0800a144  0001a144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a14c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000023c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000248  20000248  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee0f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cf9  00000000  00000000  0003ee4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  00042b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001398  00000000  00000000  00044078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002442b  00000000  00000000  00045410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf7c  00000000  00000000  0006983b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d21d2  00000000  00000000  000867b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00158989  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005704  00000000  00000000  001589dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800714c 	.word	0x0800714c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800714c 	.word	0x0800714c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f003 f825 	bl	8003528 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:

void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f003 f818 	bl	8003528 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f003 f813 	bl	8003528 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f004 fe12 	bl	8005132 <HAL_SPI_Receive>
	  int button_index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000028 	.word	0x20000028
 80005b8:	20000160 	.word	0x20000160
 80005bc:	20000050 	.word	0x20000050

080005c0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005c4:	201e      	movs	r0, #30
 80005c6:	f002 fb8b 	bl	8002ce0 <DEC2BCD>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <ds3231_init+0x80>)
 80005d0:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005d2:	2016      	movs	r0, #22
 80005d4:	f002 fb84 	bl	8002ce0 <DEC2BCD>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <ds3231_init+0x80>)
 80005de:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005e0:	2015      	movs	r0, #21
 80005e2:	f002 fb7d 	bl	8002ce0 <DEC2BCD>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <ds3231_init+0x80>)
 80005ec:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005ee:	2006      	movs	r0, #6
 80005f0:	f002 fb76 	bl	8002ce0 <DEC2BCD>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <ds3231_init+0x80>)
 80005fa:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005fc:	200f      	movs	r0, #15
 80005fe:	f002 fb6f 	bl	8002ce0 <DEC2BCD>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <ds3231_init+0x80>)
 8000608:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800060a:	2009      	movs	r0, #9
 800060c:	f002 fb68 	bl	8002ce0 <DEC2BCD>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <ds3231_init+0x80>)
 8000616:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000618:	2017      	movs	r0, #23
 800061a:	f002 fb61 	bl	8002ce0 <DEC2BCD>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <ds3231_init+0x80>)
 8000624:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000626:	2332      	movs	r3, #50	; 0x32
 8000628:	2203      	movs	r2, #3
 800062a:	21d0      	movs	r1, #208	; 0xd0
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <ds3231_init+0x84>)
 800062e:	f003 fbf9 	bl	8003e24 <HAL_I2C_IsDeviceReady>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d000      	beq.n	800063a <ds3231_init+0x7a>
		while(1);
 8000638:	e7fe      	b.n	8000638 <ds3231_init+0x78>
	};
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000078 	.word	0x20000078
 8000644:	200000d0 	.word	0x200000d0

08000648 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af04      	add	r7, sp, #16
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fb40 	bl	8002ce0 <DEC2BCD>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	b29a      	uxth	r2, r3
 8000668:	230a      	movs	r3, #10
 800066a:	9302      	str	r3, [sp, #8]
 800066c:	2301      	movs	r3, #1
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	21d0      	movs	r1, #208	; 0xd0
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <ds3231_Write+0x40>)
 800067c:	f003 f8b2 	bl	80037e4 <HAL_I2C_Mem_Write>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000d0 	.word	0x200000d0

0800068c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000692:	230a      	movs	r3, #10
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	2307      	movs	r3, #7
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <ds3231_ReadTime+0xa4>)
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2301      	movs	r3, #1
 80006a0:	2200      	movs	r2, #0
 80006a2:	21d0      	movs	r1, #208	; 0xd0
 80006a4:	4823      	ldr	r0, [pc, #140]	; (8000734 <ds3231_ReadTime+0xa8>)
 80006a6:	f003 f997 	bl	80039d8 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fafc 	bl	8002cac <BCD2DEC>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <ds3231_ReadTime+0xac>)
 80006ba:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 faf3 	bl	8002cac <BCD2DEC>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <ds3231_ReadTime+0xb0>)
 80006cc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 faea 	bl	8002cac <BCD2DEC>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <ds3231_ReadTime+0xb4>)
 80006de:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006e2:	78db      	ldrb	r3, [r3, #3]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fae1 	bl	8002cac <BCD2DEC>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <ds3231_ReadTime+0xb8>)
 80006f0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fad8 	bl	8002cac <BCD2DEC>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <ds3231_ReadTime+0xbc>)
 8000702:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <ds3231_ReadTime+0xa4>)
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	4618      	mov	r0, r3
 800070a:	f002 facf 	bl	8002cac <BCD2DEC>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <ds3231_ReadTime+0xc0>)
 8000714:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <ds3231_ReadTime+0xa4>)
 8000718:	799b      	ldrb	r3, [r3, #6]
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fac6 	bl	8002cac <BCD2DEC>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <ds3231_ReadTime+0xc4>)
 8000726:	701a      	strb	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000078 	.word	0x20000078
 8000734:	200000d0 	.word	0x200000d0
 8000738:	20000070 	.word	0x20000070
 800073c:	20000072 	.word	0x20000072
 8000740:	20000075 	.word	0x20000075
 8000744:	20000074 	.word	0x20000074
 8000748:	20000073 	.word	0x20000073
 800074c:	20000076 	.word	0x20000076
 8000750:	20000071 	.word	0x20000071

08000754 <updateTime>:
uint8_t timer_hours = 0;
uint8_t timer_min = 0;
uint8_t timer_sec = 0;
uint8_t timer_check = 0;

void updateTime(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 8000758:	2117      	movs	r1, #23
 800075a:	2006      	movs	r0, #6
 800075c:	f7ff ff74 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 10);
 8000760:	210a      	movs	r1, #10
 8000762:	2005      	movs	r0, #5
 8000764:	f7ff ff70 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 20);
 8000768:	2114      	movs	r1, #20
 800076a:	2004      	movs	r0, #4
 800076c:	f7ff ff6c 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8000770:	2106      	movs	r1, #6
 8000772:	2003      	movs	r0, #3
 8000774:	f7ff ff68 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 12);
 8000778:	210c      	movs	r1, #12
 800077a:	2002      	movs	r0, #2
 800077c:	f7ff ff64 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 59);
 8000780:	213b      	movs	r1, #59	; 0x3b
 8000782:	2001      	movs	r0, #1
 8000784:	f7ff ff60 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 50);
 8000788:	2132      	movs	r1, #50	; 0x32
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff5c 	bl	8000648 <ds3231_Write>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <displayTime>:
	timer_min = 0;
	timer_sec = 0;
	timer_check = 1;
}

void displayTime(){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, 2, "NORMAL TIME", RED, BLACK, 16, 1);
 800079a:	2301      	movs	r3, #1
 800079c:	9302      	str	r3, [sp, #8]
 800079e:	2310      	movs	r3, #16
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	2300      	movs	r3, #0
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80007aa:	4a38      	ldr	r2, [pc, #224]	; (800088c <displayTime+0xf8>)
 80007ac:	2102      	movs	r1, #2
 80007ae:	2000      	movs	r0, #0
 80007b0:	f001 fec4 	bl	800253c <lcd_StrCenter>
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80007b4:	4b36      	ldr	r3, [pc, #216]	; (8000890 <displayTime+0xfc>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	2318      	movs	r3, #24
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	2300      	movs	r3, #0
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2302      	movs	r3, #2
 80007ca:	2164      	movs	r1, #100	; 0x64
 80007cc:	2046      	movs	r0, #70	; 0x46
 80007ce:	f001 fc4f 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <displayTime+0x100>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	2318      	movs	r3, #24
 80007da:	9302      	str	r3, [sp, #8]
 80007dc:	2300      	movs	r3, #0
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2302      	movs	r3, #2
 80007e8:	2164      	movs	r1, #100	; 0x64
 80007ea:	206e      	movs	r0, #110	; 0x6e
 80007ec:	f001 fc40 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80007f0:	4b29      	ldr	r3, [pc, #164]	; (8000898 <displayTime+0x104>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	2318      	movs	r3, #24
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	2300      	movs	r3, #0
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2302      	movs	r3, #2
 8000806:	2164      	movs	r1, #100	; 0x64
 8000808:	2096      	movs	r0, #150	; 0x96
 800080a:	f001 fc31 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <displayTime+0x108>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b29a      	uxth	r2, r3
 8000814:	2318      	movs	r3, #24
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	2300      	movs	r3, #0
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2302      	movs	r3, #2
 8000824:	2182      	movs	r1, #130	; 0x82
 8000826:	2014      	movs	r0, #20
 8000828:	f001 fc22 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <displayTime+0x10c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b29a      	uxth	r2, r3
 8000832:	2318      	movs	r3, #24
 8000834:	9302      	str	r3, [sp, #8]
 8000836:	2300      	movs	r3, #0
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2302      	movs	r3, #2
 8000842:	2182      	movs	r1, #130	; 0x82
 8000844:	2046      	movs	r0, #70	; 0x46
 8000846:	f001 fc13 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <displayTime+0x110>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b29a      	uxth	r2, r3
 8000850:	2318      	movs	r3, #24
 8000852:	9302      	str	r3, [sp, #8]
 8000854:	2300      	movs	r3, #0
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2302      	movs	r3, #2
 8000860:	2182      	movs	r1, #130	; 0x82
 8000862:	206e      	movs	r0, #110	; 0x6e
 8000864:	f001 fc04 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <displayTime+0x114>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b29a      	uxth	r2, r3
 800086e:	2318      	movs	r3, #24
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	2300      	movs	r3, #0
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2302      	movs	r3, #2
 800087e:	2182      	movs	r1, #130	; 0x82
 8000880:	2096      	movs	r0, #150	; 0x96
 8000882:	f001 fbf5 	bl	8002070 <lcd_ShowIntNum>
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	08007164 	.word	0x08007164
 8000890:	20000075 	.word	0x20000075
 8000894:	20000072 	.word	0x20000072
 8000898:	20000070 	.word	0x20000070
 800089c:	20000074 	.word	0x20000074
 80008a0:	20000073 	.word	0x20000073
 80008a4:	20000076 	.word	0x20000076
 80008a8:	20000071 	.word	0x20000071

080008ac <displayAdjTime>:

void displayAdjTime(){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, 2, "ADJUSTING TIME MODE", RED, BLACK, 16, 1);
 80008b2:	2301      	movs	r3, #1
 80008b4:	9302      	str	r3, [sp, #8]
 80008b6:	2310      	movs	r3, #16
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	2300      	movs	r3, #0
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80008c2:	4a38      	ldr	r2, [pc, #224]	; (80009a4 <displayAdjTime+0xf8>)
 80008c4:	2102      	movs	r1, #2
 80008c6:	2000      	movs	r0, #0
 80008c8:	f001 fe38 	bl	800253c <lcd_StrCenter>
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80008cc:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <displayAdjTime+0xfc>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	2318      	movs	r3, #24
 80008d4:	9302      	str	r3, [sp, #8]
 80008d6:	2300      	movs	r3, #0
 80008d8:	9301      	str	r3, [sp, #4]
 80008da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2302      	movs	r3, #2
 80008e2:	2164      	movs	r1, #100	; 0x64
 80008e4:	2046      	movs	r0, #70	; 0x46
 80008e6:	f001 fbc3 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80008ea:	4b30      	ldr	r3, [pc, #192]	; (80009ac <displayAdjTime+0x100>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	2318      	movs	r3, #24
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	2300      	movs	r3, #0
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2164      	movs	r1, #100	; 0x64
 8000902:	206e      	movs	r0, #110	; 0x6e
 8000904:	f001 fbb4 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <displayAdjTime+0x104>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b29a      	uxth	r2, r3
 800090e:	2318      	movs	r3, #24
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	2300      	movs	r3, #0
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	2164      	movs	r1, #100	; 0x64
 8000920:	2096      	movs	r0, #150	; 0x96
 8000922:	f001 fba5 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <displayAdjTime+0x108>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b29a      	uxth	r2, r3
 800092c:	2318      	movs	r3, #24
 800092e:	9302      	str	r3, [sp, #8]
 8000930:	2300      	movs	r3, #0
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2302      	movs	r3, #2
 800093c:	2182      	movs	r1, #130	; 0x82
 800093e:	2014      	movs	r0, #20
 8000940:	f001 fb96 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <displayAdjTime+0x10c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b29a      	uxth	r2, r3
 800094a:	2318      	movs	r3, #24
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	2300      	movs	r3, #0
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2302      	movs	r3, #2
 800095a:	2182      	movs	r1, #130	; 0x82
 800095c:	2046      	movs	r0, #70	; 0x46
 800095e:	f001 fb87 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <displayAdjTime+0x110>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b29a      	uxth	r2, r3
 8000968:	2318      	movs	r3, #24
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2300      	movs	r3, #0
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2302      	movs	r3, #2
 8000978:	2182      	movs	r1, #130	; 0x82
 800097a:	206e      	movs	r0, #110	; 0x6e
 800097c:	f001 fb78 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <displayAdjTime+0x114>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b29a      	uxth	r2, r3
 8000986:	2318      	movs	r3, #24
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2300      	movs	r3, #0
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2302      	movs	r3, #2
 8000996:	2182      	movs	r1, #130	; 0x82
 8000998:	2096      	movs	r0, #150	; 0x96
 800099a:	f001 fb69 	bl	8002070 <lcd_ShowIntNum>
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08007170 	.word	0x08007170
 80009a8:	20000075 	.word	0x20000075
 80009ac:	20000072 	.word	0x20000072
 80009b0:	20000070 	.word	0x20000070
 80009b4:	20000074 	.word	0x20000074
 80009b8:	20000073 	.word	0x20000073
 80009bc:	20000076 	.word	0x20000076
 80009c0:	20000071 	.word	0x20000071

080009c4 <displayTimer>:

void displayTimer(){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, timer_hours, 2, MAGENTA, BLACK, 24);
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <displayTimer+0xa0>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	2318      	movs	r3, #24
 80009d2:	9302      	str	r3, [sp, #8]
 80009d4:	2300      	movs	r3, #0
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2302      	movs	r3, #2
 80009e0:	2164      	movs	r1, #100	; 0x64
 80009e2:	2046      	movs	r0, #70	; 0x46
 80009e4:	f001 fb44 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, timer_min, 2, MAGENTA, BLACK, 24);
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <displayTimer+0xa4>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	2318      	movs	r3, #24
 80009f0:	9302      	str	r3, [sp, #8]
 80009f2:	2300      	movs	r3, #0
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2302      	movs	r3, #2
 80009fe:	2164      	movs	r1, #100	; 0x64
 8000a00:	206e      	movs	r0, #110	; 0x6e
 8000a02:	f001 fb35 	bl	8002070 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, timer_sec, 2, MAGENTA, BLACK, 24);
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <displayTimer+0xa8>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	2318      	movs	r3, #24
 8000a0e:	9302      	str	r3, [sp, #8]
 8000a10:	2300      	movs	r3, #0
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	2164      	movs	r1, #100	; 0x64
 8000a1e:	2096      	movs	r0, #150	; 0x96
 8000a20:	f001 fb26 	bl	8002070 <lcd_ShowIntNum>
	lcd_StrCenter(0, 2, "TIMER MODE", RED, BLACK, 16, 1);
 8000a24:	2301      	movs	r3, #1
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	2310      	movs	r3, #16
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <displayTimer+0xac>)
 8000a36:	2102      	movs	r1, #2
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 fd7f 	bl	800253c <lcd_StrCenter>
	lcd_ShowIntNum(20, 100, timer_check, 2, MAGENTA, BLACK, 24);
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <displayTimer+0xb0>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	2318      	movs	r3, #24
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2302      	movs	r3, #2
 8000a54:	2164      	movs	r1, #100	; 0x64
 8000a56:	2014      	movs	r0, #20
 8000a58:	f001 fb0a 	bl	8002070 <lcd_ShowIntNum>
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000002d 	.word	0x2000002d
 8000a68:	2000002e 	.word	0x2000002e
 8000a6c:	2000002f 	.word	0x2000002f
 8000a70:	08007184 	.word	0x08007184
 8000a74:	20000030 	.word	0x20000030

08000a78 <clockTime>:

void clockTime(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <clockTime+0x38>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	2002      	movs	r0, #2
 8000a84:	f7ff fde0 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, ds3231_min);
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <clockTime+0x3c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fdda 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <clockTime+0x40>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fdd4 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, ds3231_day);
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <clockTime+0x44>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f7ff fdce 	bl	8000648 <ds3231_Write>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000075 	.word	0x20000075
 8000ab4:	20000072 	.word	0x20000072
 8000ab8:	20000070 	.word	0x20000070
 8000abc:	20000074 	.word	0x20000074

08000ac0 <timer_mode>:

void timer_mode(){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af04      	add	r7, sp, #16
	switch(TIMER){
 8000ac6:	4bab      	ldr	r3, [pc, #684]	; (8000d74 <timer_mode+0x2b4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	f200 81dd 	bhi.w	8000e8c <timer_mode+0x3cc>
 8000ad2:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <timer_mode+0x18>)
 8000ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad8:	08000af9 	.word	0x08000af9
 8000adc:	08000bef 	.word	0x08000bef
 8000ae0:	08000ce9 	.word	0x08000ce9
 8000ae4:	08000e05 	.word	0x08000e05
 8000ae8:	08000aed 	.word	0x08000aed
	case init:
		displayTimer();
 8000aec:	f7ff ff6a 	bl	80009c4 <displayTimer>
		TIMER = timerH;
 8000af0:	4ba0      	ldr	r3, [pc, #640]	; (8000d74 <timer_mode+0x2b4>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
		break;
 8000af6:	e1d2      	b.n	8000e9e <timer_mode+0x3de>
	case timerH:
		if(count_led_flash < 10){
 8000af8:	4b9f      	ldr	r3, [pc, #636]	; (8000d78 <timer_mode+0x2b8>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b09      	cmp	r3, #9
 8000afe:	d80e      	bhi.n	8000b1e <timer_mode+0x5e>
			lcd_ShowIntNum(70, 100, timer_hours, 2, BLACK, BLACK, 24);
 8000b00:	4b9e      	ldr	r3, [pc, #632]	; (8000d7c <timer_mode+0x2bc>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	2318      	movs	r3, #24
 8000b08:	9302      	str	r3, [sp, #8]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2302      	movs	r3, #2
 8000b14:	2164      	movs	r1, #100	; 0x64
 8000b16:	2046      	movs	r0, #70	; 0x46
 8000b18:	f001 faaa 	bl	8002070 <lcd_ShowIntNum>
 8000b1c:	e00e      	b.n	8000b3c <timer_mode+0x7c>
		} else lcd_ShowIntNum(70, 100, timer_hours, 2, MAGENTA, BLACK, 24);
 8000b1e:	4b97      	ldr	r3, [pc, #604]	; (8000d7c <timer_mode+0x2bc>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	2318      	movs	r3, #24
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2302      	movs	r3, #2
 8000b34:	2164      	movs	r1, #100	; 0x64
 8000b36:	2046      	movs	r0, #70	; 0x46
 8000b38:	f001 fa9a 	bl	8002070 <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000b3c:	4b90      	ldr	r3, [pc, #576]	; (8000d80 <timer_mode+0x2c0>)
 8000b3e:	88db      	ldrh	r3, [r3, #6]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d116      	bne.n	8000b72 <timer_mode+0xb2>
			timer_hours = (timer_hours + 1) %24;
 8000b44:	4b8d      	ldr	r3, [pc, #564]	; (8000d7c <timer_mode+0x2bc>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	4b8e      	ldr	r3, [pc, #568]	; (8000d84 <timer_mode+0x2c4>)
 8000b4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b50:	1099      	asrs	r1, r3, #2
 8000b52:	17d3      	asrs	r3, r2, #31
 8000b54:	1ac9      	subs	r1, r1, r3
 8000b56:	460b      	mov	r3, r1
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	440b      	add	r3, r1
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	1ad1      	subs	r1, r2, r3
 8000b60:	b2ca      	uxtb	r2, r1
 8000b62:	4b86      	ldr	r3, [pc, #536]	; (8000d7c <timer_mode+0x2bc>)
 8000b64:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_HOUR, timer_hours);
 8000b66:	4b85      	ldr	r3, [pc, #532]	; (8000d7c <timer_mode+0x2bc>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fd6b 	bl	8000648 <ds3231_Write>
		}
		if (button_count[3] >= 40) flag = 1; else flag = 0;
 8000b72:	4b83      	ldr	r3, [pc, #524]	; (8000d80 <timer_mode+0x2c0>)
 8000b74:	88db      	ldrh	r3, [r3, #6]
 8000b76:	2b27      	cmp	r3, #39	; 0x27
 8000b78:	d903      	bls.n	8000b82 <timer_mode+0xc2>
 8000b7a:	4b83      	ldr	r3, [pc, #524]	; (8000d88 <timer_mode+0x2c8>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	e002      	b.n	8000b88 <timer_mode+0xc8>
 8000b82:	4b81      	ldr	r3, [pc, #516]	; (8000d88 <timer_mode+0x2c8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
		if (button_count[3] % 4 == 1 && flag == 1) {
 8000b88:	4b7d      	ldr	r3, [pc, #500]	; (8000d80 <timer_mode+0x2c0>)
 8000b8a:	88db      	ldrh	r3, [r3, #6]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d11d      	bne.n	8000bd2 <timer_mode+0x112>
 8000b96:	4b7c      	ldr	r3, [pc, #496]	; (8000d88 <timer_mode+0x2c8>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d119      	bne.n	8000bd2 <timer_mode+0x112>
			count_led_flash = 11;
 8000b9e:	4b76      	ldr	r3, [pc, #472]	; (8000d78 <timer_mode+0x2b8>)
 8000ba0:	220b      	movs	r2, #11
 8000ba2:	701a      	strb	r2, [r3, #0]
			timer_hours = (timer_hours + 1) %24;
 8000ba4:	4b75      	ldr	r3, [pc, #468]	; (8000d7c <timer_mode+0x2bc>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	1c5a      	adds	r2, r3, #1
 8000baa:	4b76      	ldr	r3, [pc, #472]	; (8000d84 <timer_mode+0x2c4>)
 8000bac:	fb83 1302 	smull	r1, r3, r3, r2
 8000bb0:	1099      	asrs	r1, r3, #2
 8000bb2:	17d3      	asrs	r3, r2, #31
 8000bb4:	1ac9      	subs	r1, r1, r3
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	440b      	add	r3, r1
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	1ad1      	subs	r1, r2, r3
 8000bc0:	b2ca      	uxtb	r2, r1
 8000bc2:	4b6e      	ldr	r3, [pc, #440]	; (8000d7c <timer_mode+0x2bc>)
 8000bc4:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_HOUR, timer_hours);
 8000bc6:	4b6d      	ldr	r3, [pc, #436]	; (8000d7c <timer_mode+0x2bc>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f7ff fd3b 	bl	8000648 <ds3231_Write>
		}
		if(button_count[0] == 1) {TIMER = timerM; count_led_flash = 0; displayTimer();}
 8000bd2:	4b6b      	ldr	r3, [pc, #428]	; (8000d80 <timer_mode+0x2c0>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	f040 815a 	bne.w	8000e90 <timer_mode+0x3d0>
 8000bdc:	4b65      	ldr	r3, [pc, #404]	; (8000d74 <timer_mode+0x2b4>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	4b65      	ldr	r3, [pc, #404]	; (8000d78 <timer_mode+0x2b8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	f7ff feec 	bl	80009c4 <displayTimer>
		break;
 8000bec:	e150      	b.n	8000e90 <timer_mode+0x3d0>
	case timerM:
		if(count_led_flash < 10){
 8000bee:	4b62      	ldr	r3, [pc, #392]	; (8000d78 <timer_mode+0x2b8>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b09      	cmp	r3, #9
 8000bf4:	d80e      	bhi.n	8000c14 <timer_mode+0x154>
			lcd_ShowIntNum(110, 100, timer_min, 2, BLACK, BLACK, 24);
 8000bf6:	4b65      	ldr	r3, [pc, #404]	; (8000d8c <timer_mode+0x2cc>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	2318      	movs	r3, #24
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	2300      	movs	r3, #0
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	2300      	movs	r3, #0
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2302      	movs	r3, #2
 8000c0a:	2164      	movs	r1, #100	; 0x64
 8000c0c:	206e      	movs	r0, #110	; 0x6e
 8000c0e:	f001 fa2f 	bl	8002070 <lcd_ShowIntNum>
 8000c12:	e00e      	b.n	8000c32 <timer_mode+0x172>
		} else lcd_ShowIntNum(110, 100, timer_min, 2, MAGENTA, BLACK, 24);
 8000c14:	4b5d      	ldr	r3, [pc, #372]	; (8000d8c <timer_mode+0x2cc>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	2318      	movs	r3, #24
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2302      	movs	r3, #2
 8000c2a:	2164      	movs	r1, #100	; 0x64
 8000c2c:	206e      	movs	r0, #110	; 0x6e
 8000c2e:	f001 fa1f 	bl	8002070 <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000c32:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <timer_mode+0x2c0>)
 8000c34:	88db      	ldrh	r3, [r3, #6]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d117      	bne.n	8000c6a <timer_mode+0x1aa>
			timer_min = (timer_min + 1) % 60;
 8000c3a:	4b54      	ldr	r3, [pc, #336]	; (8000d8c <timer_mode+0x2cc>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <timer_mode+0x2d0>)
 8000c42:	fb83 1302 	smull	r1, r3, r3, r2
 8000c46:	4413      	add	r3, r2
 8000c48:	1159      	asrs	r1, r3, #5
 8000c4a:	17d3      	asrs	r3, r2, #31
 8000c4c:	1ac9      	subs	r1, r1, r3
 8000c4e:	460b      	mov	r3, r1
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	1a5b      	subs	r3, r3, r1
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	1ad1      	subs	r1, r2, r3
 8000c58:	b2ca      	uxtb	r2, r1
 8000c5a:	4b4c      	ldr	r3, [pc, #304]	; (8000d8c <timer_mode+0x2cc>)
 8000c5c:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MIN, timer_min);
 8000c5e:	4b4b      	ldr	r3, [pc, #300]	; (8000d8c <timer_mode+0x2cc>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4619      	mov	r1, r3
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff fcef 	bl	8000648 <ds3231_Write>
		}
		if (button_count[3] >= 40) flag = 1; else flag = 0;
 8000c6a:	4b45      	ldr	r3, [pc, #276]	; (8000d80 <timer_mode+0x2c0>)
 8000c6c:	88db      	ldrh	r3, [r3, #6]
 8000c6e:	2b27      	cmp	r3, #39	; 0x27
 8000c70:	d903      	bls.n	8000c7a <timer_mode+0x1ba>
 8000c72:	4b45      	ldr	r3, [pc, #276]	; (8000d88 <timer_mode+0x2c8>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
 8000c78:	e002      	b.n	8000c80 <timer_mode+0x1c0>
 8000c7a:	4b43      	ldr	r3, [pc, #268]	; (8000d88 <timer_mode+0x2c8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
		if (button_count[3] % 4 == 1 && flag == 1) {
 8000c80:	4b3f      	ldr	r3, [pc, #252]	; (8000d80 <timer_mode+0x2c0>)
 8000c82:	88db      	ldrh	r3, [r3, #6]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d11e      	bne.n	8000ccc <timer_mode+0x20c>
 8000c8e:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <timer_mode+0x2c8>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d11a      	bne.n	8000ccc <timer_mode+0x20c>
			count_led_flash = 11;
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <timer_mode+0x2b8>)
 8000c98:	220b      	movs	r2, #11
 8000c9a:	701a      	strb	r2, [r3, #0]
			timer_min = (timer_min + 1) % 60;
 8000c9c:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <timer_mode+0x2cc>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <timer_mode+0x2d0>)
 8000ca4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ca8:	4413      	add	r3, r2
 8000caa:	1159      	asrs	r1, r3, #5
 8000cac:	17d3      	asrs	r3, r2, #31
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	1ad1      	subs	r1, r2, r3
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <timer_mode+0x2cc>)
 8000cbe:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MIN, timer_min);
 8000cc0:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <timer_mode+0x2cc>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff fcbe 	bl	8000648 <ds3231_Write>
		}
		if(button_count[0] == 1) {TIMER = timerS; count_led_flash = 0; displayTimer();}
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <timer_mode+0x2c0>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	f040 80df 	bne.w	8000e94 <timer_mode+0x3d4>
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <timer_mode+0x2b4>)
 8000cd8:	2203      	movs	r2, #3
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <timer_mode+0x2b8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	f7ff fe6f 	bl	80009c4 <displayTimer>
		break;
 8000ce6:	e0d5      	b.n	8000e94 <timer_mode+0x3d4>
	case timerS:
		if(count_led_flash < 10){
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <timer_mode+0x2b8>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	d80e      	bhi.n	8000d0e <timer_mode+0x24e>
			lcd_ShowIntNum(150, 100, timer_sec, 2, BLACK, BLACK, 24);
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <timer_mode+0x2d4>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	2318      	movs	r3, #24
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2302      	movs	r3, #2
 8000d04:	2164      	movs	r1, #100	; 0x64
 8000d06:	2096      	movs	r0, #150	; 0x96
 8000d08:	f001 f9b2 	bl	8002070 <lcd_ShowIntNum>
 8000d0c:	e00e      	b.n	8000d2c <timer_mode+0x26c>
		} else lcd_ShowIntNum(150, 100, timer_sec, 2, MAGENTA, BLACK, 24);
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <timer_mode+0x2d4>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	2318      	movs	r3, #24
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2302      	movs	r3, #2
 8000d24:	2164      	movs	r1, #100	; 0x64
 8000d26:	2096      	movs	r0, #150	; 0x96
 8000d28:	f001 f9a2 	bl	8002070 <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <timer_mode+0x2c0>)
 8000d2e:	88db      	ldrh	r3, [r3, #6]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d117      	bne.n	8000d64 <timer_mode+0x2a4>
			timer_sec = (timer_sec + 1) % 60;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <timer_mode+0x2d4>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <timer_mode+0x2d0>)
 8000d3c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d40:	4413      	add	r3, r2
 8000d42:	1159      	asrs	r1, r3, #5
 8000d44:	17d3      	asrs	r3, r2, #31
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	460b      	mov	r3, r1
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	1ad1      	subs	r1, r2, r3
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <timer_mode+0x2d4>)
 8000d56:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_SEC, timer_sec);
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <timer_mode+0x2d4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fc72 	bl	8000648 <ds3231_Write>
		}
		if (button_count[3] >= 40) flag = 1; else flag = 0;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <timer_mode+0x2c0>)
 8000d66:	88db      	ldrh	r3, [r3, #6]
 8000d68:	2b27      	cmp	r3, #39	; 0x27
 8000d6a:	d915      	bls.n	8000d98 <timer_mode+0x2d8>
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <timer_mode+0x2c8>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e014      	b.n	8000d9e <timer_mode+0x2de>
 8000d74:	20000040 	.word	0x20000040
 8000d78:	2000002b 	.word	0x2000002b
 8000d7c:	2000002d 	.word	0x2000002d
 8000d80:	20000050 	.word	0x20000050
 8000d84:	2aaaaaab 	.word	0x2aaaaaab
 8000d88:	2000002c 	.word	0x2000002c
 8000d8c:	2000002e 	.word	0x2000002e
 8000d90:	88888889 	.word	0x88888889
 8000d94:	2000002f 	.word	0x2000002f
 8000d98:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <timer_mode+0x3e4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
		if (button_count[3] % 4 == 1 && flag == 1) {
 8000d9e:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <timer_mode+0x3e8>)
 8000da0:	88db      	ldrh	r3, [r3, #6]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d11e      	bne.n	8000dea <timer_mode+0x32a>
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <timer_mode+0x3e4>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d11a      	bne.n	8000dea <timer_mode+0x32a>
			count_led_flash = 11;
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <timer_mode+0x3ec>)
 8000db6:	220b      	movs	r2, #11
 8000db8:	701a      	strb	r2, [r3, #0]

			timer_sec = (timer_sec + 1) % 60;
 8000dba:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <timer_mode+0x3f0>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <timer_mode+0x3f4>)
 8000dc2:	fb83 1302 	smull	r1, r3, r3, r2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	1159      	asrs	r1, r3, #5
 8000dca:	17d3      	asrs	r3, r2, #31
 8000dcc:	1ac9      	subs	r1, r1, r3
 8000dce:	460b      	mov	r3, r1
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	1a5b      	subs	r3, r3, r1
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	1ad1      	subs	r1, r2, r3
 8000dd8:	b2ca      	uxtb	r2, r1
 8000dda:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <timer_mode+0x3f0>)
 8000ddc:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_SEC, timer_sec);
 8000dde:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <timer_mode+0x3f0>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fc2f 	bl	8000648 <ds3231_Write>
		}
		if(button_count[0] == 1) {TIMER = timerC; count_led_flash = 0; displayTimer();}
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <timer_mode+0x3e8>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d152      	bne.n	8000e98 <timer_mode+0x3d8>
 8000df2:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <timer_mode+0x3f8>)
 8000df4:	2204      	movs	r2, #4
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <timer_mode+0x3ec>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	f7ff fde1 	bl	80009c4 <displayTimer>
		break;
 8000e02:	e049      	b.n	8000e98 <timer_mode+0x3d8>
	case timerC:
		if(count_led_flash < 10){
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <timer_mode+0x3ec>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b09      	cmp	r3, #9
 8000e0a:	d80e      	bhi.n	8000e2a <timer_mode+0x36a>
			lcd_ShowIntNum(20, 100, timer_check, 2, BLACK, BLACK, 24);
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <timer_mode+0x3fc>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	2318      	movs	r3, #24
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	2300      	movs	r3, #0
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2302      	movs	r3, #2
 8000e20:	2164      	movs	r1, #100	; 0x64
 8000e22:	2014      	movs	r0, #20
 8000e24:	f001 f924 	bl	8002070 <lcd_ShowIntNum>
 8000e28:	e00e      	b.n	8000e48 <timer_mode+0x388>
		} else lcd_ShowIntNum(20, 100, timer_check, 2, MAGENTA, BLACK, 24);
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <timer_mode+0x3fc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	2318      	movs	r3, #24
 8000e32:	9302      	str	r3, [sp, #8]
 8000e34:	2300      	movs	r3, #0
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2302      	movs	r3, #2
 8000e40:	2164      	movs	r1, #100	; 0x64
 8000e42:	2014      	movs	r0, #20
 8000e44:	f001 f914 	bl	8002070 <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <timer_mode+0x3e8>)
 8000e4a:	88db      	ldrh	r3, [r3, #6]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d110      	bne.n	8000e72 <timer_mode+0x3b2>
			timer_check = (timer_check + 1) %2;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <timer_mode+0x3fc>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	bfb8      	it	lt
 8000e5e:	425b      	neglt	r3, r3
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <timer_mode+0x3fc>)
 8000e64:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_DAY, timer_check);
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <timer_mode+0x3fc>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f7ff fbeb 	bl	8000648 <ds3231_Write>
		}
		if(button_count[0] == 1) {TIMER = timerH; count_led_flash = 0; displayTimer();}
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <timer_mode+0x3e8>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d110      	bne.n	8000e9c <timer_mode+0x3dc>
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <timer_mode+0x3f8>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <timer_mode+0x3ec>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	f7ff fd9d 	bl	80009c4 <displayTimer>
		break;
 8000e8a:	e007      	b.n	8000e9c <timer_mode+0x3dc>
	default:
		break;
 8000e8c:	bf00      	nop
 8000e8e:	e006      	b.n	8000e9e <timer_mode+0x3de>
		break;
 8000e90:	bf00      	nop
 8000e92:	e004      	b.n	8000e9e <timer_mode+0x3de>
		break;
 8000e94:	bf00      	nop
 8000e96:	e002      	b.n	8000e9e <timer_mode+0x3de>
		break;
 8000e98:	bf00      	nop
 8000e9a:	e000      	b.n	8000e9e <timer_mode+0x3de>
		break;
 8000e9c:	bf00      	nop
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000002c 	.word	0x2000002c
 8000ea8:	20000050 	.word	0x20000050
 8000eac:	2000002b 	.word	0x2000002b
 8000eb0:	2000002f 	.word	0x2000002f
 8000eb4:	88888889 	.word	0x88888889
 8000eb8:	20000040 	.word	0x20000040
 8000ebc:	20000030 	.word	0x20000030

08000ec0 <alarm>:

void alarm(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af04      	add	r7, sp, #16
	if(timer_check == 1 && ds3231_hours == timer_hours && ds3231_min == timer_min && ds3231_sec == timer_sec){
 8000ec6:	4b4d      	ldr	r3, [pc, #308]	; (8000ffc <alarm+0x13c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	f040 808d 	bne.w	8000fea <alarm+0x12a>
 8000ed0:	4b4b      	ldr	r3, [pc, #300]	; (8001000 <alarm+0x140>)
 8000ed2:	781a      	ldrb	r2, [r3, #0]
 8000ed4:	4b4b      	ldr	r3, [pc, #300]	; (8001004 <alarm+0x144>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f040 8086 	bne.w	8000fea <alarm+0x12a>
 8000ede:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <alarm+0x148>)
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	4b4a      	ldr	r3, [pc, #296]	; (800100c <alarm+0x14c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d17f      	bne.n	8000fea <alarm+0x12a>
 8000eea:	4b49      	ldr	r3, [pc, #292]	; (8001010 <alarm+0x150>)
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	4b49      	ldr	r3, [pc, #292]	; (8001014 <alarm+0x154>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d179      	bne.n	8000fea <alarm+0x12a>
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8000ef6:	4b42      	ldr	r3, [pc, #264]	; (8001000 <alarm+0x140>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	2318      	movs	r3, #24
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2300      	movs	r3, #0
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	2164      	movs	r1, #100	; 0x64
 8000f0e:	2046      	movs	r0, #70	; 0x46
 8000f10:	f001 f8ae 	bl	8002070 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8000f14:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <alarm+0x148>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	2318      	movs	r3, #24
 8000f1c:	9302      	str	r3, [sp, #8]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2302      	movs	r3, #2
 8000f2a:	2164      	movs	r1, #100	; 0x64
 8000f2c:	206e      	movs	r0, #110	; 0x6e
 8000f2e:	f001 f89f 	bl	8002070 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <alarm+0x150>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	2318      	movs	r3, #24
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2302      	movs	r3, #2
 8000f48:	2164      	movs	r1, #100	; 0x64
 8000f4a:	2096      	movs	r0, #150	; 0x96
 8000f4c:	f001 f890 	bl	8002070 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <alarm+0x158>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	2318      	movs	r3, #24
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2302      	movs	r3, #2
 8000f66:	2182      	movs	r1, #130	; 0x82
 8000f68:	2014      	movs	r0, #20
 8000f6a:	f001 f881 	bl	8002070 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <alarm+0x15c>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	2318      	movs	r3, #24
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2302      	movs	r3, #2
 8000f84:	2182      	movs	r1, #130	; 0x82
 8000f86:	2046      	movs	r0, #70	; 0x46
 8000f88:	f001 f872 	bl	8002070 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <alarm+0x160>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	2318      	movs	r3, #24
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	2300      	movs	r3, #0
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	2182      	movs	r1, #130	; 0x82
 8000fa4:	206e      	movs	r0, #110	; 0x6e
 8000fa6:	f001 f863 	bl	8002070 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <alarm+0x164>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	2318      	movs	r3, #24
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	2182      	movs	r1, #130	; 0x82
 8000fc2:	2096      	movs	r0, #150	; 0x96
 8000fc4:	f001 f854 	bl	8002070 <lcd_ShowIntNum>
		DrawTestPage("ALARM");
 8000fc8:	4817      	ldr	r0, [pc, #92]	; (8001028 <alarm+0x168>)
 8000fca:	f001 fae9 	bl	80025a0 <DrawTestPage>
		if(button_count[1] == 1) {timer_check = 0; lcd_Clear(BLACK); status = MODE1;}
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <alarm+0x16c>)
 8000fd0:	885b      	ldrh	r3, [r3, #2]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10e      	bne.n	8000ff4 <alarm+0x134>
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <alarm+0x13c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 fed3 	bl	8001d88 <lcd_Clear>
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <alarm+0x170>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	601a      	str	r2, [r3, #0]
	if(timer_check == 1 && ds3231_hours == timer_hours && ds3231_min == timer_min && ds3231_sec == timer_sec){
 8000fe8:	e004      	b.n	8000ff4 <alarm+0x134>
	} else {
		ds3231_ReadTime();
 8000fea:	f7ff fb4f 	bl	800068c <ds3231_ReadTime>
		displayTime();
 8000fee:	f7ff fbd1 	bl	8000794 <displayTime>
	}
}
 8000ff2:	e000      	b.n	8000ff6 <alarm+0x136>
	if(timer_check == 1 && ds3231_hours == timer_hours && ds3231_min == timer_min && ds3231_sec == timer_sec){
 8000ff4:	bf00      	nop
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000030 	.word	0x20000030
 8001000:	20000075 	.word	0x20000075
 8001004:	2000002d 	.word	0x2000002d
 8001008:	20000072 	.word	0x20000072
 800100c:	2000002e 	.word	0x2000002e
 8001010:	20000070 	.word	0x20000070
 8001014:	2000002f 	.word	0x2000002f
 8001018:	20000074 	.word	0x20000074
 800101c:	20000073 	.word	0x20000073
 8001020:	20000076 	.word	0x20000076
 8001024:	20000071 	.word	0x20000071
 8001028:	08007190 	.word	0x08007190
 800102c:	20000050 	.word	0x20000050
 8001030:	20000038 	.word	0x20000038

08001034 <adjustingTime_mode>:

void adjustingTime_mode(){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af04      	add	r7, sp, #16
	switch(TMP){
 800103a:	4ba9      	ldr	r3, [pc, #676]	; (80012e0 <adjustingTime_mode+0x2ac>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3b01      	subs	r3, #1
 8001040:	2b05      	cmp	r3, #5
 8001042:	f200 836a 	bhi.w	800171a <adjustingTime_mode+0x6e6>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <adjustingTime_mode+0x18>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	08001065 	.word	0x08001065
 8001050:	0800115b 	.word	0x0800115b
 8001054:	08001255 	.word	0x08001255
 8001058:	08001373 	.word	0x08001373
 800105c:	08001507 	.word	0x08001507
 8001060:	08001627 	.word	0x08001627
	case hour:
		if(count_led_flash < 10){
 8001064:	4b9f      	ldr	r3, [pc, #636]	; (80012e4 <adjustingTime_mode+0x2b0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b09      	cmp	r3, #9
 800106a:	d80e      	bhi.n	800108a <adjustingTime_mode+0x56>
			lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 800106c:	4b9e      	ldr	r3, [pc, #632]	; (80012e8 <adjustingTime_mode+0x2b4>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b29a      	uxth	r2, r3
 8001072:	2318      	movs	r3, #24
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2300      	movs	r3, #0
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	2300      	movs	r3, #0
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2302      	movs	r3, #2
 8001080:	2164      	movs	r1, #100	; 0x64
 8001082:	2046      	movs	r0, #70	; 0x46
 8001084:	f000 fff4 	bl	8002070 <lcd_ShowIntNum>
 8001088:	e00e      	b.n	80010a8 <adjustingTime_mode+0x74>
		} else lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 800108a:	4b97      	ldr	r3, [pc, #604]	; (80012e8 <adjustingTime_mode+0x2b4>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b29a      	uxth	r2, r3
 8001090:	2318      	movs	r3, #24
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2300      	movs	r3, #0
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2302      	movs	r3, #2
 80010a0:	2164      	movs	r1, #100	; 0x64
 80010a2:	2046      	movs	r0, #70	; 0x46
 80010a4:	f000 ffe4 	bl	8002070 <lcd_ShowIntNum>

		if (button_count[3] == 1) {
 80010a8:	4b90      	ldr	r3, [pc, #576]	; (80012ec <adjustingTime_mode+0x2b8>)
 80010aa:	88db      	ldrh	r3, [r3, #6]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d116      	bne.n	80010de <adjustingTime_mode+0xaa>
		    ds3231_hours = (ds3231_hours + 1) %24;
 80010b0:	4b8d      	ldr	r3, [pc, #564]	; (80012e8 <adjustingTime_mode+0x2b4>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	4b8e      	ldr	r3, [pc, #568]	; (80012f0 <adjustingTime_mode+0x2bc>)
 80010b8:	fb83 1302 	smull	r1, r3, r3, r2
 80010bc:	1099      	asrs	r1, r3, #2
 80010be:	17d3      	asrs	r3, r2, #31
 80010c0:	1ac9      	subs	r1, r1, r3
 80010c2:	460b      	mov	r3, r1
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	440b      	add	r3, r1
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	1ad1      	subs	r1, r2, r3
 80010cc:	b2ca      	uxtb	r2, r1
 80010ce:	4b86      	ldr	r3, [pc, #536]	; (80012e8 <adjustingTime_mode+0x2b4>)
 80010d0:	701a      	strb	r2, [r3, #0]
		    ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 80010d2:	4b85      	ldr	r3, [pc, #532]	; (80012e8 <adjustingTime_mode+0x2b4>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff fab5 	bl	8000648 <ds3231_Write>
		}
		if (button_count[3] >= 40) flag = 1;
 80010de:	4b83      	ldr	r3, [pc, #524]	; (80012ec <adjustingTime_mode+0x2b8>)
 80010e0:	88db      	ldrh	r3, [r3, #6]
 80010e2:	2b27      	cmp	r3, #39	; 0x27
 80010e4:	d903      	bls.n	80010ee <adjustingTime_mode+0xba>
 80010e6:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <adjustingTime_mode+0x2c0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e002      	b.n	80010f4 <adjustingTime_mode+0xc0>
		else flag = 0;
 80010ee:	4b81      	ldr	r3, [pc, #516]	; (80012f4 <adjustingTime_mode+0x2c0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
		if (button_count[3] % 4 == 1 && flag == 1) {
 80010f4:	4b7d      	ldr	r3, [pc, #500]	; (80012ec <adjustingTime_mode+0x2b8>)
 80010f6:	88db      	ldrh	r3, [r3, #6]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d11d      	bne.n	800113e <adjustingTime_mode+0x10a>
 8001102:	4b7c      	ldr	r3, [pc, #496]	; (80012f4 <adjustingTime_mode+0x2c0>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d119      	bne.n	800113e <adjustingTime_mode+0x10a>
			count_led_flash = 11;
 800110a:	4b76      	ldr	r3, [pc, #472]	; (80012e4 <adjustingTime_mode+0x2b0>)
 800110c:	220b      	movs	r2, #11
 800110e:	701a      	strb	r2, [r3, #0]

			ds3231_hours = (ds3231_hours + 1) %24;
 8001110:	4b75      	ldr	r3, [pc, #468]	; (80012e8 <adjustingTime_mode+0x2b4>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	4b76      	ldr	r3, [pc, #472]	; (80012f0 <adjustingTime_mode+0x2bc>)
 8001118:	fb83 1302 	smull	r1, r3, r3, r2
 800111c:	1099      	asrs	r1, r3, #2
 800111e:	17d3      	asrs	r3, r2, #31
 8001120:	1ac9      	subs	r1, r1, r3
 8001122:	460b      	mov	r3, r1
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	440b      	add	r3, r1
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	1ad1      	subs	r1, r2, r3
 800112c:	b2ca      	uxtb	r2, r1
 800112e:	4b6e      	ldr	r3, [pc, #440]	; (80012e8 <adjustingTime_mode+0x2b4>)
 8001130:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001132:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <adjustingTime_mode+0x2b4>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	2002      	movs	r0, #2
 800113a:	f7ff fa85 	bl	8000648 <ds3231_Write>
		}
		if(button_count[0] == 1) {TMP = min; count_led_flash = 0; displayAdjTime(); }
 800113e:	4b6b      	ldr	r3, [pc, #428]	; (80012ec <adjustingTime_mode+0x2b8>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	f040 82eb 	bne.w	800171e <adjustingTime_mode+0x6ea>
 8001148:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <adjustingTime_mode+0x2ac>)
 800114a:	2202      	movs	r2, #2
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	4b65      	ldr	r3, [pc, #404]	; (80012e4 <adjustingTime_mode+0x2b0>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	f7ff fbaa 	bl	80008ac <displayAdjTime>
		break;
 8001158:	e2e1      	b.n	800171e <adjustingTime_mode+0x6ea>
	case min:
		if(count_led_flash < 10){
 800115a:	4b62      	ldr	r3, [pc, #392]	; (80012e4 <adjustingTime_mode+0x2b0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b09      	cmp	r3, #9
 8001160:	d80e      	bhi.n	8001180 <adjustingTime_mode+0x14c>
			lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8001162:	4b65      	ldr	r3, [pc, #404]	; (80012f8 <adjustingTime_mode+0x2c4>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b29a      	uxth	r2, r3
 8001168:	2318      	movs	r3, #24
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2300      	movs	r3, #0
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2300      	movs	r3, #0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2302      	movs	r3, #2
 8001176:	2164      	movs	r1, #100	; 0x64
 8001178:	206e      	movs	r0, #110	; 0x6e
 800117a:	f000 ff79 	bl	8002070 <lcd_ShowIntNum>
 800117e:	e00e      	b.n	800119e <adjustingTime_mode+0x16a>
		} else lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001180:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <adjustingTime_mode+0x2c4>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b29a      	uxth	r2, r3
 8001186:	2318      	movs	r3, #24
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2300      	movs	r3, #0
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2302      	movs	r3, #2
 8001196:	2164      	movs	r1, #100	; 0x64
 8001198:	206e      	movs	r0, #110	; 0x6e
 800119a:	f000 ff69 	bl	8002070 <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 800119e:	4b53      	ldr	r3, [pc, #332]	; (80012ec <adjustingTime_mode+0x2b8>)
 80011a0:	88db      	ldrh	r3, [r3, #6]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d117      	bne.n	80011d6 <adjustingTime_mode+0x1a2>
			ds3231_min = (ds3231_min + 1) % 60;
 80011a6:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <adjustingTime_mode+0x2c4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	4b53      	ldr	r3, [pc, #332]	; (80012fc <adjustingTime_mode+0x2c8>)
 80011ae:	fb83 1302 	smull	r1, r3, r3, r2
 80011b2:	4413      	add	r3, r2
 80011b4:	1159      	asrs	r1, r3, #5
 80011b6:	17d3      	asrs	r3, r2, #31
 80011b8:	1ac9      	subs	r1, r1, r3
 80011ba:	460b      	mov	r3, r1
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	1a5b      	subs	r3, r3, r1
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	1ad1      	subs	r1, r2, r3
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <adjustingTime_mode+0x2c4>)
 80011c8:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MIN, ds3231_min);
 80011ca:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <adjustingTime_mode+0x2c4>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff fa39 	bl	8000648 <ds3231_Write>
		}
		if (button_count[3] >= 40) flag = 1; else flag = 0;
 80011d6:	4b45      	ldr	r3, [pc, #276]	; (80012ec <adjustingTime_mode+0x2b8>)
 80011d8:	88db      	ldrh	r3, [r3, #6]
 80011da:	2b27      	cmp	r3, #39	; 0x27
 80011dc:	d903      	bls.n	80011e6 <adjustingTime_mode+0x1b2>
 80011de:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <adjustingTime_mode+0x2c0>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e002      	b.n	80011ec <adjustingTime_mode+0x1b8>
 80011e6:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <adjustingTime_mode+0x2c0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
		if (button_count[3] % 4 == 1 && flag == 1) {
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <adjustingTime_mode+0x2b8>)
 80011ee:	88db      	ldrh	r3, [r3, #6]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d11e      	bne.n	8001238 <adjustingTime_mode+0x204>
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <adjustingTime_mode+0x2c0>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d11a      	bne.n	8001238 <adjustingTime_mode+0x204>
			count_led_flash = 11;
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <adjustingTime_mode+0x2b0>)
 8001204:	220b      	movs	r2, #11
 8001206:	701a      	strb	r2, [r3, #0]
			ds3231_min = (ds3231_min + 1) % 60;
 8001208:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <adjustingTime_mode+0x2c4>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <adjustingTime_mode+0x2c8>)
 8001210:	fb83 1302 	smull	r1, r3, r3, r2
 8001214:	4413      	add	r3, r2
 8001216:	1159      	asrs	r1, r3, #5
 8001218:	17d3      	asrs	r3, r2, #31
 800121a:	1ac9      	subs	r1, r1, r3
 800121c:	460b      	mov	r3, r1
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	1a5b      	subs	r3, r3, r1
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	1ad1      	subs	r1, r2, r3
 8001226:	b2ca      	uxtb	r2, r1
 8001228:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <adjustingTime_mode+0x2c4>)
 800122a:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MIN, ds3231_min);
 800122c:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <adjustingTime_mode+0x2c4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff fa08 	bl	8000648 <ds3231_Write>
		}
		if(button_count[0] == 1) {TMP = sec; count_led_flash = 0; displayAdjTime();}
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <adjustingTime_mode+0x2b8>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	f040 8270 	bne.w	8001722 <adjustingTime_mode+0x6ee>
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <adjustingTime_mode+0x2ac>)
 8001244:	2203      	movs	r2, #3
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <adjustingTime_mode+0x2b0>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	f7ff fb2d 	bl	80008ac <displayAdjTime>
		break;
 8001252:	e266      	b.n	8001722 <adjustingTime_mode+0x6ee>
	case sec:
		if(count_led_flash < 10){
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <adjustingTime_mode+0x2b0>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b09      	cmp	r3, #9
 800125a:	d80e      	bhi.n	800127a <adjustingTime_mode+0x246>
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <adjustingTime_mode+0x2cc>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b29a      	uxth	r2, r3
 8001262:	2318      	movs	r3, #24
 8001264:	9302      	str	r3, [sp, #8]
 8001266:	2300      	movs	r3, #0
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2300      	movs	r3, #0
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2302      	movs	r3, #2
 8001270:	2164      	movs	r1, #100	; 0x64
 8001272:	2096      	movs	r0, #150	; 0x96
 8001274:	f000 fefc 	bl	8002070 <lcd_ShowIntNum>
 8001278:	e00e      	b.n	8001298 <adjustingTime_mode+0x264>
		} else lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <adjustingTime_mode+0x2cc>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b29a      	uxth	r2, r3
 8001280:	2318      	movs	r3, #24
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2300      	movs	r3, #0
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2302      	movs	r3, #2
 8001290:	2164      	movs	r1, #100	; 0x64
 8001292:	2096      	movs	r0, #150	; 0x96
 8001294:	f000 feec 	bl	8002070 <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <adjustingTime_mode+0x2b8>)
 800129a:	88db      	ldrh	r3, [r3, #6]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d117      	bne.n	80012d0 <adjustingTime_mode+0x29c>
			ds3231_sec = (ds3231_sec + 1) % 60;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <adjustingTime_mode+0x2cc>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <adjustingTime_mode+0x2c8>)
 80012a8:	fb83 1302 	smull	r1, r3, r3, r2
 80012ac:	4413      	add	r3, r2
 80012ae:	1159      	asrs	r1, r3, #5
 80012b0:	17d3      	asrs	r3, r2, #31
 80012b2:	1ac9      	subs	r1, r1, r3
 80012b4:	460b      	mov	r3, r1
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	1a5b      	subs	r3, r3, r1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	1ad1      	subs	r1, r2, r3
 80012be:	b2ca      	uxtb	r2, r1
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <adjustingTime_mode+0x2cc>)
 80012c2:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_SEC, ds3231_sec);
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <adjustingTime_mode+0x2cc>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff f9bc 	bl	8000648 <ds3231_Write>
		}
		if (button_count[3] >= 40) flag = 1; else flag = 0;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <adjustingTime_mode+0x2b8>)
 80012d2:	88db      	ldrh	r3, [r3, #6]
 80012d4:	2b27      	cmp	r3, #39	; 0x27
 80012d6:	d915      	bls.n	8001304 <adjustingTime_mode+0x2d0>
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <adjustingTime_mode+0x2c0>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	e014      	b.n	800130a <adjustingTime_mode+0x2d6>
 80012e0:	2000003c 	.word	0x2000003c
 80012e4:	2000002b 	.word	0x2000002b
 80012e8:	20000075 	.word	0x20000075
 80012ec:	20000050 	.word	0x20000050
 80012f0:	2aaaaaab 	.word	0x2aaaaaab
 80012f4:	2000002c 	.word	0x2000002c
 80012f8:	20000072 	.word	0x20000072
 80012fc:	88888889 	.word	0x88888889
 8001300:	20000070 	.word	0x20000070
 8001304:	4ba2      	ldr	r3, [pc, #648]	; (8001590 <adjustingTime_mode+0x55c>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
		if (button_count[3] % 4 == 1 && flag == 1) {
 800130a:	4ba2      	ldr	r3, [pc, #648]	; (8001594 <adjustingTime_mode+0x560>)
 800130c:	88db      	ldrh	r3, [r3, #6]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	b29b      	uxth	r3, r3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d11e      	bne.n	8001356 <adjustingTime_mode+0x322>
 8001318:	4b9d      	ldr	r3, [pc, #628]	; (8001590 <adjustingTime_mode+0x55c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d11a      	bne.n	8001356 <adjustingTime_mode+0x322>
			count_led_flash = 11;
 8001320:	4b9d      	ldr	r3, [pc, #628]	; (8001598 <adjustingTime_mode+0x564>)
 8001322:	220b      	movs	r2, #11
 8001324:	701a      	strb	r2, [r3, #0]

			ds3231_sec = (ds3231_sec + 1) % 60;
 8001326:	4b9d      	ldr	r3, [pc, #628]	; (800159c <adjustingTime_mode+0x568>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	4b9c      	ldr	r3, [pc, #624]	; (80015a0 <adjustingTime_mode+0x56c>)
 800132e:	fb83 1302 	smull	r1, r3, r3, r2
 8001332:	4413      	add	r3, r2
 8001334:	1159      	asrs	r1, r3, #5
 8001336:	17d3      	asrs	r3, r2, #31
 8001338:	1ac9      	subs	r1, r1, r3
 800133a:	460b      	mov	r3, r1
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	1a5b      	subs	r3, r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	1ad1      	subs	r1, r2, r3
 8001344:	b2ca      	uxtb	r2, r1
 8001346:	4b95      	ldr	r3, [pc, #596]	; (800159c <adjustingTime_mode+0x568>)
 8001348:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_SEC, ds3231_sec);
 800134a:	4b94      	ldr	r3, [pc, #592]	; (800159c <adjustingTime_mode+0x568>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4619      	mov	r1, r3
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff f979 	bl	8000648 <ds3231_Write>
		}
		if(button_count[0] == 1) {TMP = day; count_led_flash = 0; displayAdjTime();}
 8001356:	4b8f      	ldr	r3, [pc, #572]	; (8001594 <adjustingTime_mode+0x560>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	f040 81e3 	bne.w	8001726 <adjustingTime_mode+0x6f2>
 8001360:	4b90      	ldr	r3, [pc, #576]	; (80015a4 <adjustingTime_mode+0x570>)
 8001362:	2204      	movs	r2, #4
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	4b8c      	ldr	r3, [pc, #560]	; (8001598 <adjustingTime_mode+0x564>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	f7ff fa9e 	bl	80008ac <displayAdjTime>
		break;
 8001370:	e1d9      	b.n	8001726 <adjustingTime_mode+0x6f2>
	case day:
		if(count_led_flash < 10){
 8001372:	4b89      	ldr	r3, [pc, #548]	; (8001598 <adjustingTime_mode+0x564>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b09      	cmp	r3, #9
 8001378:	d81c      	bhi.n	80013b4 <adjustingTime_mode+0x380>
			lcd_ShowIntNum(20, 130, ds3231_day, 2, BLACK, BLACK, 24);
 800137a:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <adjustingTime_mode+0x574>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b29a      	uxth	r2, r3
 8001380:	2318      	movs	r3, #24
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2300      	movs	r3, #0
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	2300      	movs	r3, #0
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2302      	movs	r3, #2
 800138e:	2182      	movs	r1, #130	; 0x82
 8001390:	2014      	movs	r0, #20
 8001392:	f000 fe6d 	bl	8002070 <lcd_ShowIntNum>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 8001396:	4b85      	ldr	r3, [pc, #532]	; (80015ac <adjustingTime_mode+0x578>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b29a      	uxth	r2, r3
 800139c:	2318      	movs	r3, #24
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	2300      	movs	r3, #0
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2300      	movs	r3, #0
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2302      	movs	r3, #2
 80013aa:	2182      	movs	r1, #130	; 0x82
 80013ac:	2046      	movs	r0, #70	; 0x46
 80013ae:	f000 fe5f 	bl	8002070 <lcd_ShowIntNum>
 80013b2:	e01d      	b.n	80013f0 <adjustingTime_mode+0x3bc>
		} else {
			lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80013b4:	4b7c      	ldr	r3, [pc, #496]	; (80015a8 <adjustingTime_mode+0x574>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	2318      	movs	r3, #24
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	2300      	movs	r3, #0
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2302      	movs	r3, #2
 80013ca:	2182      	movs	r1, #130	; 0x82
 80013cc:	2014      	movs	r0, #20
 80013ce:	f000 fe4f 	bl	8002070 <lcd_ShowIntNum>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80013d2:	4b76      	ldr	r3, [pc, #472]	; (80015ac <adjustingTime_mode+0x578>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	2318      	movs	r3, #24
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2300      	movs	r3, #0
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2302      	movs	r3, #2
 80013e8:	2182      	movs	r1, #130	; 0x82
 80013ea:	2046      	movs	r0, #70	; 0x46
 80013ec:	f000 fe40 	bl	8002070 <lcd_ShowIntNum>
		}
		if(button_count[3] == 1) {
 80013f0:	4b68      	ldr	r3, [pc, #416]	; (8001594 <adjustingTime_mode+0x560>)
 80013f2:	88db      	ldrh	r3, [r3, #6]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d12f      	bne.n	8001458 <adjustingTime_mode+0x424>
			ds3231_day = (ds3231_day % 7) + 1;
 80013f8:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <adjustingTime_mode+0x574>)
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <adjustingTime_mode+0x57c>)
 80013fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001402:	1ad1      	subs	r1, r2, r3
 8001404:	0849      	lsrs	r1, r1, #1
 8001406:	440b      	add	r3, r1
 8001408:	0899      	lsrs	r1, r3, #2
 800140a:	460b      	mov	r3, r1
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	1a5b      	subs	r3, r3, r1
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	3301      	adds	r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <adjustingTime_mode+0x574>)
 800141a:	701a      	strb	r2, [r3, #0]
			ds3231_date = (ds3231_date % 30) + 1;
 800141c:	4b63      	ldr	r3, [pc, #396]	; (80015ac <adjustingTime_mode+0x578>)
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	4b5f      	ldr	r3, [pc, #380]	; (80015a0 <adjustingTime_mode+0x56c>)
 8001422:	fba3 1302 	umull	r1, r3, r3, r2
 8001426:	0919      	lsrs	r1, r3, #4
 8001428:	460b      	mov	r3, r1
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	1a5b      	subs	r3, r3, r1
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	3301      	adds	r3, #1
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <adjustingTime_mode+0x578>)
 800143a:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_DAY, ds3231_day + 2);
 800143c:	4b5a      	ldr	r3, [pc, #360]	; (80015a8 <adjustingTime_mode+0x574>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	3302      	adds	r3, #2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	2003      	movs	r0, #3
 8001448:	f7ff f8fe 	bl	8000648 <ds3231_Write>
			ds3231_Write(ADDRESS_DATE, ds3231_date);
 800144c:	4b57      	ldr	r3, [pc, #348]	; (80015ac <adjustingTime_mode+0x578>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	2004      	movs	r0, #4
 8001454:	f7ff f8f8 	bl	8000648 <ds3231_Write>
		}
		if (button_count[3] >= 40) flag = 1; else flag = 0;
 8001458:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <adjustingTime_mode+0x560>)
 800145a:	88db      	ldrh	r3, [r3, #6]
 800145c:	2b27      	cmp	r3, #39	; 0x27
 800145e:	d903      	bls.n	8001468 <adjustingTime_mode+0x434>
 8001460:	4b4b      	ldr	r3, [pc, #300]	; (8001590 <adjustingTime_mode+0x55c>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	e002      	b.n	800146e <adjustingTime_mode+0x43a>
 8001468:	4b49      	ldr	r3, [pc, #292]	; (8001590 <adjustingTime_mode+0x55c>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
		if (button_count[3] % 4 == 1 && flag == 1) {
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <adjustingTime_mode+0x560>)
 8001470:	88db      	ldrh	r3, [r3, #6]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	b29b      	uxth	r3, r3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d136      	bne.n	80014ea <adjustingTime_mode+0x4b6>
 800147c:	4b44      	ldr	r3, [pc, #272]	; (8001590 <adjustingTime_mode+0x55c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d132      	bne.n	80014ea <adjustingTime_mode+0x4b6>
			count_led_flash = 11;
 8001484:	4b44      	ldr	r3, [pc, #272]	; (8001598 <adjustingTime_mode+0x564>)
 8001486:	220b      	movs	r2, #11
 8001488:	701a      	strb	r2, [r3, #0]
			ds3231_day = (ds3231_day % 7) + 1;
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <adjustingTime_mode+0x574>)
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <adjustingTime_mode+0x57c>)
 8001490:	fba3 1302 	umull	r1, r3, r3, r2
 8001494:	1ad1      	subs	r1, r2, r3
 8001496:	0849      	lsrs	r1, r1, #1
 8001498:	440b      	add	r3, r1
 800149a:	0899      	lsrs	r1, r3, #2
 800149c:	460b      	mov	r3, r1
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	1a5b      	subs	r3, r3, r1
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	3301      	adds	r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <adjustingTime_mode+0x574>)
 80014ac:	701a      	strb	r2, [r3, #0]
			ds3231_date = (ds3231_date % 30) + 1;
 80014ae:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <adjustingTime_mode+0x578>)
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <adjustingTime_mode+0x56c>)
 80014b4:	fba3 1302 	umull	r1, r3, r3, r2
 80014b8:	0919      	lsrs	r1, r3, #4
 80014ba:	460b      	mov	r3, r1
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	1a5b      	subs	r3, r3, r1
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b38      	ldr	r3, [pc, #224]	; (80015ac <adjustingTime_mode+0x578>)
 80014cc:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_DAY, ds3231_day + 2);
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <adjustingTime_mode+0x574>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	3302      	adds	r3, #2
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	2003      	movs	r0, #3
 80014da:	f7ff f8b5 	bl	8000648 <ds3231_Write>
			ds3231_Write(ADDRESS_DATE, ds3231_date);
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <adjustingTime_mode+0x578>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	2004      	movs	r0, #4
 80014e6:	f7ff f8af 	bl	8000648 <ds3231_Write>
		}
		if(button_count[0] == 1) {TMP = month; count_led_flash = 0; displayAdjTime();}
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <adjustingTime_mode+0x560>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	f040 811b 	bne.w	800172a <adjustingTime_mode+0x6f6>
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <adjustingTime_mode+0x570>)
 80014f6:	2205      	movs	r2, #5
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	4b27      	ldr	r3, [pc, #156]	; (8001598 <adjustingTime_mode+0x564>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	f7ff f9d4 	bl	80008ac <displayAdjTime>
		break;
 8001504:	e111      	b.n	800172a <adjustingTime_mode+0x6f6>
	case month:
		if(count_led_flash < 10){
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <adjustingTime_mode+0x564>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b09      	cmp	r3, #9
 800150c:	d80e      	bhi.n	800152c <adjustingTime_mode+0x4f8>
			lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <adjustingTime_mode+0x580>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b29a      	uxth	r2, r3
 8001514:	2318      	movs	r3, #24
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	2300      	movs	r3, #0
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	2300      	movs	r3, #0
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2302      	movs	r3, #2
 8001522:	2182      	movs	r1, #130	; 0x82
 8001524:	206e      	movs	r0, #110	; 0x6e
 8001526:	f000 fda3 	bl	8002070 <lcd_ShowIntNum>
 800152a:	e00e      	b.n	800154a <adjustingTime_mode+0x516>
		} else lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <adjustingTime_mode+0x580>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b29a      	uxth	r2, r3
 8001532:	2318      	movs	r3, #24
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	2300      	movs	r3, #0
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2302      	movs	r3, #2
 8001542:	2182      	movs	r1, #130	; 0x82
 8001544:	206e      	movs	r0, #110	; 0x6e
 8001546:	f000 fd93 	bl	8002070 <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <adjustingTime_mode+0x560>)
 800154c:	88db      	ldrh	r3, [r3, #6]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d115      	bne.n	800157e <adjustingTime_mode+0x54a>
			ds3231_month = (ds3231_month % 12) +  1;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <adjustingTime_mode+0x580>)
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <adjustingTime_mode+0x584>)
 8001558:	fba3 1302 	umull	r1, r3, r3, r2
 800155c:	08d9      	lsrs	r1, r3, #3
 800155e:	460b      	mov	r3, r1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	440b      	add	r3, r1
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	3301      	adds	r3, #1
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <adjustingTime_mode+0x580>)
 8001570:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <adjustingTime_mode+0x580>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	2005      	movs	r0, #5
 800157a:	f7ff f865 	bl	8000648 <ds3231_Write>
		}
		if (button_count[3] >= 40) flag = 1; else flag = 0;
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <adjustingTime_mode+0x560>)
 8001580:	88db      	ldrh	r3, [r3, #6]
 8001582:	2b27      	cmp	r3, #39	; 0x27
 8001584:	d91a      	bls.n	80015bc <adjustingTime_mode+0x588>
 8001586:	4b02      	ldr	r3, [pc, #8]	; (8001590 <adjustingTime_mode+0x55c>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	e019      	b.n	80015c2 <adjustingTime_mode+0x58e>
 800158e:	bf00      	nop
 8001590:	2000002c 	.word	0x2000002c
 8001594:	20000050 	.word	0x20000050
 8001598:	2000002b 	.word	0x2000002b
 800159c:	20000070 	.word	0x20000070
 80015a0:	88888889 	.word	0x88888889
 80015a4:	2000003c 	.word	0x2000003c
 80015a8:	20000074 	.word	0x20000074
 80015ac:	20000073 	.word	0x20000073
 80015b0:	24924925 	.word	0x24924925
 80015b4:	20000076 	.word	0x20000076
 80015b8:	aaaaaaab 	.word	0xaaaaaaab
 80015bc:	4b5f      	ldr	r3, [pc, #380]	; (800173c <adjustingTime_mode+0x708>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
		if (button_count[3] % 4 == 1 && flag == 1) {
 80015c2:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <adjustingTime_mode+0x70c>)
 80015c4:	88db      	ldrh	r3, [r3, #6]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d11c      	bne.n	800160a <adjustingTime_mode+0x5d6>
 80015d0:	4b5a      	ldr	r3, [pc, #360]	; (800173c <adjustingTime_mode+0x708>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d118      	bne.n	800160a <adjustingTime_mode+0x5d6>
			count_led_flash = 11;
 80015d8:	4b5a      	ldr	r3, [pc, #360]	; (8001744 <adjustingTime_mode+0x710>)
 80015da:	220b      	movs	r2, #11
 80015dc:	701a      	strb	r2, [r3, #0]
			ds3231_month = (ds3231_month % 12) +  1;
 80015de:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <adjustingTime_mode+0x714>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b5a      	ldr	r3, [pc, #360]	; (800174c <adjustingTime_mode+0x718>)
 80015e4:	fba3 1302 	umull	r1, r3, r3, r2
 80015e8:	08d9      	lsrs	r1, r3, #3
 80015ea:	460b      	mov	r3, r1
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	440b      	add	r3, r1
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b53      	ldr	r3, [pc, #332]	; (8001748 <adjustingTime_mode+0x714>)
 80015fc:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MONTH, ds3231_month);
 80015fe:	4b52      	ldr	r3, [pc, #328]	; (8001748 <adjustingTime_mode+0x714>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4619      	mov	r1, r3
 8001604:	2005      	movs	r0, #5
 8001606:	f7ff f81f 	bl	8000648 <ds3231_Write>
		}
		if(button_count[0] == 1) {TMP = year; count_led_flash = 0; displayAdjTime();}
 800160a:	4b4d      	ldr	r3, [pc, #308]	; (8001740 <adjustingTime_mode+0x70c>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	f040 808d 	bne.w	800172e <adjustingTime_mode+0x6fa>
 8001614:	4b4e      	ldr	r3, [pc, #312]	; (8001750 <adjustingTime_mode+0x71c>)
 8001616:	2206      	movs	r2, #6
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <adjustingTime_mode+0x710>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	f7ff f944 	bl	80008ac <displayAdjTime>
		break;
 8001624:	e083      	b.n	800172e <adjustingTime_mode+0x6fa>
	case year:
		if(count_led_flash < 10){
 8001626:	4b47      	ldr	r3, [pc, #284]	; (8001744 <adjustingTime_mode+0x710>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b09      	cmp	r3, #9
 800162c:	d80e      	bhi.n	800164c <adjustingTime_mode+0x618>
			lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 800162e:	4b49      	ldr	r3, [pc, #292]	; (8001754 <adjustingTime_mode+0x720>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b29a      	uxth	r2, r3
 8001634:	2318      	movs	r3, #24
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2300      	movs	r3, #0
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	2300      	movs	r3, #0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2302      	movs	r3, #2
 8001642:	2182      	movs	r1, #130	; 0x82
 8001644:	2096      	movs	r0, #150	; 0x96
 8001646:	f000 fd13 	bl	8002070 <lcd_ShowIntNum>
 800164a:	e00e      	b.n	800166a <adjustingTime_mode+0x636>
		} else lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 800164c:	4b41      	ldr	r3, [pc, #260]	; (8001754 <adjustingTime_mode+0x720>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b29a      	uxth	r2, r3
 8001652:	2318      	movs	r3, #24
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	2300      	movs	r3, #0
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2302      	movs	r3, #2
 8001662:	2182      	movs	r1, #130	; 0x82
 8001664:	2096      	movs	r0, #150	; 0x96
 8001666:	f000 fd03 	bl	8002070 <lcd_ShowIntNum>
		if(button_count[3] == 1) {
 800166a:	4b35      	ldr	r3, [pc, #212]	; (8001740 <adjustingTime_mode+0x70c>)
 800166c:	88db      	ldrh	r3, [r3, #6]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d116      	bne.n	80016a0 <adjustingTime_mode+0x66c>
			ds3231_year = (ds3231_year % 99) +  1;
 8001672:	4b38      	ldr	r3, [pc, #224]	; (8001754 <adjustingTime_mode+0x720>)
 8001674:	781a      	ldrb	r2, [r3, #0]
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <adjustingTime_mode+0x724>)
 8001678:	fba3 1302 	umull	r1, r3, r3, r2
 800167c:	0999      	lsrs	r1, r3, #6
 800167e:	460b      	mov	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	440b      	add	r3, r1
 8001684:	0159      	lsls	r1, r3, #5
 8001686:	440b      	add	r3, r1
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b30      	ldr	r3, [pc, #192]	; (8001754 <adjustingTime_mode+0x720>)
 8001692:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_YEAR, ds3231_year);
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <adjustingTime_mode+0x720>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	2006      	movs	r0, #6
 800169c:	f7fe ffd4 	bl	8000648 <ds3231_Write>
		}
		if (button_count[3] >= 40) flag = 1; else flag = 0;
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <adjustingTime_mode+0x70c>)
 80016a2:	88db      	ldrh	r3, [r3, #6]
 80016a4:	2b27      	cmp	r3, #39	; 0x27
 80016a6:	d903      	bls.n	80016b0 <adjustingTime_mode+0x67c>
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <adjustingTime_mode+0x708>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e002      	b.n	80016b6 <adjustingTime_mode+0x682>
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <adjustingTime_mode+0x708>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
		if (button_count[3] % 4 == 1 && flag == 1) {
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <adjustingTime_mode+0x70c>)
 80016b8:	88db      	ldrh	r3, [r3, #6]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d11d      	bne.n	8001700 <adjustingTime_mode+0x6cc>
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <adjustingTime_mode+0x708>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d119      	bne.n	8001700 <adjustingTime_mode+0x6cc>
			count_led_flash = 11;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <adjustingTime_mode+0x710>)
 80016ce:	220b      	movs	r2, #11
 80016d0:	701a      	strb	r2, [r3, #0]
			ds3231_year = (ds3231_year % 99) +  1;
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <adjustingTime_mode+0x720>)
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <adjustingTime_mode+0x724>)
 80016d8:	fba3 1302 	umull	r1, r3, r3, r2
 80016dc:	0999      	lsrs	r1, r3, #6
 80016de:	460b      	mov	r3, r1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	440b      	add	r3, r1
 80016e4:	0159      	lsls	r1, r3, #5
 80016e6:	440b      	add	r3, r1
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <adjustingTime_mode+0x720>)
 80016f2:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_YEAR, ds3231_year);
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <adjustingTime_mode+0x720>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	2006      	movs	r0, #6
 80016fc:	f7fe ffa4 	bl	8000648 <ds3231_Write>
		}
		if(button_count[0] == 1) {TMP = hour; count_led_flash = 0; displayAdjTime();}
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <adjustingTime_mode+0x70c>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d114      	bne.n	8001732 <adjustingTime_mode+0x6fe>
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <adjustingTime_mode+0x71c>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <adjustingTime_mode+0x710>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	f7ff f8ca 	bl	80008ac <displayAdjTime>
		break;
 8001718:	e00b      	b.n	8001732 <adjustingTime_mode+0x6fe>
	default:
		break;
 800171a:	bf00      	nop
 800171c:	e00a      	b.n	8001734 <adjustingTime_mode+0x700>
		break;
 800171e:	bf00      	nop
 8001720:	e008      	b.n	8001734 <adjustingTime_mode+0x700>
		break;
 8001722:	bf00      	nop
 8001724:	e006      	b.n	8001734 <adjustingTime_mode+0x700>
		break;
 8001726:	bf00      	nop
 8001728:	e004      	b.n	8001734 <adjustingTime_mode+0x700>
		break;
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <adjustingTime_mode+0x700>
		break;
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <adjustingTime_mode+0x700>
		break;
 8001732:	bf00      	nop
	}
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000002c 	.word	0x2000002c
 8001740:	20000050 	.word	0x20000050
 8001744:	2000002b 	.word	0x2000002b
 8001748:	20000076 	.word	0x20000076
 800174c:	aaaaaaab 	.word	0xaaaaaaab
 8001750:	2000003c 	.word	0x2000003c
 8001754:	20000071 	.word	0x20000071
 8001758:	a57eb503 	.word	0xa57eb503

0800175c <fsm_run>:

void  fsm_run(){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	switch(status){
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <fsm_run+0xa4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3b01      	subs	r3, #1
 8001766:	2b03      	cmp	r3, #3
 8001768:	d841      	bhi.n	80017ee <fsm_run+0x92>
 800176a:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <fsm_run+0x14>)
 800176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001770:	08001781 	.word	0x08001781
 8001774:	0800178d 	.word	0x0800178d
 8001778:	080017b1 	.word	0x080017b1
 800177c:	080017d1 	.word	0x080017d1
	case INIT:
		updateTime();
 8001780:	f7fe ffe8 	bl	8000754 <updateTime>
//		testAlarm();       setup for arlam testing
		status = MODE1;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <fsm_run+0xa4>)
 8001786:	2202      	movs	r2, #2
 8001788:	601a      	str	r2, [r3, #0]
		break;
 800178a:	e037      	b.n	80017fc <fsm_run+0xa0>
	case MODE1: //done and running
		alarm();
 800178c:	f7ff fb98 	bl	8000ec0 <alarm>
		if(button_count[14] == 1) {
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <fsm_run+0xa8>)
 8001792:	8b9b      	ldrh	r3, [r3, #28]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d12c      	bne.n	80017f2 <fsm_run+0x96>
			lcd_Clear(BLACK);
 8001798:	2000      	movs	r0, #0
 800179a:	f000 faf5 	bl	8001d88 <lcd_Clear>
			status = MODE2;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <fsm_run+0xa4>)
 80017a0:	2203      	movs	r2, #3
 80017a2:	601a      	str	r2, [r3, #0]
			TMP = hour;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <fsm_run+0xac>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
			displayAdjTime();
 80017aa:	f7ff f87f 	bl	80008ac <displayAdjTime>
		}
		break;
 80017ae:	e020      	b.n	80017f2 <fsm_run+0x96>
	case MODE2: //done and running
		adjustingTime_mode();
 80017b0:	f7ff fc40 	bl	8001034 <adjustingTime_mode>
		if(button_count[14] == 1) {
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <fsm_run+0xa8>)
 80017b6:	8b9b      	ldrh	r3, [r3, #28]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d11c      	bne.n	80017f6 <fsm_run+0x9a>
			status = MODE3;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <fsm_run+0xa4>)
 80017be:	2204      	movs	r2, #4
 80017c0:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 fae0 	bl	8001d88 <lcd_Clear>
			TIMER = init;
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <fsm_run+0xb0>)
 80017ca:	2205      	movs	r2, #5
 80017cc:	601a      	str	r2, [r3, #0]
		}
		break;
 80017ce:	e012      	b.n	80017f6 <fsm_run+0x9a>
	case MODE3: //done and running
		timer_mode();
 80017d0:	f7ff f976 	bl	8000ac0 <timer_mode>
		if(button_count[14] == 1) {
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <fsm_run+0xa8>)
 80017d6:	8b9b      	ldrh	r3, [r3, #28]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10e      	bne.n	80017fa <fsm_run+0x9e>
			status = MODE1;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <fsm_run+0xa4>)
 80017de:	2202      	movs	r2, #2
 80017e0:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 fad0 	bl	8001d88 <lcd_Clear>
			clockTime();
 80017e8:	f7ff f946 	bl	8000a78 <clockTime>
		}
		break;
 80017ec:	e005      	b.n	80017fa <fsm_run+0x9e>
	default:
		break;
 80017ee:	bf00      	nop
 80017f0:	e004      	b.n	80017fc <fsm_run+0xa0>
		break;
 80017f2:	bf00      	nop
 80017f4:	e002      	b.n	80017fc <fsm_run+0xa0>
		break;
 80017f6:	bf00      	nop
 80017f8:	e000      	b.n	80017fc <fsm_run+0xa0>
		break;
 80017fa:	bf00      	nop
	}
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000038 	.word	0x20000038
 8001804:	20000050 	.word	0x20000050
 8001808:	2000003c 	.word	0x2000003c
 800180c:	20000040 	.word	0x20000040

08001810 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	; 0x38
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800182a:	463b      	mov	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	615a      	str	r2, [r3, #20]
 800183a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <MX_FSMC_Init+0xec>)
 800183e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001842:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <MX_FSMC_Init+0xec>)
 8001846:	4a2e      	ldr	r2, [pc, #184]	; (8001900 <MX_FSMC_Init+0xf0>)
 8001848:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <MX_FSMC_Init+0xec>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <MX_FSMC_Init+0xec>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <MX_FSMC_Init+0xec>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <MX_FSMC_Init+0xec>)
 800185e:	2210      	movs	r2, #16
 8001860:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <MX_FSMC_Init+0xec>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <MX_FSMC_Init+0xec>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <MX_FSMC_Init+0xec>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <MX_FSMC_Init+0xec>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <MX_FSMC_Init+0xec>)
 800187c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <MX_FSMC_Init+0xec>)
 8001884:	2200      	movs	r2, #0
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <MX_FSMC_Init+0xec>)
 800188a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <MX_FSMC_Init+0xec>)
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_FSMC_Init+0xec>)
 8001898:	2200      	movs	r2, #0
 800189a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <MX_FSMC_Init+0xec>)
 800189e:	2200      	movs	r2, #0
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80018a2:	230f      	movs	r3, #15
 80018a4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80018a6:	230f      	movs	r3, #15
 80018a8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80018aa:	233c      	movs	r3, #60	; 0x3c
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80018b2:	2310      	movs	r3, #16
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80018b6:	2311      	movs	r3, #17
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80018be:	2308      	movs	r3, #8
 80018c0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80018c2:	230f      	movs	r3, #15
 80018c4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80018c6:	2309      	movs	r3, #9
 80018c8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80018ce:	2310      	movs	r3, #16
 80018d0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80018d2:	2311      	movs	r3, #17
 80018d4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80018da:	463a      	mov	r2, r7
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <MX_FSMC_Init+0xec>)
 80018e4:	f004 f808 	bl	80058f8 <HAL_SRAM_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80018ee:	f000 ff89 	bl	8002804 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80018f2:	bf00      	nop
 80018f4:	3738      	adds	r7, #56	; 0x38
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000080 	.word	0x20000080
 8001900:	a0000104 	.word	0xa0000104

08001904 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_FSMC_MspInit+0x88>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d131      	bne.n	8001984 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_FSMC_MspInit+0x88>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_FSMC_MspInit+0x8c>)
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_FSMC_MspInit+0x8c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6393      	str	r3, [r2, #56]	; 0x38
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_FSMC_MspInit+0x8c>)
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001942:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001946:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001954:	230c      	movs	r3, #12
 8001956:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4619      	mov	r1, r3
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <HAL_FSMC_MspInit+0x90>)
 800195e:	f001 fc47 	bl	80031f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001962:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001966:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001974:	230c      	movs	r3, #12
 8001976:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <HAL_FSMC_MspInit+0x94>)
 800197e:	f001 fc37 	bl	80031f0 <HAL_GPIO_Init>
 8001982:	e000      	b.n	8001986 <HAL_FSMC_MspInit+0x82>
    return;
 8001984:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000034 	.word	0x20000034
 8001990:	40023800 	.word	0x40023800
 8001994:	40021000 	.word	0x40021000
 8001998:	40020c00 	.word	0x40020c00

0800199c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80019a4:	f7ff ffae 	bl	8001904 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	; 0x30
 80019b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a6e      	ldr	r2, [pc, #440]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 80019d0:	f043 0310 	orr.w	r3, r3, #16
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b6c      	ldr	r3, [pc, #432]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	4b68      	ldr	r3, [pc, #416]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a67      	ldr	r2, [pc, #412]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b61      	ldr	r3, [pc, #388]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a60      	ldr	r2, [pc, #384]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b5e      	ldr	r3, [pc, #376]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a59      	ldr	r2, [pc, #356]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a4b      	ldr	r2, [pc, #300]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	603b      	str	r3, [r7, #0]
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a44      	ldr	r2, [pc, #272]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <MX_GPIO_Init+0x1d8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2170      	movs	r1, #112	; 0x70
 8001a8e:	483f      	ldr	r0, [pc, #252]	; (8001b8c <MX_GPIO_Init+0x1dc>)
 8001a90:	f001 fd4a 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9a:	483d      	ldr	r0, [pc, #244]	; (8001b90 <MX_GPIO_Init+0x1e0>)
 8001a9c:	f001 fd44 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	483b      	ldr	r0, [pc, #236]	; (8001b94 <MX_GPIO_Init+0x1e4>)
 8001aa6:	f001 fd3f 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab0:	4839      	ldr	r0, [pc, #228]	; (8001b98 <MX_GPIO_Init+0x1e8>)
 8001ab2:	f001 fd39 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2108      	movs	r1, #8
 8001aba:	4838      	ldr	r0, [pc, #224]	; (8001b9c <MX_GPIO_Init+0x1ec>)
 8001abc:	f001 fd34 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001ac0:	2370      	movs	r3, #112	; 0x70
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	482d      	ldr	r0, [pc, #180]	; (8001b8c <MX_GPIO_Init+0x1dc>)
 8001ad8:	f001 fb8a 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	4826      	ldr	r0, [pc, #152]	; (8001b90 <MX_GPIO_Init+0x1e0>)
 8001af6:	f001 fb7b 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001afa:	23c0      	movs	r3, #192	; 0xc0
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4822      	ldr	r0, [pc, #136]	; (8001b98 <MX_GPIO_Init+0x1e8>)
 8001b0e:	f001 fb6f 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001b12:	2330      	movs	r3, #48	; 0x30
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	481a      	ldr	r0, [pc, #104]	; (8001b90 <MX_GPIO_Init+0x1e0>)
 8001b26:	f001 fb63 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001b2a:	2340      	movs	r3, #64	; 0x40
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4814      	ldr	r0, [pc, #80]	; (8001b94 <MX_GPIO_Init+0x1e4>)
 8001b42:	f001 fb55 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480e      	ldr	r0, [pc, #56]	; (8001b98 <MX_GPIO_Init+0x1e8>)
 8001b60:	f001 fb46 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001b64:	2308      	movs	r3, #8
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4808      	ldr	r0, [pc, #32]	; (8001b9c <MX_GPIO_Init+0x1ec>)
 8001b7c:	f001 fb38 	bl	80031f0 <HAL_GPIO_Init>

}
 8001b80:	bf00      	nop
 8001b82:	3730      	adds	r7, #48	; 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020c00 	.word	0x40020c00

08001ba0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <MX_I2C1_Init+0x50>)
 8001ba6:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <MX_I2C1_Init+0x54>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_I2C1_Init+0x50>)
 8001bac:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <MX_I2C1_Init+0x58>)
 8001bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_I2C1_Init+0x50>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <MX_I2C1_Init+0x50>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_I2C1_Init+0x50>)
 8001bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <MX_I2C1_Init+0x50>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_I2C1_Init+0x50>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <MX_I2C1_Init+0x50>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_I2C1_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <MX_I2C1_Init+0x50>)
 8001bde:	f001 fcbd 	bl	800355c <HAL_I2C_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001be8:	f000 fe0c 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200000d0 	.word	0x200000d0
 8001bf4:	40005400 	.word	0x40005400
 8001bf8:	000186a0 	.word	0x000186a0

08001bfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_I2C_MspInit+0x84>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d12b      	bne.n	8001c76 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c3a:	23c0      	movs	r3, #192	; 0xc0
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3e:	2312      	movs	r3, #18
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	480c      	ldr	r0, [pc, #48]	; (8001c88 <HAL_I2C_MspInit+0x8c>)
 8001c56:	f001 facb 	bl	80031f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40005400 	.word	0x40005400
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020400 	.word	0x40020400

08001c8c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <LCD_WR_REG+0x1c>)
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	8013      	strh	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	600ffffe 	.word	0x600ffffe

08001cac <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <LCD_WR_DATA+0x1c>)
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	8053      	strh	r3, [r2, #2]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	600ffffe 	.word	0x600ffffe

08001ccc <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <LCD_RD_DATA+0x20>)
 8001cd4:	885b      	ldrh	r3, [r3, #2]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	b29b      	uxth	r3, r3
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	600ffffe 	.word	0x600ffffe

08001cf0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	80fb      	strh	r3, [r7, #6]
 8001d02:	4603      	mov	r3, r0
 8001d04:	80bb      	strh	r3, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	807b      	strh	r3, [r7, #2]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001d0e:	202a      	movs	r0, #42	; 0x2a
 8001d10:	f7ff ffbc 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ffc6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ffc0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ffba 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ffb4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001d44:	202b      	movs	r0, #43	; 0x2b
 8001d46:	f7ff ffa1 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001d4a:	88bb      	ldrh	r3, [r7, #4]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ffab 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ffa5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001d62:	883b      	ldrh	r3, [r7, #0]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff9f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001d6e:	883b      	ldrh	r3, [r7, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff99 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001d7a:	202c      	movs	r0, #44	; 0x2c
 8001d7c:	f7ff ff86 	bl	8001c8c <LCD_WR_REG>
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}

08001d88 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <lcd_Clear+0x70>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <lcd_Clear+0x70>)
 8001dac:	885b      	ldrh	r3, [r3, #2]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2100      	movs	r1, #0
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff ff9b 	bl	8001cf0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	81fb      	strh	r3, [r7, #14]
 8001dbe:	e011      	b.n	8001de4 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	81bb      	strh	r3, [r7, #12]
 8001dc4:	e006      	b.n	8001dd4 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff6f 	bl	8001cac <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001dce:	89bb      	ldrh	r3, [r7, #12]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	81bb      	strh	r3, [r7, #12]
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <lcd_Clear+0x70>)
 8001dd6:	885b      	ldrh	r3, [r3, #2]
 8001dd8:	89ba      	ldrh	r2, [r7, #12]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d3f3      	bcc.n	8001dc6 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	3301      	adds	r3, #1
 8001de2:	81fb      	strh	r3, [r7, #14]
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <lcd_Clear+0x70>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	89fa      	ldrh	r2, [r7, #14]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d3e8      	bcc.n	8001dc0 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000124 	.word	0x20000124

08001dfc <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4604      	mov	r4, r0
 8001e04:	4608      	mov	r0, r1
 8001e06:	4611      	mov	r1, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	80fb      	strh	r3, [r7, #6]
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80bb      	strh	r3, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	807b      	strh	r3, [r7, #2]
 8001e16:	4613      	mov	r3, r2
 8001e18:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	883b      	ldrh	r3, [r7, #0]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	88b9      	ldrh	r1, [r7, #4]
 8001e28:	88f8      	ldrh	r0, [r7, #6]
 8001e2a:	f7ff ff61 	bl	8001cf0 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001e2e:	88bb      	ldrh	r3, [r7, #4]
 8001e30:	81fb      	strh	r3, [r7, #14]
 8001e32:	e010      	b.n	8001e56 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	81bb      	strh	r3, [r7, #12]
 8001e38:	e006      	b.n	8001e48 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001e3a:	8c3b      	ldrh	r3, [r7, #32]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff35 	bl	8001cac <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001e42:	89bb      	ldrh	r3, [r7, #12]
 8001e44:	3301      	adds	r3, #1
 8001e46:	81bb      	strh	r3, [r7, #12]
 8001e48:	89ba      	ldrh	r2, [r7, #12]
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d3f4      	bcc.n	8001e3a <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001e50:	89fb      	ldrh	r3, [r7, #14]
 8001e52:	3301      	adds	r3, #1
 8001e54:	81fb      	strh	r3, [r7, #14]
 8001e56:	89fa      	ldrh	r2, [r7, #14]
 8001e58:	883b      	ldrh	r3, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d3ea      	bcc.n	8001e34 <lcd_Fill+0x38>
		}
	}
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}

08001e68 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
 8001e72:	460b      	mov	r3, r1
 8001e74:	80bb      	strh	r3, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001e7a:	88bb      	ldrh	r3, [r7, #4]
 8001e7c:	88fa      	ldrh	r2, [r7, #6]
 8001e7e:	88b9      	ldrh	r1, [r7, #4]
 8001e80:	88f8      	ldrh	r0, [r7, #6]
 8001e82:	f7ff ff35 	bl	8001cf0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff0f 	bl	8001cac <LCD_WR_DATA>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4623      	mov	r3, r4
 8001ea8:	80fb      	strh	r3, [r7, #6]
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80bb      	strh	r3, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	70fb      	strb	r3, [r7, #3]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001ebe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	08db      	lsrs	r3, r3, #3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	fb12 f303 	smulbb	r3, r2, r3
 8001eee:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	3b20      	subs	r3, #32
 8001ef4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	4413      	add	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29c      	uxth	r4, r3
 8001f04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	88bb      	ldrh	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	88b9      	ldrh	r1, [r7, #4]
 8001f16:	88f8      	ldrh	r0, [r7, #6]
 8001f18:	4622      	mov	r2, r4
 8001f1a:	f7ff fee9 	bl	8001cf0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	827b      	strh	r3, [r7, #18]
 8001f22:	e07a      	b.n	800201a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001f24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f28:	2b0c      	cmp	r3, #12
 8001f2a:	d028      	beq.n	8001f7e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001f2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d108      	bne.n	8001f46 <lcd_ShowChar+0xae>
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	8a7b      	ldrh	r3, [r7, #18]
 8001f38:	493c      	ldr	r1, [pc, #240]	; (800202c <lcd_ShowChar+0x194>)
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	440a      	add	r2, r1
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	75fb      	strb	r3, [r7, #23]
 8001f44:	e01b      	b.n	8001f7e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8001f46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f4a:	2b18      	cmp	r3, #24
 8001f4c:	d10b      	bne.n	8001f66 <lcd_ShowChar+0xce>
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	8a79      	ldrh	r1, [r7, #18]
 8001f52:	4837      	ldr	r0, [pc, #220]	; (8002030 <lcd_ShowChar+0x198>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4403      	add	r3, r0
 8001f5e:	440b      	add	r3, r1
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	75fb      	strb	r3, [r7, #23]
 8001f64:	e00b      	b.n	8001f7e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8001f66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d15a      	bne.n	8002024 <lcd_ShowChar+0x18c>
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	8a7b      	ldrh	r3, [r7, #18]
 8001f72:	4930      	ldr	r1, [pc, #192]	; (8002034 <lcd_ShowChar+0x19c>)
 8001f74:	0192      	lsls	r2, r2, #6
 8001f76:	440a      	add	r2, r1
 8001f78:	4413      	add	r3, r2
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75bb      	strb	r3, [r7, #22]
 8001f82:	e044      	b.n	800200e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001f84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d120      	bne.n	8001fce <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001f8c:	7dfa      	ldrb	r2, [r7, #23]
 8001f8e:	7dbb      	ldrb	r3, [r7, #22]
 8001f90:	fa42 f303 	asr.w	r3, r2, r3
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d004      	beq.n	8001fa6 <lcd_ShowChar+0x10e>
 8001f9c:	883b      	ldrh	r3, [r7, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe84 	bl	8001cac <LCD_WR_DATA>
 8001fa4:	e003      	b.n	8001fae <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001fa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fe7f 	bl	8001cac <LCD_WR_DATA>
				m++;
 8001fae:	7d7b      	ldrb	r3, [r7, #21]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001fb4:	7d7b      	ldrb	r3, [r7, #21]
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fbc:	fb02 f201 	mul.w	r2, r2, r1
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d11f      	bne.n	8002008 <lcd_ShowChar+0x170>
				{
					m=0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	757b      	strb	r3, [r7, #21]
					break;
 8001fcc:	e022      	b.n	8002014 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001fce:	7dfa      	ldrb	r2, [r7, #23]
 8001fd0:	7dbb      	ldrb	r3, [r7, #22]
 8001fd2:	fa42 f303 	asr.w	r3, r2, r3
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <lcd_ShowChar+0x152>
 8001fde:	883a      	ldrh	r2, [r7, #0]
 8001fe0:	88b9      	ldrh	r1, [r7, #4]
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff3f 	bl	8001e68 <lcd_DrawPoint>
				x++;
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	3301      	adds	r3, #1
 8001fee:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001ff0:	88fa      	ldrh	r2, [r7, #6]
 8001ff2:	8a3b      	ldrh	r3, [r7, #16]
 8001ff4:	1ad2      	subs	r2, r2, r3
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d105      	bne.n	8002008 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001ffc:	8a3b      	ldrh	r3, [r7, #16]
 8001ffe:	80fb      	strh	r3, [r7, #6]
					y++;
 8002000:	88bb      	ldrh	r3, [r7, #4]
 8002002:	3301      	adds	r3, #1
 8002004:	80bb      	strh	r3, [r7, #4]
					break;
 8002006:	e005      	b.n	8002014 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002008:	7dbb      	ldrb	r3, [r7, #22]
 800200a:	3301      	adds	r3, #1
 800200c:	75bb      	strb	r3, [r7, #22]
 800200e:	7dbb      	ldrb	r3, [r7, #22]
 8002010:	2b07      	cmp	r3, #7
 8002012:	d9b7      	bls.n	8001f84 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002014:	8a7b      	ldrh	r3, [r7, #18]
 8002016:	3301      	adds	r3, #1
 8002018:	827b      	strh	r3, [r7, #18]
 800201a:	8a7a      	ldrh	r2, [r7, #18]
 800201c:	89bb      	ldrh	r3, [r7, #12]
 800201e:	429a      	cmp	r2, r3
 8002020:	d380      	bcc.n	8001f24 <lcd_ShowChar+0x8c>
 8002022:	e000      	b.n	8002026 <lcd_ShowChar+0x18e>
		else return;
 8002024:	bf00      	nop
				}
			}
		}
	}
}
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd90      	pop	{r4, r7, pc}
 800202c:	080071a4 	.word	0x080071a4
 8002030:	08007794 	.word	0x08007794
 8002034:	08008964 	.word	0x08008964

08002038 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	460a      	mov	r2, r1
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	4613      	mov	r3, r2
 8002046:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002048:	2301      	movs	r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800204c:	e004      	b.n	8002058 <mypow+0x20>
 800204e:	79fa      	ldrb	r2, [r7, #7]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	79bb      	ldrb	r3, [r7, #6]
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	71ba      	strb	r2, [r7, #6]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f5      	bne.n	800204e <mypow+0x16>
	return result;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af04      	add	r7, sp, #16
 8002076:	4604      	mov	r4, r0
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
 800207c:	461a      	mov	r2, r3
 800207e:	4623      	mov	r3, r4
 8002080:	80fb      	strh	r3, [r7, #6]
 8002082:	4603      	mov	r3, r0
 8002084:	80bb      	strh	r3, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	807b      	strh	r3, [r7, #2]
 800208a:	4613      	mov	r3, r2
 800208c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800208e:	2300      	movs	r3, #0
 8002090:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8002092:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	e059      	b.n	8002154 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80020a0:	887c      	ldrh	r4, [r7, #2]
 80020a2:	787a      	ldrb	r2, [r7, #1]
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	200a      	movs	r0, #10
 80020b2:	f7ff ffc1 	bl	8002038 <mypow>
 80020b6:	4603      	mov	r3, r0
 80020b8:	fbb4 f1f3 	udiv	r1, r4, r3
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <lcd_ShowIntNum+0xf8>)
 80020be:	fba3 2301 	umull	r2, r3, r3, r1
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	1aca      	subs	r2, r1, r3
 80020ce:	4613      	mov	r3, r2
 80020d0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80020d2:	7bbb      	ldrb	r3, [r7, #14]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d121      	bne.n	800211c <lcd_ShowIntNum+0xac>
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	787b      	ldrb	r3, [r7, #1]
 80020dc:	3b01      	subs	r3, #1
 80020de:	429a      	cmp	r2, r3
 80020e0:	da1c      	bge.n	800211c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80020e2:	7b3b      	ldrb	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d117      	bne.n	8002118 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	7b7b      	ldrb	r3, [r7, #13]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	fb12 f303 	smulbb	r3, r2, r3
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4413      	add	r3, r2
 80020fa:	b298      	uxth	r0, r3
 80020fc:	8c3a      	ldrh	r2, [r7, #32]
 80020fe:	88b9      	ldrh	r1, [r7, #4]
 8002100:	2300      	movs	r3, #0
 8002102:	9302      	str	r3, [sp, #8]
 8002104:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	2220      	movs	r2, #32
 8002112:	f7ff fec1 	bl	8001e98 <lcd_ShowChar>
				continue;
 8002116:	e01a      	b.n	800214e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002118:	2301      	movs	r3, #1
 800211a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	b29a      	uxth	r2, r3
 8002120:	7b7b      	ldrb	r3, [r7, #13]
 8002122:	b29b      	uxth	r3, r3
 8002124:	fb12 f303 	smulbb	r3, r2, r3
 8002128:	b29a      	uxth	r2, r3
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	4413      	add	r3, r2
 800212e:	b298      	uxth	r0, r3
 8002130:	7b3b      	ldrb	r3, [r7, #12]
 8002132:	3330      	adds	r3, #48	; 0x30
 8002134:	b2da      	uxtb	r2, r3
 8002136:	8c3c      	ldrh	r4, [r7, #32]
 8002138:	88b9      	ldrh	r1, [r7, #4]
 800213a:	2300      	movs	r3, #0
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	4623      	mov	r3, r4
 800214a:	f7ff fea5 	bl	8001e98 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	3301      	adds	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	787b      	ldrb	r3, [r7, #1]
 8002158:	429a      	cmp	r2, r3
 800215a:	d3a1      	bcc.n	80020a0 <lcd_ShowIntNum+0x30>
	}
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	cccccccd 	.word	0xcccccccd

0800216c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <lcd_SetDir+0x44>)
 8002188:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800218c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <lcd_SetDir+0x44>)
 8002190:	22f0      	movs	r2, #240	; 0xf0
 8002192:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002194:	e006      	b.n	80021a4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <lcd_SetDir+0x44>)
 8002198:	22f0      	movs	r2, #240	; 0xf0
 800219a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <lcd_SetDir+0x44>)
 800219e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021a2:	805a      	strh	r2, [r3, #2]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	20000124 	.word	0x20000124

080021b4 <lcd_init>:


void lcd_init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80021b8:	2200      	movs	r2, #0
 80021ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021be:	48aa      	ldr	r0, [pc, #680]	; (8002468 <lcd_init+0x2b4>)
 80021c0:	f001 f9b2 	bl	8003528 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80021c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021c8:	f000 fe4a 	bl	8002e60 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d2:	48a5      	ldr	r0, [pc, #660]	; (8002468 <lcd_init+0x2b4>)
 80021d4:	f001 f9a8 	bl	8003528 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80021d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021dc:	f000 fe40 	bl	8002e60 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff ffc3 	bl	800216c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80021e6:	20d3      	movs	r0, #211	; 0xd3
 80021e8:	f7ff fd50 	bl	8001c8c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80021ec:	f7ff fd6e 	bl	8001ccc <LCD_RD_DATA>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b9d      	ldr	r3, [pc, #628]	; (800246c <lcd_init+0x2b8>)
 80021f6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80021f8:	f7ff fd68 	bl	8001ccc <LCD_RD_DATA>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	4b9a      	ldr	r3, [pc, #616]	; (800246c <lcd_init+0x2b8>)
 8002202:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002204:	f7ff fd62 	bl	8001ccc <LCD_RD_DATA>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	4b97      	ldr	r3, [pc, #604]	; (800246c <lcd_init+0x2b8>)
 800220e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002210:	4b96      	ldr	r3, [pc, #600]	; (800246c <lcd_init+0x2b8>)
 8002212:	889b      	ldrh	r3, [r3, #4]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	b29a      	uxth	r2, r3
 8002218:	4b94      	ldr	r3, [pc, #592]	; (800246c <lcd_init+0x2b8>)
 800221a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800221c:	f7ff fd56 	bl	8001ccc <LCD_RD_DATA>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	4b91      	ldr	r3, [pc, #580]	; (800246c <lcd_init+0x2b8>)
 8002226:	889b      	ldrh	r3, [r3, #4]
 8002228:	4313      	orrs	r3, r2
 800222a:	b29a      	uxth	r2, r3
 800222c:	4b8f      	ldr	r3, [pc, #572]	; (800246c <lcd_init+0x2b8>)
 800222e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002230:	20cf      	movs	r0, #207	; 0xcf
 8002232:	f7ff fd2b 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff fd38 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800223c:	20c1      	movs	r0, #193	; 0xc1
 800223e:	f7ff fd35 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002242:	2030      	movs	r0, #48	; 0x30
 8002244:	f7ff fd32 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002248:	20ed      	movs	r0, #237	; 0xed
 800224a:	f7ff fd1f 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800224e:	2064      	movs	r0, #100	; 0x64
 8002250:	f7ff fd2c 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002254:	2003      	movs	r0, #3
 8002256:	f7ff fd29 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800225a:	2012      	movs	r0, #18
 800225c:	f7ff fd26 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002260:	2081      	movs	r0, #129	; 0x81
 8002262:	f7ff fd23 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002266:	20e8      	movs	r0, #232	; 0xe8
 8002268:	f7ff fd10 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800226c:	2085      	movs	r0, #133	; 0x85
 800226e:	f7ff fd1d 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002272:	2010      	movs	r0, #16
 8002274:	f7ff fd1a 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002278:	207a      	movs	r0, #122	; 0x7a
 800227a:	f7ff fd17 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800227e:	20cb      	movs	r0, #203	; 0xcb
 8002280:	f7ff fd04 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002284:	2039      	movs	r0, #57	; 0x39
 8002286:	f7ff fd11 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800228a:	202c      	movs	r0, #44	; 0x2c
 800228c:	f7ff fd0e 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002290:	2000      	movs	r0, #0
 8002292:	f7ff fd0b 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002296:	2034      	movs	r0, #52	; 0x34
 8002298:	f7ff fd08 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800229c:	2002      	movs	r0, #2
 800229e:	f7ff fd05 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80022a2:	20f7      	movs	r0, #247	; 0xf7
 80022a4:	f7ff fcf2 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80022a8:	2020      	movs	r0, #32
 80022aa:	f7ff fcff 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80022ae:	20ea      	movs	r0, #234	; 0xea
 80022b0:	f7ff fcec 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7ff fcf9 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7ff fcf6 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80022c0:	20c0      	movs	r0, #192	; 0xc0
 80022c2:	f7ff fce3 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80022c6:	201b      	movs	r0, #27
 80022c8:	f7ff fcf0 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80022cc:	20c1      	movs	r0, #193	; 0xc1
 80022ce:	f7ff fcdd 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80022d2:	2001      	movs	r0, #1
 80022d4:	f7ff fcea 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80022d8:	20c5      	movs	r0, #197	; 0xc5
 80022da:	f7ff fcd7 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80022de:	2030      	movs	r0, #48	; 0x30
 80022e0:	f7ff fce4 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80022e4:	2030      	movs	r0, #48	; 0x30
 80022e6:	f7ff fce1 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80022ea:	20c7      	movs	r0, #199	; 0xc7
 80022ec:	f7ff fcce 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80022f0:	20b7      	movs	r0, #183	; 0xb7
 80022f2:	f7ff fcdb 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80022f6:	2036      	movs	r0, #54	; 0x36
 80022f8:	f7ff fcc8 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80022fc:	2008      	movs	r0, #8
 80022fe:	f7ff fcd5 	bl	8001cac <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8002302:	203a      	movs	r0, #58	; 0x3a
 8002304:	f7ff fcc2 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002308:	2055      	movs	r0, #85	; 0x55
 800230a:	f7ff fccf 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800230e:	20b1      	movs	r0, #177	; 0xb1
 8002310:	f7ff fcbc 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff fcc9 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800231a:	201a      	movs	r0, #26
 800231c:	f7ff fcc6 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002320:	20b6      	movs	r0, #182	; 0xb6
 8002322:	f7ff fcb3 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002326:	200a      	movs	r0, #10
 8002328:	f7ff fcc0 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800232c:	20a2      	movs	r0, #162	; 0xa2
 800232e:	f7ff fcbd 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002332:	20f2      	movs	r0, #242	; 0xf2
 8002334:	f7ff fcaa 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002338:	2000      	movs	r0, #0
 800233a:	f7ff fcb7 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800233e:	2026      	movs	r0, #38	; 0x26
 8002340:	f7ff fca4 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002344:	2001      	movs	r0, #1
 8002346:	f7ff fcb1 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800234a:	20e0      	movs	r0, #224	; 0xe0
 800234c:	f7ff fc9e 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002350:	200f      	movs	r0, #15
 8002352:	f7ff fcab 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002356:	202a      	movs	r0, #42	; 0x2a
 8002358:	f7ff fca8 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800235c:	2028      	movs	r0, #40	; 0x28
 800235e:	f7ff fca5 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002362:	2008      	movs	r0, #8
 8002364:	f7ff fca2 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002368:	200e      	movs	r0, #14
 800236a:	f7ff fc9f 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800236e:	2008      	movs	r0, #8
 8002370:	f7ff fc9c 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002374:	2054      	movs	r0, #84	; 0x54
 8002376:	f7ff fc99 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800237a:	20a9      	movs	r0, #169	; 0xa9
 800237c:	f7ff fc96 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002380:	2043      	movs	r0, #67	; 0x43
 8002382:	f7ff fc93 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002386:	200a      	movs	r0, #10
 8002388:	f7ff fc90 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800238c:	200f      	movs	r0, #15
 800238e:	f7ff fc8d 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff fc8a 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff fc87 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff fc84 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff fc81 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80023aa:	20e1      	movs	r0, #225	; 0xe1
 80023ac:	f7ff fc6e 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7ff fc7b 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80023b6:	2015      	movs	r0, #21
 80023b8:	f7ff fc78 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80023bc:	2017      	movs	r0, #23
 80023be:	f7ff fc75 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80023c2:	2007      	movs	r0, #7
 80023c4:	f7ff fc72 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80023c8:	2011      	movs	r0, #17
 80023ca:	f7ff fc6f 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80023ce:	2006      	movs	r0, #6
 80023d0:	f7ff fc6c 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80023d4:	202b      	movs	r0, #43	; 0x2b
 80023d6:	f7ff fc69 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80023da:	2056      	movs	r0, #86	; 0x56
 80023dc:	f7ff fc66 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80023e0:	203c      	movs	r0, #60	; 0x3c
 80023e2:	f7ff fc63 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80023e6:	2005      	movs	r0, #5
 80023e8:	f7ff fc60 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80023ec:	2010      	movs	r0, #16
 80023ee:	f7ff fc5d 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80023f2:	200f      	movs	r0, #15
 80023f4:	f7ff fc5a 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80023f8:	203f      	movs	r0, #63	; 0x3f
 80023fa:	f7ff fc57 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80023fe:	203f      	movs	r0, #63	; 0x3f
 8002400:	f7ff fc54 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002404:	200f      	movs	r0, #15
 8002406:	f7ff fc51 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800240a:	202b      	movs	r0, #43	; 0x2b
 800240c:	f7ff fc3e 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002410:	2000      	movs	r0, #0
 8002412:	f7ff fc4b 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff fc48 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff fc45 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002422:	203f      	movs	r0, #63	; 0x3f
 8002424:	f7ff fc42 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002428:	202a      	movs	r0, #42	; 0x2a
 800242a:	f7ff fc2f 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800242e:	2000      	movs	r0, #0
 8002430:	f7ff fc3c 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002434:	2000      	movs	r0, #0
 8002436:	f7ff fc39 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800243a:	2000      	movs	r0, #0
 800243c:	f7ff fc36 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002440:	20ef      	movs	r0, #239	; 0xef
 8002442:	f7ff fc33 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002446:	2011      	movs	r0, #17
 8002448:	f7ff fc20 	bl	8001c8c <LCD_WR_REG>
	HAL_Delay(120);
 800244c:	2078      	movs	r0, #120	; 0x78
 800244e:	f000 fd07 	bl	8002e60 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002452:	2029      	movs	r0, #41	; 0x29
 8002454:	f7ff fc1a 	bl	8001c8c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800245e:	4804      	ldr	r0, [pc, #16]	; (8002470 <lcd_init+0x2bc>)
 8002460:	f001 f862 	bl	8003528 <HAL_GPIO_WritePin>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40020800 	.word	0x40020800
 800246c:	20000124 	.word	0x20000124
 8002470:	40020000 	.word	0x40020000

08002474 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b08b      	sub	sp, #44	; 0x2c
 8002478:	af04      	add	r7, sp, #16
 800247a:	60ba      	str	r2, [r7, #8]
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	81fb      	strh	r3, [r7, #14]
 8002482:	460b      	mov	r3, r1
 8002484:	81bb      	strh	r3, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800248a:	89fb      	ldrh	r3, [r7, #14]
 800248c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002492:	e048      	b.n	8002526 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d145      	bne.n	8002526 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800249a:	89fa      	ldrh	r2, [r7, #14]
 800249c:	4b26      	ldr	r3, [pc, #152]	; (8002538 <lcd_ShowStr+0xc4>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	1acb      	subs	r3, r1, r3
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dc3f      	bgt.n	8002530 <lcd_ShowStr+0xbc>
 80024b0:	89ba      	ldrh	r2, [r7, #12]
 80024b2:	4b21      	ldr	r3, [pc, #132]	; (8002538 <lcd_ShowStr+0xc4>)
 80024b4:	885b      	ldrh	r3, [r3, #2]
 80024b6:	4619      	mov	r1, r3
 80024b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024bc:	1acb      	subs	r3, r1, r3
 80024be:	429a      	cmp	r2, r3
 80024c0:	dc36      	bgt.n	8002530 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b80      	cmp	r3, #128	; 0x80
 80024c8:	d902      	bls.n	80024d0 <lcd_ShowStr+0x5c>
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
 80024ce:	e02a      	b.n	8002526 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b0d      	cmp	r3, #13
 80024d6:	d10b      	bne.n	80024f0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80024d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024dc:	b29a      	uxth	r2, r3
 80024de:	89bb      	ldrh	r3, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80024e4:	8abb      	ldrh	r3, [r7, #20]
 80024e6:	81fb      	strh	r3, [r7, #14]
					str++;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3301      	adds	r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	e017      	b.n	8002520 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	88fc      	ldrh	r4, [r7, #6]
 80024f6:	89b9      	ldrh	r1, [r7, #12]
 80024f8:	89f8      	ldrh	r0, [r7, #14]
 80024fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	4623      	mov	r3, r4
 800250c:	f7ff fcc4 	bl	8001e98 <lcd_ShowChar>
					x+=sizey/2;
 8002510:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	b29a      	uxth	r2, r3
 800251a:	89fb      	ldrh	r3, [r7, #14]
 800251c:	4413      	add	r3, r2
 800251e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	3301      	adds	r3, #1
 8002524:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1b2      	bne.n	8002494 <lcd_ShowStr+0x20>
 800252e:	e000      	b.n	8002532 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002530:	bf00      	nop
			}
		}
	}
}
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	20000124 	.word	0x20000124

0800253c <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af04      	add	r7, sp, #16
 8002542:	60ba      	str	r2, [r7, #8]
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	81fb      	strh	r3, [r7, #14]
 800254a:	460b      	mov	r3, r1
 800254c:	81bb      	strh	r3, [r7, #12]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002552:	68b8      	ldr	r0, [r7, #8]
 8002554:	f7fd fe38 	bl	80001c8 <strlen>
 8002558:	4603      	mov	r3, r0
 800255a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <lcd_StrCenter+0x60>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	8afb      	ldrh	r3, [r7, #22]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	0fda      	lsrs	r2, r3, #31
 800256a:	4413      	add	r3, r2
 800256c:	105b      	asrs	r3, r3, #1
 800256e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002570:	89fa      	ldrh	r2, [r7, #14]
 8002572:	8abb      	ldrh	r3, [r7, #20]
 8002574:	4413      	add	r3, r2
 8002576:	b298      	uxth	r0, r3
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	89b9      	ldrh	r1, [r7, #12]
 800257c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	8c3b      	ldrh	r3, [r7, #32]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f7ff ff70 	bl	8002474 <lcd_ShowStr>
}
 8002594:	bf00      	nop
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000124 	.word	0x20000124

080025a0 <DrawTestPage>:
void DrawTestPage(uint8_t *str)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af04      	add	r7, sp, #16
 80025a6:	6078      	str	r0, [r7, #4]
	lcd_Fill(0,0,lcddev.width,20,BLUE);
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <DrawTestPage+0x78>)
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	231f      	movs	r3, #31
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2314      	movs	r3, #20
 80025b2:	2100      	movs	r1, #0
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff fc21 	bl	8001dfc <lcd_Fill>
	lcd_Fill(0,lcddev.height-20,lcddev.width,lcddev.height,BLUE);
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <DrawTestPage+0x78>)
 80025bc:	885b      	ldrh	r3, [r3, #2]
 80025be:	3b14      	subs	r3, #20
 80025c0:	b299      	uxth	r1, r3
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <DrawTestPage+0x78>)
 80025c4:	881a      	ldrh	r2, [r3, #0]
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <DrawTestPage+0x78>)
 80025c8:	885b      	ldrh	r3, [r3, #2]
 80025ca:	201f      	movs	r0, #31
 80025cc:	9000      	str	r0, [sp, #0]
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7ff fc14 	bl	8001dfc <lcd_Fill>
	lcd_StrCenter(0,2,str,WHITE,BLUE,16,1);
 80025d4:	2301      	movs	r3, #1
 80025d6:	9302      	str	r3, [sp, #8]
 80025d8:	2310      	movs	r3, #16
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	231f      	movs	r3, #31
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	2102      	movs	r1, #2
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff ffa7 	bl	800253c <lcd_StrCenter>
	lcd_StrCenter(0,lcddev.height-18,"Test page",WHITE,BLUE,16,1);
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <DrawTestPage+0x78>)
 80025f0:	885b      	ldrh	r3, [r3, #2]
 80025f2:	3b12      	subs	r3, #18
 80025f4:	b299      	uxth	r1, r3
 80025f6:	2301      	movs	r3, #1
 80025f8:	9302      	str	r3, [sp, #8]
 80025fa:	2310      	movs	r3, #16
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	231f      	movs	r3, #31
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <DrawTestPage+0x7c>)
 8002608:	2000      	movs	r0, #0
 800260a:	f7ff ff97 	bl	800253c <lcd_StrCenter>
//	lcd_Fill(0,20,lcddev.width,lcddev.height-20,BLACK);
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000124 	.word	0x20000124
 800261c:	08007198 	.word	0x08007198

08002620 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002624:	2201      	movs	r2, #1
 8002626:	2140      	movs	r1, #64	; 0x40
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <led7_init+0x14>)
 800262a:	f000 ff7d 	bl	8003528 <HAL_GPIO_WritePin>
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021800 	.word	0x40021800

08002638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263c:	f000 fb9e 	bl	8002d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002640:	f000 f854 	bl	80026ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002644:	f7ff f9b4 	bl	80019b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002648:	f000 fa44 	bl	8002ad4 <MX_TIM2_Init>
  MX_SPI1_Init();
 800264c:	f000 f94c 	bl	80028e8 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002650:	f7ff f8de 	bl	8001810 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002654:	f7ff faa4 	bl	8001ba0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002658:	f000 faae 	bl	8002bb8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800265c:	f000 f8b0 	bl	80027c0 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8002660:	2000      	movs	r0, #0
 8002662:	f7ff fb91 	bl	8001d88 <lcd_Clear>
 status = INIT;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <main+0x98>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]
 TMP = 1;
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <main+0x9c>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]
 TIMER = 5;
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <main+0xa0>)
 8002674:	2205      	movs	r2, #5
 8002676:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  while(!flag_timer2);
 8002678:	bf00      	nop
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <main+0xa4>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0fb      	beq.n	800267a <main+0x42>
	  flag_timer2 = 0;
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <main+0xa4>)
 8002684:	2200      	movs	r2, #0
 8002686:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8002688:	f7fd ff2e 	bl	80004e8 <button_Scan>
	  count_led_flash = (count_led_flash + 1)%20;
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <main+0xa8>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <main+0xac>)
 8002694:	fb83 1302 	smull	r1, r3, r3, r2
 8002698:	10d9      	asrs	r1, r3, #3
 800269a:	17d3      	asrs	r3, r2, #31
 800269c:	1ac9      	subs	r1, r1, r3
 800269e:	460b      	mov	r3, r1
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	1ad1      	subs	r1, r2, r3
 80026a8:	b2ca      	uxtb	r2, r1
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <main+0xa8>)
 80026ac:	701a      	strb	r2, [r3, #0]
	  count_increase = (count_increase + 1)%4;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <main+0xb0>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	425a      	negs	r2, r3
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	bf58      	it	pl
 80026c0:	4253      	negpl	r3, r2
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <main+0xb0>)
 80026c6:	701a      	strb	r2, [r3, #0]
	  fsm_run();
 80026c8:	f7ff f848 	bl	800175c <fsm_run>
	  while(!flag_timer2);
 80026cc:	e7d4      	b.n	8002678 <main+0x40>
 80026ce:	bf00      	nop
 80026d0:	20000038 	.word	0x20000038
 80026d4:	2000003c 	.word	0x2000003c
 80026d8:	20000040 	.word	0x20000040
 80026dc:	20000044 	.word	0x20000044
 80026e0:	2000002b 	.word	0x2000002b
 80026e4:	66666667 	.word	0x66666667
 80026e8:	2000002a 	.word	0x2000002a

080026ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b094      	sub	sp, #80	; 0x50
 80026f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f2:	f107 0320 	add.w	r3, r7, #32
 80026f6:	2230      	movs	r2, #48	; 0x30
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fd1e 	bl	800713c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <SystemClock_Config+0xcc>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <SystemClock_Config+0xcc>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	6413      	str	r3, [r2, #64]	; 0x40
 8002720:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <SystemClock_Config+0xcc>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800272c:	2300      	movs	r3, #0
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <SystemClock_Config+0xd0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a21      	ldr	r2, [pc, #132]	; (80027bc <SystemClock_Config+0xd0>)
 8002736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <SystemClock_Config+0xd0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002748:	2302      	movs	r3, #2
 800274a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800274c:	2301      	movs	r3, #1
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002750:	2310      	movs	r3, #16
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002754:	2302      	movs	r3, #2
 8002756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002758:	2300      	movs	r3, #0
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800275c:	2308      	movs	r3, #8
 800275e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002760:	23a8      	movs	r3, #168	; 0xa8
 8002762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002764:	2302      	movs	r3, #2
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002768:	2304      	movs	r3, #4
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800276c:	f107 0320 	add.w	r3, r7, #32
 8002770:	4618      	mov	r0, r3
 8002772:	f001 ffe1 	bl	8004738 <HAL_RCC_OscConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800277c:	f000 f842 	bl	8002804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002780:	230f      	movs	r3, #15
 8002782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002784:	2302      	movs	r3, #2
 8002786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800278c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002792:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	2105      	movs	r1, #5
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fa42 	bl	8004c28 <HAL_RCC_ClockConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80027aa:	f000 f82b 	bl	8002804 <Error_Handler>
  }
}
 80027ae:	bf00      	nop
 80027b0:	3750      	adds	r7, #80	; 0x50
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40007000 	.word	0x40007000

080027c0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2120      	movs	r1, #32
 80027c8:	480d      	ldr	r0, [pc, #52]	; (8002800 <system_init+0x40>)
 80027ca:	f000 fead 	bl	8003528 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2140      	movs	r1, #64	; 0x40
 80027d2:	480b      	ldr	r0, [pc, #44]	; (8002800 <system_init+0x40>)
 80027d4:	f000 fea8 	bl	8003528 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80027d8:	2200      	movs	r2, #0
 80027da:	2110      	movs	r1, #16
 80027dc:	4808      	ldr	r0, [pc, #32]	; (8002800 <system_init+0x40>)
 80027de:	f000 fea3 	bl	8003528 <HAL_GPIO_WritePin>
	  timer_init();
 80027e2:	f000 f815 	bl	8002810 <timer_init>
	  led7_init();
 80027e6:	f7ff ff1b 	bl	8002620 <led7_init>
	  button_init();
 80027ea:	f7fd fe71 	bl	80004d0 <button_init>
	  lcd_init();
 80027ee:	f7ff fce1 	bl	80021b4 <lcd_init>
	  ds3231_init();
 80027f2:	f7fd fee5 	bl	80005c0 <ds3231_init>
	  setTimer2(50);
 80027f6:	2032      	movs	r0, #50	; 0x32
 80027f8:	f000 f814 	bl	8002824 <setTimer2>

}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000

08002804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800280c:	e7fe      	b.n	800280c <Error_Handler+0x8>
	...

08002810 <timer_init>:

uint16_t flag_timer3 = 0;
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;

void timer_init(){
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <timer_init+0x10>)
 8002816:	f003 f903 	bl	8005a20 <HAL_TIM_Base_Start_IT>
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200001b8 	.word	0x200001b8

08002824 <setTimer2>:

void setTimer2(uint16_t duration){
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800282e:	4a08      	ldr	r2, [pc, #32]	; (8002850 <setTimer2+0x2c>)
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <setTimer2+0x2c>)
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <setTimer2+0x30>)
 800283a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <setTimer2+0x34>)
 800283e:	2200      	movs	r2, #0
 8002840:	801a      	strh	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000048 	.word	0x20000048
 8002854:	20000046 	.word	0x20000046
 8002858:	20000044 	.word	0x20000044

0800285c <HAL_TIM_PeriodElapsedCallback>:
	timer3_MUL = duration/TIMER_CYCLE_3;
	timer3_counter = timer3_MUL;
	flag_timer3 = 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286c:	d129      	bne.n	80028c2 <HAL_TIM_PeriodElapsedCallback+0x66>
		if(timer2_counter > 0){
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d010      	beq.n	8002898 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002880:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800288c:	2201      	movs	r2, #1
 800288e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002892:	881a      	ldrh	r2, [r3, #0]
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002896:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8002898:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d010      	beq.n	80028c2 <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80028aa:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80028bc:	881a      	ldrh	r2, [r3, #0]
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80028c0:	801a      	strh	r2, [r3, #0]
			}
		}
//		led7_Scan();
	}
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000046 	.word	0x20000046
 80028d4:	20000044 	.word	0x20000044
 80028d8:	20000048 	.word	0x20000048
 80028dc:	2000004c 	.word	0x2000004c
 80028e0:	2000004a 	.word	0x2000004a
 80028e4:	2000004e 	.word	0x2000004e

080028e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <MX_SPI1_Init+0x64>)
 80028ee:	4a18      	ldr	r2, [pc, #96]	; (8002950 <MX_SPI1_Init+0x68>)
 80028f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <MX_SPI1_Init+0x64>)
 80028f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <MX_SPI1_Init+0x64>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <MX_SPI1_Init+0x64>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <MX_SPI1_Init+0x64>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <MX_SPI1_Init+0x64>)
 800290e:	2200      	movs	r2, #0
 8002910:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <MX_SPI1_Init+0x64>)
 8002914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002918:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <MX_SPI1_Init+0x64>)
 800291c:	2200      	movs	r2, #0
 800291e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <MX_SPI1_Init+0x64>)
 8002922:	2200      	movs	r2, #0
 8002924:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <MX_SPI1_Init+0x64>)
 8002928:	2200      	movs	r2, #0
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <MX_SPI1_Init+0x64>)
 800292e:	2200      	movs	r2, #0
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <MX_SPI1_Init+0x64>)
 8002934:	220a      	movs	r2, #10
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002938:	4804      	ldr	r0, [pc, #16]	; (800294c <MX_SPI1_Init+0x64>)
 800293a:	f002 fb71 	bl	8005020 <HAL_SPI_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002944:	f7ff ff5e 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000160 	.word	0x20000160
 8002950:	40013000 	.word	0x40013000

08002954 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <HAL_SPI_MspInit+0x84>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12b      	bne.n	80029ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_SPI_MspInit+0x88>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <HAL_SPI_MspInit+0x88>)
 8002980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_SPI_MspInit+0x88>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_SPI_MspInit+0x88>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_SPI_MspInit+0x88>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_SPI_MspInit+0x88>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80029ae:	2338      	movs	r3, #56	; 0x38
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029be:	2305      	movs	r3, #5
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <HAL_SPI_MspInit+0x8c>)
 80029ca:	f000 fc11 	bl	80031f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80029ce:	bf00      	nop
 80029d0:	3728      	adds	r7, #40	; 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40013000 	.word	0x40013000
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020400 	.word	0x40020400

080029e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <HAL_MspInit+0x4c>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <HAL_MspInit+0x4c>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_MspInit+0x4c>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_MspInit+0x4c>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <HAL_MspInit+0x4c>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_MspInit+0x4c>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800

08002a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <NMI_Handler+0x4>

08002a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3e:	e7fe      	b.n	8002a3e <HardFault_Handler+0x4>

08002a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <MemManage_Handler+0x4>

08002a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a4a:	e7fe      	b.n	8002a4a <BusFault_Handler+0x4>

08002a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <UsageFault_Handler+0x4>

08002a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a80:	f000 f9ce 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <TIM2_IRQHandler+0x10>)
 8002a8e:	f003 f837 	bl	8005b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200001b8 	.word	0x200001b8

08002a9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <USART1_IRQHandler+0x10>)
 8002aa2:	f003 fc3d 	bl	8006320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000200 	.word	0x20000200

08002ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <SystemInit+0x20>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <SystemInit+0x20>)
 8002abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae8:	463b      	mov	r3, r7
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <MX_TIM2_Init+0x94>)
 8002af2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002af6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <MX_TIM2_Init+0x94>)
 8002afa:	f240 3247 	movw	r2, #839	; 0x347
 8002afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <MX_TIM2_Init+0x94>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <MX_TIM2_Init+0x94>)
 8002b08:	2263      	movs	r2, #99	; 0x63
 8002b0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <MX_TIM2_Init+0x94>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <MX_TIM2_Init+0x94>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b18:	4813      	ldr	r0, [pc, #76]	; (8002b68 <MX_TIM2_Init+0x94>)
 8002b1a:	f002 ff31 	bl	8005980 <HAL_TIM_Base_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b24:	f7ff fe6e 	bl	8002804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	4619      	mov	r1, r3
 8002b34:	480c      	ldr	r0, [pc, #48]	; (8002b68 <MX_TIM2_Init+0x94>)
 8002b36:	f003 f8eb 	bl	8005d10 <HAL_TIM_ConfigClockSource>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b40:	f7ff fe60 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4805      	ldr	r0, [pc, #20]	; (8002b68 <MX_TIM2_Init+0x94>)
 8002b52:	f003 fb07 	bl	8006164 <HAL_TIMEx_MasterConfigSynchronization>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b5c:	f7ff fe52 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200001b8 	.word	0x200001b8

08002b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d115      	bne.n	8002baa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_TIM_Base_MspInit+0x48>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <HAL_TIM_Base_MspInit+0x48>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_TIM_Base_MspInit+0x48>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	201c      	movs	r0, #28
 8002ba0:	f000 fa5d 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ba4:	201c      	movs	r0, #28
 8002ba6:	f000 fa76 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <MX_USART1_UART_Init+0x50>)
 8002bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bf0:	f003 fb48 	bl	8006284 <HAL_UART_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bfa:	f7ff fe03 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000200 	.word	0x20000200
 8002c08:	40011000 	.word	0x40011000

08002c0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <HAL_UART_MspInit+0x94>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d134      	bne.n	8002c98 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c38:	f043 0310 	orr.w	r3, r3, #16
 8002c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c78:	2307      	movs	r3, #7
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4619      	mov	r1, r3
 8002c82:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <HAL_UART_MspInit+0x9c>)
 8002c84:	f000 fab4 	bl	80031f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2025      	movs	r0, #37	; 0x25
 8002c8e:	f000 f9e6 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c92:	2025      	movs	r0, #37	; 0x25
 8002c94:	f000 f9ff 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40011000 	.word	0x40011000
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020000 	.word	0x40020000

08002cac <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	0092      	lsls	r2, r2, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	b2db      	uxtb	r3, r3
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <DEC2BCD+0x44>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	08db      	lsrs	r3, r3, #3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	b258      	sxtb	r0, r3
 8002cfa:	79fa      	ldrb	r2, [r7, #7]
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <DEC2BCD+0x44>)
 8002cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8002d02:	08d9      	lsrs	r1, r3, #3
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	4303      	orrs	r3, r0
 8002d14:	b25b      	sxtb	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	cccccccd 	.word	0xcccccccd

08002d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d2c:	480d      	ldr	r0, [pc, #52]	; (8002d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d2e:	490e      	ldr	r1, [pc, #56]	; (8002d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d34:	e002      	b.n	8002d3c <LoopCopyDataInit>

08002d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3a:	3304      	adds	r3, #4

08002d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d40:	d3f9      	bcc.n	8002d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d42:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d44:	4c0b      	ldr	r4, [pc, #44]	; (8002d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d48:	e001      	b.n	8002d4e <LoopFillZerobss>

08002d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d4c:	3204      	adds	r2, #4

08002d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d50:	d3fb      	bcc.n	8002d4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d52:	f7ff fead 	bl	8002ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d56:	f004 f9cd 	bl	80070f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d5a:	f7ff fc6d 	bl	8002638 <main>
  bx  lr    
 8002d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d6c:	0800a14c 	.word	0x0800a14c
  ldr r2, =_sbss
 8002d70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002d74:	20000248 	.word	0x20000248

08002d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d78:	e7fe      	b.n	8002d78 <ADC_IRQHandler>
	...

08002d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <HAL_Init+0x40>)
 8002d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <HAL_Init+0x40>)
 8002d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <HAL_Init+0x40>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da4:	2003      	movs	r0, #3
 8002da6:	f000 f94f 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002daa:	200f      	movs	r0, #15
 8002dac:	f000 f808 	bl	8002dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db0:	f7ff fe18 	bl	80029e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00

08002dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_InitTick+0x54>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_InitTick+0x58>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f967 	bl	80030b2 <HAL_SYSTICK_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00e      	b.n	8002e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0f      	cmp	r3, #15
 8002df2:	d80a      	bhi.n	8002e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df4:	2200      	movs	r2, #0
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f000 f92f 	bl	800305e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <HAL_InitTick+0x5c>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_IncTick+0x20>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_IncTick+0x24>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_IncTick+0x24>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000008 	.word	0x20000008
 8002e44:	20000244 	.word	0x20000244

08002e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_GetTick+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000244 	.word	0x20000244

08002e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e68:	f7ff ffee 	bl	8002e48 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d005      	beq.n	8002e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_Delay+0x44>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e86:	bf00      	nop
 8002e88:	f7ff ffde 	bl	8002e48 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d8f7      	bhi.n	8002e88 <HAL_Delay+0x28>
  {
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000008 	.word	0x20000008

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0b      	blt.n	8002f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	; (8002f44 <__NVIC_EnableIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	; (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003014:	d301      	bcc.n	800301a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003016:	2301      	movs	r3, #1
 8003018:	e00f      	b.n	800303a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <SysTick_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003022:	210f      	movs	r1, #15
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f7ff ff8e 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <SysTick_Config+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <SysTick_Config+0x40>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff29 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff3e 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff8e 	bl	8002f9c <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff5d 	bl	8002f48 <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff31 	bl	8002f0c <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa2 	bl	8003004 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff feb6 	bl	8002e48 <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d008      	beq.n	80030fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2280      	movs	r2, #128	; 0x80
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e052      	b.n	80031a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0216 	bic.w	r2, r2, #22
 800310a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d103      	bne.n	800312c <HAL_DMA_Abort+0x62>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0208 	bic.w	r2, r2, #8
 800313a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800314c:	e013      	b.n	8003176 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800314e:	f7ff fe7b 	bl	8002e48 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b05      	cmp	r3, #5
 800315a:	d90c      	bls.n	8003176 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2203      	movs	r2, #3
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e015      	b.n	80031a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e4      	bne.n	800314e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	223f      	movs	r2, #63	; 0x3f
 800318a:	409a      	lsls	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d004      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e00c      	b.n	80031e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2205      	movs	r2, #5
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	e16b      	b.n	80034e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800320c:	2201      	movs	r2, #1
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	429a      	cmp	r2, r3
 8003226:	f040 815a 	bne.w	80034de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d005      	beq.n	8003242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800323e:	2b02      	cmp	r3, #2
 8003240:	d130      	bne.n	80032a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	2203      	movs	r2, #3
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003278:	2201      	movs	r2, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 0201 	and.w	r2, r3, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d017      	beq.n	80032e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d123      	bne.n	8003334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	08da      	lsrs	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3208      	adds	r2, #8
 80032f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	220f      	movs	r2, #15
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	08da      	lsrs	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3208      	adds	r2, #8
 800332e:	69b9      	ldr	r1, [r7, #24]
 8003330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0203 	and.w	r2, r3, #3
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80b4 	beq.w	80034de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	4b60      	ldr	r3, [pc, #384]	; (80034fc <HAL_GPIO_Init+0x30c>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	4a5f      	ldr	r2, [pc, #380]	; (80034fc <HAL_GPIO_Init+0x30c>)
 8003380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003384:	6453      	str	r3, [r2, #68]	; 0x44
 8003386:	4b5d      	ldr	r3, [pc, #372]	; (80034fc <HAL_GPIO_Init+0x30c>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003392:	4a5b      	ldr	r2, [pc, #364]	; (8003500 <HAL_GPIO_Init+0x310>)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	3302      	adds	r3, #2
 800339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a52      	ldr	r2, [pc, #328]	; (8003504 <HAL_GPIO_Init+0x314>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02b      	beq.n	8003416 <HAL_GPIO_Init+0x226>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_GPIO_Init+0x318>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_Init+0x222>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_GPIO_Init+0x31c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_Init+0x21e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4f      	ldr	r2, [pc, #316]	; (8003510 <HAL_GPIO_Init+0x320>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_Init+0x21a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <HAL_GPIO_Init+0x324>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x216>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4d      	ldr	r2, [pc, #308]	; (8003518 <HAL_GPIO_Init+0x328>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x212>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4c      	ldr	r2, [pc, #304]	; (800351c <HAL_GPIO_Init+0x32c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x20e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	; (8003520 <HAL_GPIO_Init+0x330>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x20a>
 80033f6:	2307      	movs	r3, #7
 80033f8:	e00e      	b.n	8003418 <HAL_GPIO_Init+0x228>
 80033fa:	2308      	movs	r3, #8
 80033fc:	e00c      	b.n	8003418 <HAL_GPIO_Init+0x228>
 80033fe:	2306      	movs	r3, #6
 8003400:	e00a      	b.n	8003418 <HAL_GPIO_Init+0x228>
 8003402:	2305      	movs	r3, #5
 8003404:	e008      	b.n	8003418 <HAL_GPIO_Init+0x228>
 8003406:	2304      	movs	r3, #4
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x228>
 800340a:	2303      	movs	r3, #3
 800340c:	e004      	b.n	8003418 <HAL_GPIO_Init+0x228>
 800340e:	2302      	movs	r3, #2
 8003410:	e002      	b.n	8003418 <HAL_GPIO_Init+0x228>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_GPIO_Init+0x228>
 8003416:	2300      	movs	r3, #0
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f002 0203 	and.w	r2, r2, #3
 800341e:	0092      	lsls	r2, r2, #2
 8003420:	4093      	lsls	r3, r2
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003428:	4935      	ldr	r1, [pc, #212]	; (8003500 <HAL_GPIO_Init+0x310>)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	3302      	adds	r3, #2
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003436:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <HAL_GPIO_Init+0x334>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800345a:	4a32      	ldr	r2, [pc, #200]	; (8003524 <HAL_GPIO_Init+0x334>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003460:	4b30      	ldr	r3, [pc, #192]	; (8003524 <HAL_GPIO_Init+0x334>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003484:	4a27      	ldr	r2, [pc, #156]	; (8003524 <HAL_GPIO_Init+0x334>)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800348a:	4b26      	ldr	r3, [pc, #152]	; (8003524 <HAL_GPIO_Init+0x334>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ae:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_GPIO_Init+0x334>)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034b4:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_GPIO_Init+0x334>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034d8:	4a12      	ldr	r2, [pc, #72]	; (8003524 <HAL_GPIO_Init+0x334>)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3301      	adds	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	f67f ae90 	bls.w	800320c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	40013800 	.word	0x40013800
 8003504:	40020000 	.word	0x40020000
 8003508:	40020400 	.word	0x40020400
 800350c:	40020800 	.word	0x40020800
 8003510:	40020c00 	.word	0x40020c00
 8003514:	40021000 	.word	0x40021000
 8003518:	40021400 	.word	0x40021400
 800351c:	40021800 	.word	0x40021800
 8003520:	40021c00 	.word	0x40021c00
 8003524:	40013c00 	.word	0x40013c00

08003528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
 8003534:	4613      	mov	r3, r2
 8003536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003544:	e003      	b.n	800354e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	041a      	lsls	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	619a      	str	r2, [r3, #24]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e12b      	b.n	80037c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fe fb3a 	bl	8001bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2224      	movs	r2, #36	; 0x24
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c0:	f001 fd06 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 80035c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4a81      	ldr	r2, [pc, #516]	; (80037d0 <HAL_I2C_Init+0x274>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d807      	bhi.n	80035e0 <HAL_I2C_Init+0x84>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a80      	ldr	r2, [pc, #512]	; (80037d4 <HAL_I2C_Init+0x278>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	bf94      	ite	ls
 80035d8:	2301      	movls	r3, #1
 80035da:	2300      	movhi	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e006      	b.n	80035ee <HAL_I2C_Init+0x92>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4a7d      	ldr	r2, [pc, #500]	; (80037d8 <HAL_I2C_Init+0x27c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bf94      	ite	ls
 80035e8:	2301      	movls	r3, #1
 80035ea:	2300      	movhi	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0e7      	b.n	80037c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4a78      	ldr	r2, [pc, #480]	; (80037dc <HAL_I2C_Init+0x280>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0c9b      	lsrs	r3, r3, #18
 8003600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a6a      	ldr	r2, [pc, #424]	; (80037d0 <HAL_I2C_Init+0x274>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d802      	bhi.n	8003630 <HAL_I2C_Init+0xd4>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3301      	adds	r3, #1
 800362e:	e009      	b.n	8003644 <HAL_I2C_Init+0xe8>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	4a69      	ldr	r2, [pc, #420]	; (80037e0 <HAL_I2C_Init+0x284>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	099b      	lsrs	r3, r3, #6
 8003642:	3301      	adds	r3, #1
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	430b      	orrs	r3, r1
 800364a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	495c      	ldr	r1, [pc, #368]	; (80037d0 <HAL_I2C_Init+0x274>)
 8003660:	428b      	cmp	r3, r1
 8003662:	d819      	bhi.n	8003698 <HAL_I2C_Init+0x13c>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1e59      	subs	r1, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003672:	1c59      	adds	r1, r3, #1
 8003674:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003678:	400b      	ands	r3, r1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_I2C_Init+0x138>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1e59      	subs	r1, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fbb1 f3f3 	udiv	r3, r1, r3
 800368c:	3301      	adds	r3, #1
 800368e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003692:	e051      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 8003694:	2304      	movs	r3, #4
 8003696:	e04f      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d111      	bne.n	80036c4 <HAL_I2C_Init+0x168>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1e58      	subs	r0, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	440b      	add	r3, r1
 80036ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e012      	b.n	80036ea <HAL_I2C_Init+0x18e>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1e58      	subs	r0, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	0099      	lsls	r1, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_I2C_Init+0x196>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e022      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10e      	bne.n	8003718 <HAL_I2C_Init+0x1bc>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1e58      	subs	r0, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	440b      	add	r3, r1
 8003708:	fbb0 f3f3 	udiv	r3, r0, r3
 800370c:	3301      	adds	r3, #1
 800370e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003716:	e00f      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1e58      	subs	r0, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	0099      	lsls	r1, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	fbb0 f3f3 	udiv	r3, r0, r3
 800372e:	3301      	adds	r3, #1
 8003730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	6809      	ldr	r1, [r1, #0]
 800373c:	4313      	orrs	r3, r2
 800373e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003766:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6911      	ldr	r1, [r2, #16]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68d2      	ldr	r2, [r2, #12]
 8003772:	4311      	orrs	r1, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	430b      	orrs	r3, r1
 800377a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	000186a0 	.word	0x000186a0
 80037d4:	001e847f 	.word	0x001e847f
 80037d8:	003d08ff 	.word	0x003d08ff
 80037dc:	431bde83 	.word	0x431bde83
 80037e0:	10624dd3 	.word	0x10624dd3

080037e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	4608      	mov	r0, r1
 80037ee:	4611      	mov	r1, r2
 80037f0:	461a      	mov	r2, r3
 80037f2:	4603      	mov	r3, r0
 80037f4:	817b      	strh	r3, [r7, #10]
 80037f6:	460b      	mov	r3, r1
 80037f8:	813b      	strh	r3, [r7, #8]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037fe:	f7ff fb23 	bl	8002e48 <HAL_GetTick>
 8003802:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b20      	cmp	r3, #32
 800380e:	f040 80d9 	bne.w	80039c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2319      	movs	r3, #25
 8003818:	2201      	movs	r2, #1
 800381a:	496d      	ldr	r1, [pc, #436]	; (80039d0 <HAL_I2C_Mem_Write+0x1ec>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fdad 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003828:	2302      	movs	r3, #2
 800382a:	e0cc      	b.n	80039c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_I2C_Mem_Write+0x56>
 8003836:	2302      	movs	r3, #2
 8003838:	e0c5      	b.n	80039c6 <HAL_I2C_Mem_Write+0x1e2>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d007      	beq.n	8003860 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2221      	movs	r2, #33	; 0x21
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2240      	movs	r2, #64	; 0x40
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a3a      	ldr	r2, [r7, #32]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003890:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a4d      	ldr	r2, [pc, #308]	; (80039d4 <HAL_I2C_Mem_Write+0x1f0>)
 80038a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038a2:	88f8      	ldrh	r0, [r7, #6]
 80038a4:	893a      	ldrh	r2, [r7, #8]
 80038a6:	8979      	ldrh	r1, [r7, #10]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	4603      	mov	r3, r0
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fbe4 	bl	8004080 <I2C_RequestMemoryWrite>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d052      	beq.n	8003964 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e081      	b.n	80039c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fe2e 	bl	8004528 <I2C_WaitOnTXEFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00d      	beq.n	80038ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d107      	bne.n	80038ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e06b      	b.n	80039c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	781a      	ldrb	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b04      	cmp	r3, #4
 800392a:	d11b      	bne.n	8003964 <HAL_I2C_Mem_Write+0x180>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	2b00      	cmp	r3, #0
 8003932:	d017      	beq.n	8003964 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	781a      	ldrb	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1aa      	bne.n	80038c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fe1a 	bl	80045aa <I2C_WaitOnBTFFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00d      	beq.n	8003998 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	2b04      	cmp	r3, #4
 8003982:	d107      	bne.n	8003994 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003992:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e016      	b.n	80039c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	00100002 	.word	0x00100002
 80039d4:	ffff0000 	.word	0xffff0000

080039d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	4608      	mov	r0, r1
 80039e2:	4611      	mov	r1, r2
 80039e4:	461a      	mov	r2, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	817b      	strh	r3, [r7, #10]
 80039ea:	460b      	mov	r3, r1
 80039ec:	813b      	strh	r3, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039f2:	f7ff fa29 	bl	8002e48 <HAL_GetTick>
 80039f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	f040 8208 	bne.w	8003e16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2319      	movs	r3, #25
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	497b      	ldr	r1, [pc, #492]	; (8003bfc <HAL_I2C_Mem_Read+0x224>)
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fcb3 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e1fb      	b.n	8003e18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x56>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e1f4      	b.n	8003e18 <HAL_I2C_Mem_Read+0x440>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d007      	beq.n	8003a54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2222      	movs	r2, #34	; 0x22
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2240      	movs	r2, #64	; 0x40
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a5b      	ldr	r2, [pc, #364]	; (8003c00 <HAL_I2C_Mem_Read+0x228>)
 8003a94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a96:	88f8      	ldrh	r0, [r7, #6]
 8003a98:	893a      	ldrh	r2, [r7, #8]
 8003a9a:	8979      	ldrh	r1, [r7, #10]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fb80 	bl	80041ac <I2C_RequestMemoryRead>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1b0      	b.n	8003e18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d113      	bne.n	8003ae6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	623b      	str	r3, [r7, #32]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	623b      	str	r3, [r7, #32]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e184      	b.n	8003df0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d11b      	bne.n	8003b26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e164      	b.n	8003df0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d11b      	bne.n	8003b66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	e144      	b.n	8003df0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b7c:	e138      	b.n	8003df0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	f200 80f1 	bhi.w	8003d6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d123      	bne.n	8003bd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fd49 	bl	800462c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e139      	b.n	8003e18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bd6:	e10b      	b.n	8003df0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d14e      	bne.n	8003c7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	2200      	movs	r2, #0
 8003be8:	4906      	ldr	r1, [pc, #24]	; (8003c04 <HAL_I2C_Mem_Read+0x22c>)
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fbc6 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e10e      	b.n	8003e18 <HAL_I2C_Mem_Read+0x440>
 8003bfa:	bf00      	nop
 8003bfc:	00100002 	.word	0x00100002
 8003c00:	ffff0000 	.word	0xffff0000
 8003c04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c7c:	e0b8      	b.n	8003df0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	2200      	movs	r2, #0
 8003c86:	4966      	ldr	r1, [pc, #408]	; (8003e20 <HAL_I2C_Mem_Read+0x448>)
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fb77 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0bf      	b.n	8003e18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	494f      	ldr	r1, [pc, #316]	; (8003e20 <HAL_I2C_Mem_Read+0x448>)
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fb49 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e091      	b.n	8003e18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d68:	e042      	b.n	8003df0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fc5c 	bl	800462c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e04c      	b.n	8003e18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d118      	bne.n	8003df0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f47f aec2 	bne.w	8003b7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
  }
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3728      	adds	r7, #40	; 0x28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	00010004 	.word	0x00010004

08003e24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	; 0x28
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	460b      	mov	r3, r1
 8003e32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e34:	f7ff f808 	bl	8002e48 <HAL_GetTick>
 8003e38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	f040 8111 	bne.w	800406e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	2319      	movs	r3, #25
 8003e52:	2201      	movs	r2, #1
 8003e54:	4988      	ldr	r1, [pc, #544]	; (8004078 <HAL_I2C_IsDeviceReady+0x254>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fa90 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
 8003e64:	e104      	b.n	8004070 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_I2C_IsDeviceReady+0x50>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e0fd      	b.n	8004070 <HAL_I2C_IsDeviceReady+0x24c>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d007      	beq.n	8003e9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2224      	movs	r2, #36	; 0x24
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a70      	ldr	r2, [pc, #448]	; (800407c <HAL_I2C_IsDeviceReady+0x258>)
 8003ebc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ecc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fa4e 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef4:	d103      	bne.n	8003efe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0b6      	b.n	8004070 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f02:	897b      	ldrh	r3, [r7, #10]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f10:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f12:	f7fe ff99 	bl	8002e48 <HAL_GetTick>
 8003f16:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3c:	bf0c      	ite	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	2300      	movne	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f46:	e025      	b.n	8003f94 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f48:	f7fe ff7e 	bl	8002e48 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d302      	bcc.n	8003f5e <HAL_I2C_IsDeviceReady+0x13a>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	22a0      	movs	r2, #160	; 0xa0
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	2300      	movne	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2ba0      	cmp	r3, #160	; 0xa0
 8003f9e:	d005      	beq.n	8003fac <HAL_I2C_IsDeviceReady+0x188>
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d102      	bne.n	8003fac <HAL_I2C_IsDeviceReady+0x188>
 8003fa6:	7dbb      	ldrb	r3, [r7, #22]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0cd      	beq.n	8003f48 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d129      	bne.n	8004016 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2319      	movs	r3, #25
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4921      	ldr	r1, [pc, #132]	; (8004078 <HAL_I2C_IsDeviceReady+0x254>)
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f9c2 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e036      	b.n	8004070 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e02c      	b.n	8004070 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004024:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800402e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2319      	movs	r3, #25
 8004036:	2201      	movs	r2, #1
 8004038:	490f      	ldr	r1, [pc, #60]	; (8004078 <HAL_I2C_IsDeviceReady+0x254>)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f99e 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e012      	b.n	8004070 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	3301      	adds	r3, #1
 800404e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	f4ff af32 	bcc.w	8003ebe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800406e:	2302      	movs	r3, #2
  }
}
 8004070:	4618      	mov	r0, r3
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	00100002 	.word	0x00100002
 800407c:	ffff0000 	.word	0xffff0000

08004080 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	4608      	mov	r0, r1
 800408a:	4611      	mov	r1, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4603      	mov	r3, r0
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	460b      	mov	r3, r1
 8004094:	813b      	strh	r3, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f960 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00d      	beq.n	80040de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d0:	d103      	bne.n	80040da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e05f      	b.n	800419e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040de:	897b      	ldrh	r3, [r7, #10]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	492d      	ldr	r1, [pc, #180]	; (80041a8 <I2C_RequestMemoryWrite+0x128>)
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f998 	bl	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e04c      	b.n	800419e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	6a39      	ldr	r1, [r7, #32]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fa02 	bl	8004528 <I2C_WaitOnTXEFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b04      	cmp	r3, #4
 8004130:	d107      	bne.n	8004142 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004140:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e02b      	b.n	800419e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d105      	bne.n	8004158 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800414c:	893b      	ldrh	r3, [r7, #8]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]
 8004156:	e021      	b.n	800419c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004158:	893b      	ldrh	r3, [r7, #8]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	b29b      	uxth	r3, r3
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	6a39      	ldr	r1, [r7, #32]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f9dc 	bl	8004528 <I2C_WaitOnTXEFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b04      	cmp	r3, #4
 800417c:	d107      	bne.n	800418e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e005      	b.n	800419e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004192:	893b      	ldrh	r3, [r7, #8]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	00010002 	.word	0x00010002

080041ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	4608      	mov	r0, r1
 80041b6:	4611      	mov	r1, r2
 80041b8:	461a      	mov	r2, r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	817b      	strh	r3, [r7, #10]
 80041be:	460b      	mov	r3, r1
 80041c0:	813b      	strh	r3, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f8c2 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420c:	d103      	bne.n	8004216 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0aa      	b.n	8004370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800421a:	897b      	ldrh	r3, [r7, #10]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004228:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	4952      	ldr	r1, [pc, #328]	; (8004378 <I2C_RequestMemoryRead+0x1cc>)
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f8fa 	bl	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e097      	b.n	8004370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004258:	6a39      	ldr	r1, [r7, #32]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f964 	bl	8004528 <I2C_WaitOnTXEFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	2b04      	cmp	r3, #4
 800426c:	d107      	bne.n	800427e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e076      	b.n	8004370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d105      	bne.n	8004294 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004288:	893b      	ldrh	r3, [r7, #8]
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	611a      	str	r2, [r3, #16]
 8004292:	e021      	b.n	80042d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004294:	893b      	ldrh	r3, [r7, #8]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	b29b      	uxth	r3, r3
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a4:	6a39      	ldr	r1, [r7, #32]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f93e 	bl	8004528 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d107      	bne.n	80042ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e050      	b.n	8004370 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ce:	893b      	ldrh	r3, [r7, #8]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042da:	6a39      	ldr	r1, [r7, #32]
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f923 	bl	8004528 <I2C_WaitOnTXEFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00d      	beq.n	8004304 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d107      	bne.n	8004300 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e035      	b.n	8004370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004312:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	2200      	movs	r2, #0
 800431c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f82b 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00d      	beq.n	8004348 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433a:	d103      	bne.n	8004344 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e013      	b.n	8004370 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004348:	897b      	ldrh	r3, [r7, #10]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	b2da      	uxtb	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	6a3a      	ldr	r2, [r7, #32]
 800435c:	4906      	ldr	r1, [pc, #24]	; (8004378 <I2C_RequestMemoryRead+0x1cc>)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f863 	bl	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	00010002 	.word	0x00010002

0800437c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800438c:	e025      	b.n	80043da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d021      	beq.n	80043da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fe fd57 	bl	8002e48 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d116      	bne.n	80043da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f043 0220 	orr.w	r2, r3, #32
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e023      	b.n	8004422 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d10d      	bne.n	8004400 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	43da      	mvns	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	e00c      	b.n	800441a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	43da      	mvns	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4013      	ands	r3, r2
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	bf0c      	ite	eq
 8004412:	2301      	moveq	r3, #1
 8004414:	2300      	movne	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	429a      	cmp	r2, r3
 800441e:	d0b6      	beq.n	800438e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004438:	e051      	b.n	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004448:	d123      	bne.n	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004458:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004462:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f043 0204 	orr.w	r2, r3, #4
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e046      	b.n	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d021      	beq.n	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449a:	f7fe fcd5 	bl	8002e48 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d116      	bne.n	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e020      	b.n	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10c      	bne.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	43da      	mvns	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4013      	ands	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e00b      	b.n	800451a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	43da      	mvns	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4013      	ands	r3, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d18d      	bne.n	800443a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004534:	e02d      	b.n	8004592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f8ce 	bl	80046d8 <I2C_IsAcknowledgeFailed>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e02d      	b.n	80045a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d021      	beq.n	8004592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454e:	f7fe fc7b 	bl	8002e48 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	429a      	cmp	r2, r3
 800455c:	d302      	bcc.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d116      	bne.n	8004592 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e007      	b.n	80045a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d1ca      	bne.n	8004536 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045b6:	e02d      	b.n	8004614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f88d 	bl	80046d8 <I2C_IsAcknowledgeFailed>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e02d      	b.n	8004624 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d021      	beq.n	8004614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d0:	f7fe fc3a 	bl	8002e48 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d302      	bcc.n	80045e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d116      	bne.n	8004614 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e007      	b.n	8004624 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b04      	cmp	r3, #4
 8004620:	d1ca      	bne.n	80045b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004638:	e042      	b.n	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b10      	cmp	r3, #16
 8004646:	d119      	bne.n	800467c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0210 	mvn.w	r2, #16
 8004650:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e029      	b.n	80046d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467c:	f7fe fbe4 	bl	8002e48 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	d302      	bcc.n	8004692 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d116      	bne.n	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e007      	b.n	80046d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d1b5      	bne.n	800463a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ee:	d11b      	bne.n	8004728 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f043 0204 	orr.w	r2, r3, #4
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e264      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d075      	beq.n	8004842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004756:	4ba3      	ldr	r3, [pc, #652]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b04      	cmp	r3, #4
 8004760:	d00c      	beq.n	800477c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004762:	4ba0      	ldr	r3, [pc, #640]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800476a:	2b08      	cmp	r3, #8
 800476c:	d112      	bne.n	8004794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800476e:	4b9d      	ldr	r3, [pc, #628]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477a:	d10b      	bne.n	8004794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800477c:	4b99      	ldr	r3, [pc, #612]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d05b      	beq.n	8004840 <HAL_RCC_OscConfig+0x108>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d157      	bne.n	8004840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e23f      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479c:	d106      	bne.n	80047ac <HAL_RCC_OscConfig+0x74>
 800479e:	4b91      	ldr	r3, [pc, #580]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a90      	ldr	r2, [pc, #576]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e01d      	b.n	80047e8 <HAL_RCC_OscConfig+0xb0>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x98>
 80047b6:	4b8b      	ldr	r3, [pc, #556]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a8a      	ldr	r2, [pc, #552]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	4b88      	ldr	r3, [pc, #544]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a87      	ldr	r2, [pc, #540]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e00b      	b.n	80047e8 <HAL_RCC_OscConfig+0xb0>
 80047d0:	4b84      	ldr	r3, [pc, #528]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a83      	ldr	r2, [pc, #524]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80047d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	4b81      	ldr	r3, [pc, #516]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a80      	ldr	r2, [pc, #512]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80047e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f0:	f7fe fb2a 	bl	8002e48 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f8:	f7fe fb26 	bl	8002e48 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	; 0x64
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e204      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b76      	ldr	r3, [pc, #472]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0xc0>
 8004816:	e014      	b.n	8004842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fe fb16 	bl	8002e48 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004820:	f7fe fb12 	bl	8002e48 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e1f0      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004832:	4b6c      	ldr	r3, [pc, #432]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0xe8>
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d063      	beq.n	8004916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800484e:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485a:	4b62      	ldr	r3, [pc, #392]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004862:	2b08      	cmp	r3, #8
 8004864:	d11c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004866:	4b5f      	ldr	r3, [pc, #380]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d116      	bne.n	80048a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004872:	4b5c      	ldr	r3, [pc, #368]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_RCC_OscConfig+0x152>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d001      	beq.n	800488a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e1c4      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488a:	4b56      	ldr	r3, [pc, #344]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4952      	ldr	r1, [pc, #328]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 800489a:	4313      	orrs	r3, r2
 800489c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489e:	e03a      	b.n	8004916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a8:	4b4f      	ldr	r3, [pc, #316]	; (80049e8 <HAL_RCC_OscConfig+0x2b0>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ae:	f7fe facb 	bl	8002e48 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b6:	f7fe fac7 	bl	8002e48 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e1a5      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c8:	4b46      	ldr	r3, [pc, #280]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d4:	4b43      	ldr	r3, [pc, #268]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4940      	ldr	r1, [pc, #256]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
 80048e8:	e015      	b.n	8004916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ea:	4b3f      	ldr	r3, [pc, #252]	; (80049e8 <HAL_RCC_OscConfig+0x2b0>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fe faaa 	bl	8002e48 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f8:	f7fe faa6 	bl	8002e48 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e184      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490a:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d030      	beq.n	8004984 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d016      	beq.n	8004958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800492a:	4b30      	ldr	r3, [pc, #192]	; (80049ec <HAL_RCC_OscConfig+0x2b4>)
 800492c:	2201      	movs	r2, #1
 800492e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004930:	f7fe fa8a 	bl	8002e48 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004938:	f7fe fa86 	bl	8002e48 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e164      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494a:	4b26      	ldr	r3, [pc, #152]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x200>
 8004956:	e015      	b.n	8004984 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_RCC_OscConfig+0x2b4>)
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495e:	f7fe fa73 	bl	8002e48 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004966:	f7fe fa6f 	bl	8002e48 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e14d      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004978:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 800497a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1f0      	bne.n	8004966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80a0 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	4a0e      	ldr	r2, [pc, #56]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b0:	6413      	str	r3, [r2, #64]	; 0x40
 80049b2:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_OscConfig+0x2b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d121      	bne.n	8004a12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_RCC_OscConfig+0x2b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <HAL_RCC_OscConfig+0x2b8>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049da:	f7fe fa35 	bl	8002e48 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	e011      	b.n	8004a06 <HAL_RCC_OscConfig+0x2ce>
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800
 80049e8:	42470000 	.word	0x42470000
 80049ec:	42470e80 	.word	0x42470e80
 80049f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f4:	f7fe fa28 	bl	8002e48 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e106      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a06:	4b85      	ldr	r3, [pc, #532]	; (8004c1c <HAL_RCC_OscConfig+0x4e4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d106      	bne.n	8004a28 <HAL_RCC_OscConfig+0x2f0>
 8004a1a:	4b81      	ldr	r3, [pc, #516]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	4a80      	ldr	r2, [pc, #512]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	6713      	str	r3, [r2, #112]	; 0x70
 8004a26:	e01c      	b.n	8004a62 <HAL_RCC_OscConfig+0x32a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b05      	cmp	r3, #5
 8004a2e:	d10c      	bne.n	8004a4a <HAL_RCC_OscConfig+0x312>
 8004a30:	4b7b      	ldr	r3, [pc, #492]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	4a7a      	ldr	r2, [pc, #488]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a36:	f043 0304 	orr.w	r3, r3, #4
 8004a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3c:	4b78      	ldr	r3, [pc, #480]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a40:	4a77      	ldr	r2, [pc, #476]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6713      	str	r3, [r2, #112]	; 0x70
 8004a48:	e00b      	b.n	8004a62 <HAL_RCC_OscConfig+0x32a>
 8004a4a:	4b75      	ldr	r3, [pc, #468]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	4a74      	ldr	r2, [pc, #464]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	6713      	str	r3, [r2, #112]	; 0x70
 8004a56:	4b72      	ldr	r3, [pc, #456]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	4a71      	ldr	r2, [pc, #452]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d015      	beq.n	8004a96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6a:	f7fe f9ed 	bl	8002e48 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a72:	f7fe f9e9 	bl	8002e48 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e0c5      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a88:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0ee      	beq.n	8004a72 <HAL_RCC_OscConfig+0x33a>
 8004a94:	e014      	b.n	8004ac0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a96:	f7fe f9d7 	bl	8002e48 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a9e:	f7fe f9d3 	bl	8002e48 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e0af      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab4:	4b5a      	ldr	r3, [pc, #360]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ee      	bne.n	8004a9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d105      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac6:	4b56      	ldr	r3, [pc, #344]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	4a55      	ldr	r2, [pc, #340]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 809b 	beq.w	8004c12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004adc:	4b50      	ldr	r3, [pc, #320]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d05c      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d141      	bne.n	8004b74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af0:	4b4c      	ldr	r3, [pc, #304]	; (8004c24 <HAL_RCC_OscConfig+0x4ec>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fe f9a7 	bl	8002e48 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004afe:	f7fe f9a3 	bl	8002e48 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e081      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b10:	4b43      	ldr	r3, [pc, #268]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f0      	bne.n	8004afe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	019b      	lsls	r3, r3, #6
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	3b01      	subs	r3, #1
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	061b      	lsls	r3, r3, #24
 8004b40:	4937      	ldr	r1, [pc, #220]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b46:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCC_OscConfig+0x4ec>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fe f97c 	bl	8002e48 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fe f978 	bl	8002e48 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e056      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b66:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x41c>
 8004b72:	e04e      	b.n	8004c12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b74:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <HAL_RCC_OscConfig+0x4ec>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7a:	f7fe f965 	bl	8002e48 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b82:	f7fe f961 	bl	8002e48 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e03f      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b94:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCC_OscConfig+0x44a>
 8004ba0:	e037      	b.n	8004c12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e032      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bae:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <HAL_RCC_OscConfig+0x4e8>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d028      	beq.n	8004c0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d121      	bne.n	8004c0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d11a      	bne.n	8004c0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bde:	4013      	ands	r3, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004be4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d111      	bne.n	8004c0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d001      	beq.n	8004c12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	40023800 	.word	0x40023800
 8004c24:	42470060 	.word	0x42470060

08004c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0cc      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b68      	ldr	r3, [pc, #416]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d90c      	bls.n	8004c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b65      	ldr	r3, [pc, #404]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b63      	ldr	r3, [pc, #396]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0b8      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c7c:	4b59      	ldr	r3, [pc, #356]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4a58      	ldr	r2, [pc, #352]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c94:	4b53      	ldr	r3, [pc, #332]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4a52      	ldr	r2, [pc, #328]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca0:	4b50      	ldr	r3, [pc, #320]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	494d      	ldr	r1, [pc, #308]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d044      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc6:	4b47      	ldr	r3, [pc, #284]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d119      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e07f      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d003      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce6:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e06f      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf6:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e067      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d06:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f023 0203 	bic.w	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4934      	ldr	r1, [pc, #208]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d18:	f7fe f896 	bl	8002e48 <HAL_GetTick>
 8004d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d20:	f7fe f892 	bl	8002e48 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e04f      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d36:	4b2b      	ldr	r3, [pc, #172]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 020c 	and.w	r2, r3, #12
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d1eb      	bne.n	8004d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d48:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d20c      	bcs.n	8004d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b22      	ldr	r3, [pc, #136]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e032      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d7c:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4916      	ldr	r1, [pc, #88]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	490e      	ldr	r1, [pc, #56]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dae:	f000 f821 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004db2:	4602      	mov	r2, r0
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	490a      	ldr	r1, [pc, #40]	; (8004de8 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc0:	5ccb      	ldrb	r3, [r1, r3]
 8004dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc6:	4a09      	ldr	r2, [pc, #36]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd fff6 	bl	8002dc0 <HAL_InitTick>

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40023c00 	.word	0x40023c00
 8004de4:	40023800 	.word	0x40023800
 8004de8:	0800a124 	.word	0x0800a124
 8004dec:	20000000 	.word	0x20000000
 8004df0:	20000004 	.word	0x20000004

08004df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	2300      	movs	r3, #0
 8004e06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e0c:	4b67      	ldr	r3, [pc, #412]	; (8004fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d00d      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x40>
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	f200 80bd 	bhi.w	8004f98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x34>
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d003      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e26:	e0b7      	b.n	8004f98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e28:	4b61      	ldr	r3, [pc, #388]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e2a:	60bb      	str	r3, [r7, #8]
       break;
 8004e2c:	e0b7      	b.n	8004f9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e2e:	4b61      	ldr	r3, [pc, #388]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e30:	60bb      	str	r3, [r7, #8]
      break;
 8004e32:	e0b4      	b.n	8004f9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e34:	4b5d      	ldr	r3, [pc, #372]	; (8004fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e3e:	4b5b      	ldr	r3, [pc, #364]	; (8004fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d04d      	beq.n	8004ee6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4a:	4b58      	ldr	r3, [pc, #352]	; (8004fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	099b      	lsrs	r3, r3, #6
 8004e50:	461a      	mov	r2, r3
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e5a:	f04f 0100 	mov.w	r1, #0
 8004e5e:	ea02 0800 	and.w	r8, r2, r0
 8004e62:	ea03 0901 	and.w	r9, r3, r1
 8004e66:	4640      	mov	r0, r8
 8004e68:	4649      	mov	r1, r9
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	014b      	lsls	r3, r1, #5
 8004e74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e78:	0142      	lsls	r2, r0, #5
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	ebb0 0008 	subs.w	r0, r0, r8
 8004e82:	eb61 0109 	sbc.w	r1, r1, r9
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	018b      	lsls	r3, r1, #6
 8004e90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e94:	0182      	lsls	r2, r0, #6
 8004e96:	1a12      	subs	r2, r2, r0
 8004e98:	eb63 0301 	sbc.w	r3, r3, r1
 8004e9c:	f04f 0000 	mov.w	r0, #0
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	00d9      	lsls	r1, r3, #3
 8004ea6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eaa:	00d0      	lsls	r0, r2, #3
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	eb12 0208 	adds.w	r2, r2, r8
 8004eb4:	eb43 0309 	adc.w	r3, r3, r9
 8004eb8:	f04f 0000 	mov.w	r0, #0
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	0259      	lsls	r1, r3, #9
 8004ec2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ec6:	0250      	lsls	r0, r2, #9
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4619      	mov	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	f7fb f97e 	bl	80001d8 <__aeabi_uldivmod>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e04a      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee6:	4b31      	ldr	r3, [pc, #196]	; (8004fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	099b      	lsrs	r3, r3, #6
 8004eec:	461a      	mov	r2, r3
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ef6:	f04f 0100 	mov.w	r1, #0
 8004efa:	ea02 0400 	and.w	r4, r2, r0
 8004efe:	ea03 0501 	and.w	r5, r3, r1
 8004f02:	4620      	mov	r0, r4
 8004f04:	4629      	mov	r1, r5
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	014b      	lsls	r3, r1, #5
 8004f10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f14:	0142      	lsls	r2, r0, #5
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	1b00      	subs	r0, r0, r4
 8004f1c:	eb61 0105 	sbc.w	r1, r1, r5
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	018b      	lsls	r3, r1, #6
 8004f2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f2e:	0182      	lsls	r2, r0, #6
 8004f30:	1a12      	subs	r2, r2, r0
 8004f32:	eb63 0301 	sbc.w	r3, r3, r1
 8004f36:	f04f 0000 	mov.w	r0, #0
 8004f3a:	f04f 0100 	mov.w	r1, #0
 8004f3e:	00d9      	lsls	r1, r3, #3
 8004f40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f44:	00d0      	lsls	r0, r2, #3
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	1912      	adds	r2, r2, r4
 8004f4c:	eb45 0303 	adc.w	r3, r5, r3
 8004f50:	f04f 0000 	mov.w	r0, #0
 8004f54:	f04f 0100 	mov.w	r1, #0
 8004f58:	0299      	lsls	r1, r3, #10
 8004f5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f5e:	0290      	lsls	r0, r2, #10
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	f7fb f932 	bl	80001d8 <__aeabi_uldivmod>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4613      	mov	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	3301      	adds	r3, #1
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	60bb      	str	r3, [r7, #8]
      break;
 8004f96:	e002      	b.n	8004f9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f9a:	60bb      	str	r3, [r7, #8]
      break;
 8004f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	00f42400 	.word	0x00f42400
 8004fb4:	007a1200 	.word	0x007a1200

08004fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fbc:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000000 	.word	0x20000000

08004fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fd4:	f7ff fff0 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	0a9b      	lsrs	r3, r3, #10
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4903      	ldr	r1, [pc, #12]	; (8004ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	0800a134 	.word	0x0800a134

08004ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ffc:	f7ff ffdc 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0b5b      	lsrs	r3, r3, #13
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4903      	ldr	r1, [pc, #12]	; (800501c <HAL_RCC_GetPCLK2Freq+0x24>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40023800 	.word	0x40023800
 800501c:	0800a134 	.word	0x0800a134

08005020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e07b      	b.n	800512a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	d108      	bne.n	800504c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005042:	d009      	beq.n	8005058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	61da      	str	r2, [r3, #28]
 800504a:	e005      	b.n	8005058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fd fc6e 	bl	8002954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050dc:	ea42 0103 	orr.w	r1, r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	f003 0104 	and.w	r1, r3, #4
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	f003 0210 	and.w	r2, r3, #16
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005118:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b088      	sub	sp, #32
 8005136:	af02      	add	r7, sp, #8
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514e:	d112      	bne.n	8005176 <HAL_SPI_Receive+0x44>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10e      	bne.n	8005176 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2204      	movs	r2, #4
 800515c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f8f1 	bl	8005354 <HAL_SPI_TransmitReceive>
 8005172:	4603      	mov	r3, r0
 8005174:	e0ea      	b.n	800534c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_SPI_Receive+0x52>
 8005180:	2302      	movs	r3, #2
 8005182:	e0e3      	b.n	800534c <HAL_SPI_Receive+0x21a>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800518c:	f7fd fe5c 	bl	8002e48 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d002      	beq.n	80051a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800519e:	2302      	movs	r3, #2
 80051a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051a2:	e0ca      	b.n	800533a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_SPI_Receive+0x7e>
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051b4:	e0c1      	b.n	800533a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2204      	movs	r2, #4
 80051ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fc:	d10f      	bne.n	800521e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800521c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d007      	beq.n	800523c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d162      	bne.n	800530a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005244:	e02e      	b.n	80052a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	d115      	bne.n	8005280 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f103 020c 	add.w	r2, r3, #12
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800527e:	e011      	b.n	80052a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005280:	f7fd fde2 	bl	8002e48 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d803      	bhi.n	8005298 <HAL_SPI_Receive+0x166>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d102      	bne.n	800529e <HAL_SPI_Receive+0x16c>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052a2:	e04a      	b.n	800533a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1cb      	bne.n	8005246 <HAL_SPI_Receive+0x114>
 80052ae:	e031      	b.n	8005314 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d113      	bne.n	80052e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	b292      	uxth	r2, r2
 80052ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	1c9a      	adds	r2, r3, #2
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052e4:	e011      	b.n	800530a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052e6:	f7fd fdaf 	bl	8002e48 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d803      	bhi.n	80052fe <HAL_SPI_Receive+0x1cc>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d102      	bne.n	8005304 <HAL_SPI_Receive+0x1d2>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005308:	e017      	b.n	800533a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1cd      	bne.n	80052b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fa45 	bl	80057a8 <SPI_EndRxTransaction>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	75fb      	strb	r3, [r7, #23]
 8005336:	e000      	b.n	800533a <HAL_SPI_Receive+0x208>
  }

error :
 8005338:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800534a:	7dfb      	ldrb	r3, [r7, #23]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08c      	sub	sp, #48	; 0x30
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005362:	2301      	movs	r3, #1
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_SPI_TransmitReceive+0x26>
 8005376:	2302      	movs	r3, #2
 8005378:	e18a      	b.n	8005690 <HAL_SPI_TransmitReceive+0x33c>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005382:	f7fd fd61 	bl	8002e48 <HAL_GetTick>
 8005386:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800538e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005398:	887b      	ldrh	r3, [r7, #2]
 800539a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800539c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d00f      	beq.n	80053c4 <HAL_SPI_TransmitReceive+0x70>
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053aa:	d107      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d103      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x68>
 80053b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d003      	beq.n	80053c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053c2:	e15b      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_SPI_TransmitReceive+0x82>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_SPI_TransmitReceive+0x82>
 80053d0:	887b      	ldrh	r3, [r7, #2]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053dc:	e14e      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d003      	beq.n	80053f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2205      	movs	r2, #5
 80053ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	887a      	ldrh	r2, [r7, #2]
 8005402:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	887a      	ldrh	r2, [r7, #2]
 8005408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	887a      	ldrh	r2, [r7, #2]
 8005414:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	887a      	ldrh	r2, [r7, #2]
 800541a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b40      	cmp	r3, #64	; 0x40
 8005434:	d007      	beq.n	8005446 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544e:	d178      	bne.n	8005542 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_SPI_TransmitReceive+0x10a>
 8005458:	8b7b      	ldrh	r3, [r7, #26]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d166      	bne.n	800552c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	881a      	ldrh	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	1c9a      	adds	r2, r3, #2
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005482:	e053      	b.n	800552c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b02      	cmp	r3, #2
 8005490:	d11b      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x176>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d016      	beq.n	80054ca <HAL_SPI_TransmitReceive+0x176>
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d113      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	1c9a      	adds	r2, r3, #2
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d119      	bne.n	800550c <HAL_SPI_TransmitReceive+0x1b8>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d014      	beq.n	800550c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	b292      	uxth	r2, r2
 80054ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	1c9a      	adds	r2, r3, #2
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005508:	2301      	movs	r3, #1
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800550c:	f7fd fc9c 	bl	8002e48 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005518:	429a      	cmp	r2, r3
 800551a:	d807      	bhi.n	800552c <HAL_SPI_TransmitReceive+0x1d8>
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005522:	d003      	beq.n	800552c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800552a:	e0a7      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1a6      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x130>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1a1      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x130>
 8005540:	e07c      	b.n	800563c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_SPI_TransmitReceive+0x1fc>
 800554a:	8b7b      	ldrh	r3, [r7, #26]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d16b      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005576:	e057      	b.n	8005628 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b02      	cmp	r3, #2
 8005584:	d11c      	bne.n	80055c0 <HAL_SPI_TransmitReceive+0x26c>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d017      	beq.n	80055c0 <HAL_SPI_TransmitReceive+0x26c>
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d114      	bne.n	80055c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d119      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x2ae>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d014      	beq.n	8005602 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055fe:	2301      	movs	r3, #1
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005602:	f7fd fc21 	bl	8002e48 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800560e:	429a      	cmp	r2, r3
 8005610:	d803      	bhi.n	800561a <HAL_SPI_TransmitReceive+0x2c6>
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d102      	bne.n	8005620 <HAL_SPI_TransmitReceive+0x2cc>
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005626:	e029      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1a2      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x224>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d19d      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800563c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f917 	bl	8005874 <SPI_EndRxTxTransaction>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d006      	beq.n	800565a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005658:	e010      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	e000      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800567a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800568c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005690:	4618      	mov	r0, r3
 8005692:	3730      	adds	r7, #48	; 0x30
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4613      	mov	r3, r2
 80056a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056a8:	f7fd fbce 	bl	8002e48 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056b8:	f7fd fbc6 	bl	8002e48 <HAL_GetTick>
 80056bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056be:	4b39      	ldr	r3, [pc, #228]	; (80057a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	015b      	lsls	r3, r3, #5
 80056c4:	0d1b      	lsrs	r3, r3, #20
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ce:	e054      	b.n	800577a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d050      	beq.n	800577a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056d8:	f7fd fbb6 	bl	8002e48 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d902      	bls.n	80056ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d13d      	bne.n	800576a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005706:	d111      	bne.n	800572c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005710:	d004      	beq.n	800571c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571a:	d107      	bne.n	800572c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005734:	d10f      	bne.n	8005756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e017      	b.n	800579a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3b01      	subs	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	bf0c      	ite	eq
 800578a:	2301      	moveq	r3, #1
 800578c:	2300      	movne	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	429a      	cmp	r2, r3
 8005796:	d19b      	bne.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000000 	.word	0x20000000

080057a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057bc:	d111      	bne.n	80057e2 <SPI_EndRxTransaction+0x3a>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c6:	d004      	beq.n	80057d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d0:	d107      	bne.n	80057e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ea:	d12a      	bne.n	8005842 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f4:	d012      	beq.n	800581c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2200      	movs	r2, #0
 80057fe:	2180      	movs	r1, #128	; 0x80
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff ff49 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d02d      	beq.n	8005868 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005810:	f043 0220 	orr.w	r2, r3, #32
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e026      	b.n	800586a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	2101      	movs	r1, #1
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff ff36 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01a      	beq.n	8005868 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e013      	b.n	800586a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2200      	movs	r2, #0
 800584a:	2101      	movs	r1, #1
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ff23 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e000      	b.n	800586a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005880:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <SPI_EndRxTxTransaction+0x7c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <SPI_EndRxTxTransaction+0x80>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	0d5b      	lsrs	r3, r3, #21
 800588c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005890:	fb02 f303 	mul.w	r3, r2, r3
 8005894:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589e:	d112      	bne.n	80058c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff fef4 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d016      	beq.n	80058e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e00f      	b.n	80058e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058dc:	2b80      	cmp	r3, #128	; 0x80
 80058de:	d0f2      	beq.n	80058c6 <SPI_EndRxTxTransaction+0x52>
 80058e0:	e000      	b.n	80058e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80058e2:	bf00      	nop
  }

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000000 	.word	0x20000000
 80058f4:	165e9f81 	.word	0x165e9f81

080058f8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e034      	b.n	8005978 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7fc f83a 	bl	800199c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3308      	adds	r3, #8
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f001 fb0e 	bl	8006f54 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	461a      	mov	r2, r3
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	f001 fb58 	bl	8006ff8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6858      	ldr	r0, [r3, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	f001 fb8d 	bl	8007074 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	6892      	ldr	r2, [r2, #8]
 8005962:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	6892      	ldr	r2, [r2, #8]
 800596e:	f041 0101 	orr.w	r1, r1, #1
 8005972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e041      	b.n	8005a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fd f8e0 	bl	8002b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f000 fa96 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d001      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e04e      	b.n	8005ad6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a23      	ldr	r2, [pc, #140]	; (8005ae4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d022      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d01d      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1f      	ldr	r2, [pc, #124]	; (8005ae8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d018      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1e      	ldr	r2, [pc, #120]	; (8005aec <HAL_TIM_Base_Start_IT+0xcc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00e      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a18      	ldr	r2, [pc, #96]	; (8005afc <HAL_TIM_Base_Start_IT+0xdc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d111      	bne.n	8005ac4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b06      	cmp	r3, #6
 8005ab0:	d010      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac2:	e007      	b.n	8005ad4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40010000 	.word	0x40010000
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40000c00 	.word	0x40000c00
 8005af4:	40010400 	.word	0x40010400
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40001800 	.word	0x40001800

08005b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d122      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d11b      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0202 	mvn.w	r2, #2
 8005b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9b5 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9a7 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f9b8 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d122      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d11b      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0204 	mvn.w	r2, #4
 8005b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f98b 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005b9c:	e005      	b.n	8005baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f97d 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f98e 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d122      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d11b      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0208 	mvn.w	r2, #8
 8005bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f961 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005bf0:	e005      	b.n	8005bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f953 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f964 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d122      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d11b      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f06f 0210 	mvn.w	r2, #16
 8005c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f937 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005c44:	e005      	b.n	8005c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f929 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f93a 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10e      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d107      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0201 	mvn.w	r2, #1
 8005c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fc fdec 	bl	800285c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b80      	cmp	r3, #128	; 0x80
 8005c90:	d10e      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9c:	2b80      	cmp	r3, #128	; 0x80
 8005c9e:	d107      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fae0 	bl	8006270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b40      	cmp	r3, #64	; 0x40
 8005cbc:	d10e      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d107      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f8ff 	bl	8005eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d10e      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d107      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0220 	mvn.w	r2, #32
 8005d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 faaa 	bl	800625c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_ConfigClockSource+0x1c>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e0b4      	b.n	8005e96 <HAL_TIM_ConfigClockSource+0x186>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d64:	d03e      	beq.n	8005de4 <HAL_TIM_ConfigClockSource+0xd4>
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6a:	f200 8087 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d72:	f000 8086 	beq.w	8005e82 <HAL_TIM_ConfigClockSource+0x172>
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7a:	d87f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d7c:	2b70      	cmp	r3, #112	; 0x70
 8005d7e:	d01a      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0xa6>
 8005d80:	2b70      	cmp	r3, #112	; 0x70
 8005d82:	d87b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d84:	2b60      	cmp	r3, #96	; 0x60
 8005d86:	d050      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0x11a>
 8005d88:	2b60      	cmp	r3, #96	; 0x60
 8005d8a:	d877      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d8c:	2b50      	cmp	r3, #80	; 0x50
 8005d8e:	d03c      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0xfa>
 8005d90:	2b50      	cmp	r3, #80	; 0x50
 8005d92:	d873      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	d058      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x13a>
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d86f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d9c:	2b30      	cmp	r3, #48	; 0x30
 8005d9e:	d064      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005da0:	2b30      	cmp	r3, #48	; 0x30
 8005da2:	d86b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d060      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d867      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d05c      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d05a      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005db4:	e062      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6899      	ldr	r1, [r3, #8]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f000 f9ad 	bl	8006124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	609a      	str	r2, [r3, #8]
      break;
 8005de2:	e04f      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6899      	ldr	r1, [r3, #8]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f000 f996 	bl	8006124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e06:	609a      	str	r2, [r3, #8]
      break;
 8005e08:	e03c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6859      	ldr	r1, [r3, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	461a      	mov	r2, r3
 8005e18:	f000 f90a 	bl	8006030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2150      	movs	r1, #80	; 0x50
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f963 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005e28:	e02c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f000 f929 	bl	800608e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2160      	movs	r1, #96	; 0x60
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 f953 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005e48:	e01c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6859      	ldr	r1, [r3, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	461a      	mov	r2, r3
 8005e58:	f000 f8ea 	bl	8006030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2140      	movs	r1, #64	; 0x40
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 f943 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005e68:	e00c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f000 f93a 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005e7a:	e003      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	e000      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a40      	ldr	r2, [pc, #256]	; (8006004 <TIM_Base_SetConfig+0x114>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d00f      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a3d      	ldr	r2, [pc, #244]	; (8006008 <TIM_Base_SetConfig+0x118>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00b      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a3c      	ldr	r2, [pc, #240]	; (800600c <TIM_Base_SetConfig+0x11c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a3b      	ldr	r2, [pc, #236]	; (8006010 <TIM_Base_SetConfig+0x120>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a3a      	ldr	r2, [pc, #232]	; (8006014 <TIM_Base_SetConfig+0x124>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d108      	bne.n	8005f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <TIM_Base_SetConfig+0x114>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d02b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f50:	d027      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <TIM_Base_SetConfig+0x118>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d023      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2b      	ldr	r2, [pc, #172]	; (800600c <TIM_Base_SetConfig+0x11c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d01f      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <TIM_Base_SetConfig+0x120>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a29      	ldr	r2, [pc, #164]	; (8006014 <TIM_Base_SetConfig+0x124>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d017      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a28      	ldr	r2, [pc, #160]	; (8006018 <TIM_Base_SetConfig+0x128>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <TIM_Base_SetConfig+0x12c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00f      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a26      	ldr	r2, [pc, #152]	; (8006020 <TIM_Base_SetConfig+0x130>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a25      	ldr	r2, [pc, #148]	; (8006024 <TIM_Base_SetConfig+0x134>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a24      	ldr	r2, [pc, #144]	; (8006028 <TIM_Base_SetConfig+0x138>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d003      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a23      	ldr	r2, [pc, #140]	; (800602c <TIM_Base_SetConfig+0x13c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d108      	bne.n	8005fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <TIM_Base_SetConfig+0x114>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_Base_SetConfig+0xf8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <TIM_Base_SetConfig+0x124>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d103      	bne.n	8005ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	615a      	str	r2, [r3, #20]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40010400 	.word	0x40010400
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800
 8006024:	40001800 	.word	0x40001800
 8006028:	40001c00 	.word	0x40001c00
 800602c:	40002000 	.word	0x40002000

08006030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f023 0201 	bic.w	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 030a 	bic.w	r3, r3, #10
 800606c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608e:	b480      	push	{r7}
 8006090:	b087      	sub	sp, #28
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0210 	bic.w	r2, r3, #16
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	031b      	lsls	r3, r3, #12
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	f043 0307 	orr.w	r3, r3, #7
 8006110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	609a      	str	r2, [r3, #8]
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800613e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	021a      	lsls	r2, r3, #8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	431a      	orrs	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4313      	orrs	r3, r2
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	609a      	str	r2, [r3, #8]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006178:	2302      	movs	r3, #2
 800617a:	e05a      	b.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a21      	ldr	r2, [pc, #132]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d022      	beq.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c8:	d01d      	beq.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a1d      	ldr	r2, [pc, #116]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d018      	beq.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1b      	ldr	r2, [pc, #108]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1a      	ldr	r2, [pc, #104]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00e      	beq.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a18      	ldr	r2, [pc, #96]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d009      	beq.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a17      	ldr	r2, [pc, #92]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a15      	ldr	r2, [pc, #84]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d10c      	bne.n	8006220 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	4313      	orrs	r3, r2
 8006216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40010000 	.word	0x40010000
 8006244:	40000400 	.word	0x40000400
 8006248:	40000800 	.word	0x40000800
 800624c:	40000c00 	.word	0x40000c00
 8006250:	40010400 	.word	0x40010400
 8006254:	40014000 	.word	0x40014000
 8006258:	40001800 	.word	0x40001800

0800625c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e03f      	b.n	8006316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fc fcae 	bl	8002c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2224      	movs	r2, #36	; 0x24
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fc7b 	bl	8006bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695a      	ldr	r2, [r3, #20]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b0ba      	sub	sp, #232	; 0xe8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006346:	2300      	movs	r3, #0
 8006348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800634c:	2300      	movs	r3, #0
 800634e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800635e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10f      	bne.n	8006386 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <HAL_UART_IRQHandler+0x66>
 8006372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fb65 	bl	8006a4e <UART_Receive_IT>
      return;
 8006384:	e256      	b.n	8006834 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80de 	beq.w	800654c <HAL_UART_IRQHandler+0x22c>
 8006390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d106      	bne.n	80063aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80d1 	beq.w	800654c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <HAL_UART_IRQHandler+0xae>
 80063b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	f043 0201 	orr.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_UART_IRQHandler+0xd2>
 80063da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f043 0202 	orr.w	r2, r3, #2
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <HAL_UART_IRQHandler+0xf6>
 80063fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f043 0204 	orr.w	r2, r3, #4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d011      	beq.n	8006446 <HAL_UART_IRQHandler+0x126>
 8006422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d105      	bne.n	800643a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800642e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f043 0208 	orr.w	r2, r3, #8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 81ed 	beq.w	800682a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d008      	beq.n	800646e <HAL_UART_IRQHandler+0x14e>
 800645c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 faf0 	bl	8006a4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <HAL_UART_IRQHandler+0x17a>
 8006492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d04f      	beq.n	800653a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f9f8 	bl	8006890 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d141      	bne.n	8006532 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3314      	adds	r3, #20
 80064d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1d9      	bne.n	80064ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d013      	beq.n	800652a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	4a7d      	ldr	r2, [pc, #500]	; (80066fc <HAL_UART_IRQHandler+0x3dc>)
 8006508:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	4618      	mov	r0, r3
 8006510:	f7fc fe4b 	bl	80031aa <HAL_DMA_Abort_IT>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d016      	beq.n	8006548 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006524:	4610      	mov	r0, r2
 8006526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	e00e      	b.n	8006548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f99a 	bl	8006864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006530:	e00a      	b.n	8006548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f996 	bl	8006864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	e006      	b.n	8006548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f992 	bl	8006864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006546:	e170      	b.n	800682a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006548:	bf00      	nop
    return;
 800654a:	e16e      	b.n	800682a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006550:	2b01      	cmp	r3, #1
 8006552:	f040 814a 	bne.w	80067ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 8143 	beq.w	80067ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 813c 	beq.w	80067ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006572:	2300      	movs	r3, #0
 8006574:	60bb      	str	r3, [r7, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60bb      	str	r3, [r7, #8]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	f040 80b4 	bne.w	8006700 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8140 	beq.w	800682e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065b6:	429a      	cmp	r2, r3
 80065b8:	f080 8139 	bcs.w	800682e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ce:	f000 8088 	beq.w	80066e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	330c      	adds	r3, #12
 80065d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800660a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1d9      	bne.n	80065d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3314      	adds	r3, #20
 8006624:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800662e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3314      	adds	r3, #20
 800663e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006642:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006646:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800664a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e1      	bne.n	800661e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3314      	adds	r3, #20
 8006660:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800666a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800666c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3314      	adds	r3, #20
 800667a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800667e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006680:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006684:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800668c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e3      	bne.n	800665a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b2:	f023 0310 	bic.w	r3, r3, #16
 80066b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	330c      	adds	r3, #12
 80066c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80066c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e3      	bne.n	80066a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fc fcf4 	bl	80030ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f8c0 	bl	8006878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066f8:	e099      	b.n	800682e <HAL_UART_IRQHandler+0x50e>
 80066fa:	bf00      	nop
 80066fc:	08006957 	.word	0x08006957
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006708:	b29b      	uxth	r3, r3
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 808b 	beq.w	8006832 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800671c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8086 	beq.w	8006832 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800673c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	330c      	adds	r3, #12
 8006746:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800674a:	647a      	str	r2, [r7, #68]	; 0x44
 800674c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006750:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e3      	bne.n	8006726 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3314      	adds	r3, #20
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	623b      	str	r3, [r7, #32]
   return(result);
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006782:	633a      	str	r2, [r7, #48]	; 0x30
 8006784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e3      	bne.n	800675e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0310 	bic.w	r3, r3, #16
 80067ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067c8:	61fa      	str	r2, [r7, #28]
 80067ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	69b9      	ldr	r1, [r7, #24]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	617b      	str	r3, [r7, #20]
   return(result);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e3      	bne.n	80067a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f848 	bl	8006878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067e8:	e023      	b.n	8006832 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d009      	beq.n	800680a <HAL_UART_IRQHandler+0x4ea>
 80067f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f8bb 	bl	800697e <UART_Transmit_IT>
    return;
 8006808:	e014      	b.n	8006834 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00e      	beq.n	8006834 <HAL_UART_IRQHandler+0x514>
 8006816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d008      	beq.n	8006834 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f8fb 	bl	8006a1e <UART_EndTransmit_IT>
    return;
 8006828:	e004      	b.n	8006834 <HAL_UART_IRQHandler+0x514>
    return;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <HAL_UART_IRQHandler+0x514>
      return;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <HAL_UART_IRQHandler+0x514>
      return;
 8006832:	bf00      	nop
  }
}
 8006834:	37e8      	adds	r7, #232	; 0xe8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop

0800683c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b095      	sub	sp, #84	; 0x54
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	330c      	adds	r3, #12
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	330c      	adds	r3, #12
 80068b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068b8:	643a      	str	r2, [r7, #64]	; 0x40
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e5      	bne.n	8006898 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3314      	adds	r3, #20
 80068d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	61fb      	str	r3, [r7, #28]
   return(result);
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f023 0301 	bic.w	r3, r3, #1
 80068e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3314      	adds	r3, #20
 80068ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e5      	bne.n	80068cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	2b01      	cmp	r3, #1
 8006906:	d119      	bne.n	800693c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	330c      	adds	r3, #12
 800690e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	e853 3f00 	ldrex	r3, [r3]
 8006916:	60bb      	str	r3, [r7, #8]
   return(result);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f023 0310 	bic.w	r3, r3, #16
 800691e:	647b      	str	r3, [r7, #68]	; 0x44
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006928:	61ba      	str	r2, [r7, #24]
 800692a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6979      	ldr	r1, [r7, #20]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	613b      	str	r3, [r7, #16]
   return(result);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e5      	bne.n	8006908 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
}
 800694a:	bf00      	nop
 800694c:	3754      	adds	r7, #84	; 0x54
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff ff77 	bl	8006864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b21      	cmp	r3, #33	; 0x21
 8006990:	d13e      	bne.n	8006a10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699a:	d114      	bne.n	80069c6 <UART_Transmit_IT+0x48>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d110      	bne.n	80069c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	1c9a      	adds	r2, r3, #2
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	621a      	str	r2, [r3, #32]
 80069c4:	e008      	b.n	80069d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	1c59      	adds	r1, r3, #1
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6211      	str	r1, [r2, #32]
 80069d0:	781a      	ldrb	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4619      	mov	r1, r3
 80069e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10f      	bne.n	8006a0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	e000      	b.n	8006a12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a10:	2302      	movs	r3, #2
  }
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fefc 	bl	800683c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b08c      	sub	sp, #48	; 0x30
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b22      	cmp	r3, #34	; 0x22
 8006a60:	f040 80ab 	bne.w	8006bba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6c:	d117      	bne.n	8006a9e <UART_Receive_IT+0x50>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d113      	bne.n	8006a9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	1c9a      	adds	r2, r3, #2
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a9c:	e026      	b.n	8006aec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab0:	d007      	beq.n	8006ac2 <UART_Receive_IT+0x74>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <UART_Receive_IT+0x82>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	e008      	b.n	8006ae2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	4619      	mov	r1, r3
 8006afa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d15a      	bne.n	8006bb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0220 	bic.w	r2, r2, #32
 8006b0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695a      	ldr	r2, [r3, #20]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0201 	bic.w	r2, r2, #1
 8006b2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d135      	bne.n	8006bac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	330c      	adds	r3, #12
 8006b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	613b      	str	r3, [r7, #16]
   return(result);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f023 0310 	bic.w	r3, r3, #16
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b66:	623a      	str	r2, [r7, #32]
 8006b68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	69f9      	ldr	r1, [r7, #28]
 8006b6c:	6a3a      	ldr	r2, [r7, #32]
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e5      	bne.n	8006b46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b10      	cmp	r3, #16
 8006b86:	d10a      	bne.n	8006b9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff fe67 	bl	8006878 <HAL_UARTEx_RxEventCallback>
 8006baa:	e002      	b.n	8006bb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff fe4f 	bl	8006850 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e002      	b.n	8006bbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e000      	b.n	8006bbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006bba:	2302      	movs	r3, #2
  }
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3730      	adds	r7, #48	; 0x30
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc8:	b09f      	sub	sp, #124	; 0x7c
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bda:	68d9      	ldr	r1, [r3, #12]
 8006bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	ea40 0301 	orr.w	r3, r0, r1
 8006be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c08:	f021 010c 	bic.w	r1, r1, #12
 8006c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c12:	430b      	orrs	r3, r1
 8006c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c22:	6999      	ldr	r1, [r3, #24]
 8006c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	ea40 0301 	orr.w	r3, r0, r1
 8006c2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	4bc5      	ldr	r3, [pc, #788]	; (8006f48 <UART_SetConfig+0x384>)
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d004      	beq.n	8006c42 <UART_SetConfig+0x7e>
 8006c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	4bc3      	ldr	r3, [pc, #780]	; (8006f4c <UART_SetConfig+0x388>)
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d103      	bne.n	8006c4a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c42:	f7fe f9d9 	bl	8004ff8 <HAL_RCC_GetPCLK2Freq>
 8006c46:	6778      	str	r0, [r7, #116]	; 0x74
 8006c48:	e002      	b.n	8006c50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c4a:	f7fe f9c1 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8006c4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c58:	f040 80b6 	bne.w	8006dc8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c5e:	461c      	mov	r4, r3
 8006c60:	f04f 0500 	mov.w	r5, #0
 8006c64:	4622      	mov	r2, r4
 8006c66:	462b      	mov	r3, r5
 8006c68:	1891      	adds	r1, r2, r2
 8006c6a:	6439      	str	r1, [r7, #64]	; 0x40
 8006c6c:	415b      	adcs	r3, r3
 8006c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c74:	1912      	adds	r2, r2, r4
 8006c76:	eb45 0303 	adc.w	r3, r5, r3
 8006c7a:	f04f 0000 	mov.w	r0, #0
 8006c7e:	f04f 0100 	mov.w	r1, #0
 8006c82:	00d9      	lsls	r1, r3, #3
 8006c84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c88:	00d0      	lsls	r0, r2, #3
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	1911      	adds	r1, r2, r4
 8006c90:	6639      	str	r1, [r7, #96]	; 0x60
 8006c92:	416b      	adcs	r3, r5
 8006c94:	667b      	str	r3, [r7, #100]	; 0x64
 8006c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	1891      	adds	r1, r2, r2
 8006ca2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ca4:	415b      	adcs	r3, r3
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006cb0:	f7f9 fa92 	bl	80001d8 <__aeabi_uldivmod>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4ba5      	ldr	r3, [pc, #660]	; (8006f50 <UART_SetConfig+0x38c>)
 8006cba:	fba3 2302 	umull	r2, r3, r3, r2
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	011e      	lsls	r6, r3, #4
 8006cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cc4:	461c      	mov	r4, r3
 8006cc6:	f04f 0500 	mov.w	r5, #0
 8006cca:	4622      	mov	r2, r4
 8006ccc:	462b      	mov	r3, r5
 8006cce:	1891      	adds	r1, r2, r2
 8006cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8006cd2:	415b      	adcs	r3, r3
 8006cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006cda:	1912      	adds	r2, r2, r4
 8006cdc:	eb45 0303 	adc.w	r3, r5, r3
 8006ce0:	f04f 0000 	mov.w	r0, #0
 8006ce4:	f04f 0100 	mov.w	r1, #0
 8006ce8:	00d9      	lsls	r1, r3, #3
 8006cea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cee:	00d0      	lsls	r0, r2, #3
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	1911      	adds	r1, r2, r4
 8006cf6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cf8:	416b      	adcs	r3, r5
 8006cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	461a      	mov	r2, r3
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	1891      	adds	r1, r2, r2
 8006d08:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d0a:	415b      	adcs	r3, r3
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d16:	f7f9 fa5f 	bl	80001d8 <__aeabi_uldivmod>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4b8c      	ldr	r3, [pc, #560]	; (8006f50 <UART_SetConfig+0x38c>)
 8006d20:	fba3 1302 	umull	r1, r3, r3, r2
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	2164      	movs	r1, #100	; 0x64
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	3332      	adds	r3, #50	; 0x32
 8006d32:	4a87      	ldr	r2, [pc, #540]	; (8006f50 <UART_SetConfig+0x38c>)
 8006d34:	fba2 2303 	umull	r2, r3, r2, r3
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d40:	441e      	add	r6, r3
 8006d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d44:	4618      	mov	r0, r3
 8006d46:	f04f 0100 	mov.w	r1, #0
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	1894      	adds	r4, r2, r2
 8006d50:	623c      	str	r4, [r7, #32]
 8006d52:	415b      	adcs	r3, r3
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
 8006d56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d5a:	1812      	adds	r2, r2, r0
 8006d5c:	eb41 0303 	adc.w	r3, r1, r3
 8006d60:	f04f 0400 	mov.w	r4, #0
 8006d64:	f04f 0500 	mov.w	r5, #0
 8006d68:	00dd      	lsls	r5, r3, #3
 8006d6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d6e:	00d4      	lsls	r4, r2, #3
 8006d70:	4622      	mov	r2, r4
 8006d72:	462b      	mov	r3, r5
 8006d74:	1814      	adds	r4, r2, r0
 8006d76:	653c      	str	r4, [r7, #80]	; 0x50
 8006d78:	414b      	adcs	r3, r1
 8006d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	461a      	mov	r2, r3
 8006d82:	f04f 0300 	mov.w	r3, #0
 8006d86:	1891      	adds	r1, r2, r2
 8006d88:	61b9      	str	r1, [r7, #24]
 8006d8a:	415b      	adcs	r3, r3
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006d96:	f7f9 fa1f 	bl	80001d8 <__aeabi_uldivmod>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4b6c      	ldr	r3, [pc, #432]	; (8006f50 <UART_SetConfig+0x38c>)
 8006da0:	fba3 1302 	umull	r1, r3, r3, r2
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	2164      	movs	r1, #100	; 0x64
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	3332      	adds	r3, #50	; 0x32
 8006db2:	4a67      	ldr	r2, [pc, #412]	; (8006f50 <UART_SetConfig+0x38c>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	f003 0207 	and.w	r2, r3, #7
 8006dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4432      	add	r2, r6
 8006dc4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dc6:	e0b9      	b.n	8006f3c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dca:	461c      	mov	r4, r3
 8006dcc:	f04f 0500 	mov.w	r5, #0
 8006dd0:	4622      	mov	r2, r4
 8006dd2:	462b      	mov	r3, r5
 8006dd4:	1891      	adds	r1, r2, r2
 8006dd6:	6139      	str	r1, [r7, #16]
 8006dd8:	415b      	adcs	r3, r3
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006de0:	1912      	adds	r2, r2, r4
 8006de2:	eb45 0303 	adc.w	r3, r5, r3
 8006de6:	f04f 0000 	mov.w	r0, #0
 8006dea:	f04f 0100 	mov.w	r1, #0
 8006dee:	00d9      	lsls	r1, r3, #3
 8006df0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006df4:	00d0      	lsls	r0, r2, #3
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	eb12 0804 	adds.w	r8, r2, r4
 8006dfe:	eb43 0905 	adc.w	r9, r3, r5
 8006e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f04f 0100 	mov.w	r1, #0
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	008b      	lsls	r3, r1, #2
 8006e16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e1a:	0082      	lsls	r2, r0, #2
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	4649      	mov	r1, r9
 8006e20:	f7f9 f9da 	bl	80001d8 <__aeabi_uldivmod>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4b49      	ldr	r3, [pc, #292]	; (8006f50 <UART_SetConfig+0x38c>)
 8006e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	011e      	lsls	r6, r3, #4
 8006e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e34:	4618      	mov	r0, r3
 8006e36:	f04f 0100 	mov.w	r1, #0
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	1894      	adds	r4, r2, r2
 8006e40:	60bc      	str	r4, [r7, #8]
 8006e42:	415b      	adcs	r3, r3
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e4a:	1812      	adds	r2, r2, r0
 8006e4c:	eb41 0303 	adc.w	r3, r1, r3
 8006e50:	f04f 0400 	mov.w	r4, #0
 8006e54:	f04f 0500 	mov.w	r5, #0
 8006e58:	00dd      	lsls	r5, r3, #3
 8006e5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e5e:	00d4      	lsls	r4, r2, #3
 8006e60:	4622      	mov	r2, r4
 8006e62:	462b      	mov	r3, r5
 8006e64:	1814      	adds	r4, r2, r0
 8006e66:	64bc      	str	r4, [r7, #72]	; 0x48
 8006e68:	414b      	adcs	r3, r1
 8006e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f04f 0100 	mov.w	r1, #0
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	008b      	lsls	r3, r1, #2
 8006e80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e84:	0082      	lsls	r2, r0, #2
 8006e86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006e8a:	f7f9 f9a5 	bl	80001d8 <__aeabi_uldivmod>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4b2f      	ldr	r3, [pc, #188]	; (8006f50 <UART_SetConfig+0x38c>)
 8006e94:	fba3 1302 	umull	r1, r3, r3, r2
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	2164      	movs	r1, #100	; 0x64
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	3332      	adds	r3, #50	; 0x32
 8006ea6:	4a2a      	ldr	r2, [pc, #168]	; (8006f50 <UART_SetConfig+0x38c>)
 8006ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eb2:	441e      	add	r6, r3
 8006eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f04f 0100 	mov.w	r1, #0
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	1894      	adds	r4, r2, r2
 8006ec2:	603c      	str	r4, [r7, #0]
 8006ec4:	415b      	adcs	r3, r3
 8006ec6:	607b      	str	r3, [r7, #4]
 8006ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ecc:	1812      	adds	r2, r2, r0
 8006ece:	eb41 0303 	adc.w	r3, r1, r3
 8006ed2:	f04f 0400 	mov.w	r4, #0
 8006ed6:	f04f 0500 	mov.w	r5, #0
 8006eda:	00dd      	lsls	r5, r3, #3
 8006edc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ee0:	00d4      	lsls	r4, r2, #3
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	eb12 0a00 	adds.w	sl, r2, r0
 8006eea:	eb43 0b01 	adc.w	fp, r3, r1
 8006eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f04f 0100 	mov.w	r1, #0
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	008b      	lsls	r3, r1, #2
 8006f02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f06:	0082      	lsls	r2, r0, #2
 8006f08:	4650      	mov	r0, sl
 8006f0a:	4659      	mov	r1, fp
 8006f0c:	f7f9 f964 	bl	80001d8 <__aeabi_uldivmod>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <UART_SetConfig+0x38c>)
 8006f16:	fba3 1302 	umull	r1, r3, r3, r2
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	2164      	movs	r1, #100	; 0x64
 8006f1e:	fb01 f303 	mul.w	r3, r1, r3
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	3332      	adds	r3, #50	; 0x32
 8006f28:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <UART_SetConfig+0x38c>)
 8006f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	f003 020f 	and.w	r2, r3, #15
 8006f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4432      	add	r2, r6
 8006f3a:	609a      	str	r2, [r3, #8]
}
 8006f3c:	bf00      	nop
 8006f3e:	377c      	adds	r7, #124	; 0x7c
 8006f40:	46bd      	mov	sp, r7
 8006f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f46:	bf00      	nop
 8006f48:	40011000 	.word	0x40011000
 8006f4c:	40011400 	.word	0x40011400
 8006f50:	51eb851f 	.word	0x51eb851f

08006f54 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4b20      	ldr	r3, [pc, #128]	; (8006ff4 <FSMC_NORSRAM_Init+0xa0>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f7e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006f84:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006f8a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006f90:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006f96:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006f9c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006fa2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006fa8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006fae:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006fb4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006fba:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006fc0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d103      	bne.n	8006fd8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	fff00080 	.word	0xfff00080

08006ff8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007012:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800701a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007026:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800702e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007036:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	3b01      	subs	r3, #1
 800703e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007040:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	3b02      	subs	r3, #2
 8007048:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800704a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007050:	4313      	orrs	r3, r2
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6979      	ldr	r1, [r7, #20]
 8007060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
	...

08007074 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800708c:	d122      	bne.n	80070d4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007096:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800709c:	4013      	ands	r3, r2
 800709e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070aa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80070b2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80070ba:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070c0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6979      	ldr	r1, [r7, #20]
 80070ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80070d2:	e005      	b.n	80070e0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80070dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	371c      	adds	r7, #28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	cff00000 	.word	0xcff00000

080070f4 <__libc_init_array>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4d0d      	ldr	r5, [pc, #52]	; (800712c <__libc_init_array+0x38>)
 80070f8:	4c0d      	ldr	r4, [pc, #52]	; (8007130 <__libc_init_array+0x3c>)
 80070fa:	1b64      	subs	r4, r4, r5
 80070fc:	10a4      	asrs	r4, r4, #2
 80070fe:	2600      	movs	r6, #0
 8007100:	42a6      	cmp	r6, r4
 8007102:	d109      	bne.n	8007118 <__libc_init_array+0x24>
 8007104:	4d0b      	ldr	r5, [pc, #44]	; (8007134 <__libc_init_array+0x40>)
 8007106:	4c0c      	ldr	r4, [pc, #48]	; (8007138 <__libc_init_array+0x44>)
 8007108:	f000 f820 	bl	800714c <_init>
 800710c:	1b64      	subs	r4, r4, r5
 800710e:	10a4      	asrs	r4, r4, #2
 8007110:	2600      	movs	r6, #0
 8007112:	42a6      	cmp	r6, r4
 8007114:	d105      	bne.n	8007122 <__libc_init_array+0x2e>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f855 3b04 	ldr.w	r3, [r5], #4
 800711c:	4798      	blx	r3
 800711e:	3601      	adds	r6, #1
 8007120:	e7ee      	b.n	8007100 <__libc_init_array+0xc>
 8007122:	f855 3b04 	ldr.w	r3, [r5], #4
 8007126:	4798      	blx	r3
 8007128:	3601      	adds	r6, #1
 800712a:	e7f2      	b.n	8007112 <__libc_init_array+0x1e>
 800712c:	0800a144 	.word	0x0800a144
 8007130:	0800a144 	.word	0x0800a144
 8007134:	0800a144 	.word	0x0800a144
 8007138:	0800a148 	.word	0x0800a148

0800713c <memset>:
 800713c:	4402      	add	r2, r0
 800713e:	4603      	mov	r3, r0
 8007140:	4293      	cmp	r3, r2
 8007142:	d100      	bne.n	8007146 <memset+0xa>
 8007144:	4770      	bx	lr
 8007146:	f803 1b01 	strb.w	r1, [r3], #1
 800714a:	e7f9      	b.n	8007140 <memset+0x4>

0800714c <_init>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr

08007158 <_fini>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr
